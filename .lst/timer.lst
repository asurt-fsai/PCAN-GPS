   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"timer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	NVIC_EnableIRQ:
  23              	.LFB97:
  24              		.file 1 "./inc/core_cm4.h"
   1:./inc/core_cm4.h **** /**************************************************************************//**
   2:./inc/core_cm4.h ****  * @file     core_cm4.h
   3:./inc/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:./inc/core_cm4.h ****  * @version  V3.20
   5:./inc/core_cm4.h ****  * @date     25. February 2013
   6:./inc/core_cm4.h ****  *
   7:./inc/core_cm4.h ****  * @note
   8:./inc/core_cm4.h ****  *
   9:./inc/core_cm4.h ****  ******************************************************************************/
  10:./inc/core_cm4.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:./inc/core_cm4.h **** 
  12:./inc/core_cm4.h ****    All rights reserved.
  13:./inc/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:./inc/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:./inc/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:./inc/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:./inc/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./inc/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:./inc/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:./inc/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./inc/core_cm4.h ****      to endorse or promote products derived from this software without
  22:./inc/core_cm4.h ****      specific prior written permission.
  23:./inc/core_cm4.h ****    *
  24:./inc/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./inc/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./inc/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./inc/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./inc/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./inc/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./inc/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./inc/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./inc/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./inc/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./inc/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./inc/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:./inc/core_cm4.h **** 
  37:./inc/core_cm4.h **** 
  38:./inc/core_cm4.h **** #if defined ( __ICCARM__ )
  39:./inc/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:./inc/core_cm4.h **** #endif
  41:./inc/core_cm4.h **** 
  42:./inc/core_cm4.h **** #ifdef __cplusplus
  43:./inc/core_cm4.h ****  extern "C" {
  44:./inc/core_cm4.h **** #endif
  45:./inc/core_cm4.h **** 
  46:./inc/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  47:./inc/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  48:./inc/core_cm4.h **** 
  49:./inc/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:./inc/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:./inc/core_cm4.h **** 
  52:./inc/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:./inc/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:./inc/core_cm4.h **** 
  55:./inc/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:./inc/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:./inc/core_cm4.h **** 
  58:./inc/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:./inc/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:./inc/core_cm4.h ****  */
  61:./inc/core_cm4.h **** 
  62:./inc/core_cm4.h **** 
  63:./inc/core_cm4.h **** /*******************************************************************************
  64:./inc/core_cm4.h ****  *                 CMSIS definitions
  65:./inc/core_cm4.h ****  ******************************************************************************/
  66:./inc/core_cm4.h **** /** \ingroup Cortex_M4
  67:./inc/core_cm4.h ****   @{
  68:./inc/core_cm4.h ****  */
  69:./inc/core_cm4.h **** 
  70:./inc/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:./inc/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:./inc/core_cm4.h **** 
  76:./inc/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:./inc/core_cm4.h **** 
  78:./inc/core_cm4.h **** 
  79:./inc/core_cm4.h **** #if   defined ( __CC_ARM )
  80:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:./inc/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:./inc/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:./inc/core_cm4.h **** 
  84:./inc/core_cm4.h **** #elif defined ( __ICCARM__ )
  85:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:./inc/core_cm4.h **** 
  89:./inc/core_cm4.h **** #elif defined ( __TMS470__ )
  90:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  92:./inc/core_cm4.h **** 
  93:./inc/core_cm4.h **** #elif defined ( __GNUC__ )
  94:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:./inc/core_cm4.h **** 
  98:./inc/core_cm4.h **** #elif defined ( __TASKING__ )
  99:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:./inc/core_cm4.h **** 
 103:./inc/core_cm4.h **** #endif
 104:./inc/core_cm4.h **** 
 105:./inc/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not. For this, __FPU_PRESENT has to be checked p
 106:./inc/core_cm4.h **** */
 107:./inc/core_cm4.h **** #if defined ( __CC_ARM )
 108:./inc/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 109:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 110:./inc/core_cm4.h ****       #define __FPU_USED       1
 111:./inc/core_cm4.h ****     #else
 112:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 113:./inc/core_cm4.h ****       #define __FPU_USED       0
 114:./inc/core_cm4.h ****     #endif
 115:./inc/core_cm4.h ****   #else
 116:./inc/core_cm4.h ****     #define __FPU_USED         0
 117:./inc/core_cm4.h ****   #endif
 118:./inc/core_cm4.h **** 
 119:./inc/core_cm4.h **** #elif defined ( __ICCARM__ )
 120:./inc/core_cm4.h ****   #if defined __ARMVFP__
 121:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 122:./inc/core_cm4.h ****       #define __FPU_USED       1
 123:./inc/core_cm4.h ****     #else
 124:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 125:./inc/core_cm4.h ****       #define __FPU_USED       0
 126:./inc/core_cm4.h ****     #endif
 127:./inc/core_cm4.h ****   #else
 128:./inc/core_cm4.h ****     #define __FPU_USED         0
 129:./inc/core_cm4.h ****   #endif
 130:./inc/core_cm4.h **** 
 131:./inc/core_cm4.h **** #elif defined ( __TMS470__ )
 132:./inc/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 133:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 134:./inc/core_cm4.h ****       #define __FPU_USED       1
 135:./inc/core_cm4.h ****     #else
 136:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 137:./inc/core_cm4.h ****       #define __FPU_USED       0
 138:./inc/core_cm4.h ****     #endif
 139:./inc/core_cm4.h ****   #else
 140:./inc/core_cm4.h ****     #define __FPU_USED         0
 141:./inc/core_cm4.h ****   #endif
 142:./inc/core_cm4.h **** 
 143:./inc/core_cm4.h **** #elif defined ( __GNUC__ )
 144:./inc/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 145:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 146:./inc/core_cm4.h ****       #define __FPU_USED       1
 147:./inc/core_cm4.h ****     #else
 148:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 149:./inc/core_cm4.h ****       #define __FPU_USED       0
 150:./inc/core_cm4.h ****     #endif
 151:./inc/core_cm4.h ****   #else
 152:./inc/core_cm4.h ****     #define __FPU_USED         0
 153:./inc/core_cm4.h ****   #endif
 154:./inc/core_cm4.h **** 
 155:./inc/core_cm4.h **** #elif defined ( __TASKING__ )
 156:./inc/core_cm4.h ****   #if defined __FPU_VFP__
 157:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 158:./inc/core_cm4.h ****       #define __FPU_USED       1
 159:./inc/core_cm4.h ****     #else
 160:./inc/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 161:./inc/core_cm4.h ****       #define __FPU_USED       0
 162:./inc/core_cm4.h ****     #endif
 163:./inc/core_cm4.h ****   #else
 164:./inc/core_cm4.h ****     #define __FPU_USED         0
 165:./inc/core_cm4.h ****   #endif
 166:./inc/core_cm4.h **** #endif
 167:./inc/core_cm4.h **** 
 168:./inc/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 169:./inc/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 170:./inc/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 171:./inc/core_cm4.h **** #include <core_cm4_simd.h>               /* Compiler specific SIMD Intrinsics               */
 172:./inc/core_cm4.h **** 
 173:./inc/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 174:./inc/core_cm4.h **** 
 175:./inc/core_cm4.h **** #ifndef __CMSIS_GENERIC
 176:./inc/core_cm4.h **** 
 177:./inc/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 178:./inc/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 179:./inc/core_cm4.h **** 
 180:./inc/core_cm4.h **** /* check device defines and use defaults */
 181:./inc/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:./inc/core_cm4.h ****   #ifndef __CM4_REV
 183:./inc/core_cm4.h ****     #define __CM4_REV               0x0000
 184:./inc/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:./inc/core_cm4.h ****   #endif
 186:./inc/core_cm4.h **** 
 187:./inc/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:./inc/core_cm4.h ****     #define __FPU_PRESENT             0
 189:./inc/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:./inc/core_cm4.h ****   #endif
 191:./inc/core_cm4.h **** 
 192:./inc/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:./inc/core_cm4.h ****     #define __MPU_PRESENT             0
 194:./inc/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:./inc/core_cm4.h ****   #endif
 196:./inc/core_cm4.h **** 
 197:./inc/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:./inc/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 199:./inc/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:./inc/core_cm4.h ****   #endif
 201:./inc/core_cm4.h **** 
 202:./inc/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:./inc/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 204:./inc/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:./inc/core_cm4.h ****   #endif
 206:./inc/core_cm4.h **** #endif
 207:./inc/core_cm4.h **** 
 208:./inc/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:./inc/core_cm4.h **** /**
 210:./inc/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:./inc/core_cm4.h **** 
 212:./inc/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:./inc/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:./inc/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:./inc/core_cm4.h **** */
 216:./inc/core_cm4.h **** #ifdef __cplusplus
 217:./inc/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 218:./inc/core_cm4.h **** #else
 219:./inc/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 220:./inc/core_cm4.h **** #endif
 221:./inc/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 222:./inc/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 223:./inc/core_cm4.h **** 
 224:./inc/core_cm4.h **** /*@} end of group Cortex_M4 */
 225:./inc/core_cm4.h **** 
 226:./inc/core_cm4.h **** 
 227:./inc/core_cm4.h **** 
 228:./inc/core_cm4.h **** /*******************************************************************************
 229:./inc/core_cm4.h ****  *                 Register Abstraction
 230:./inc/core_cm4.h ****   Core Register contain:
 231:./inc/core_cm4.h ****   - Core Register
 232:./inc/core_cm4.h ****   - Core NVIC Register
 233:./inc/core_cm4.h ****   - Core SCB Register
 234:./inc/core_cm4.h ****   - Core SysTick Register
 235:./inc/core_cm4.h ****   - Core Debug Register
 236:./inc/core_cm4.h ****   - Core MPU Register
 237:./inc/core_cm4.h ****   - Core FPU Register
 238:./inc/core_cm4.h ****  ******************************************************************************/
 239:./inc/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 240:./inc/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 241:./inc/core_cm4.h **** */
 242:./inc/core_cm4.h **** 
 243:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
 244:./inc/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 245:./inc/core_cm4.h ****     \brief  Core Register type definitions.
 246:./inc/core_cm4.h ****   @{
 247:./inc/core_cm4.h ****  */
 248:./inc/core_cm4.h **** 
 249:./inc/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 250:./inc/core_cm4.h ****  */
 251:./inc/core_cm4.h **** typedef union
 252:./inc/core_cm4.h **** {
 253:./inc/core_cm4.h ****   struct
 254:./inc/core_cm4.h ****   {
 255:./inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 256:./inc/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 257:./inc/core_cm4.h **** #else
 258:./inc/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 259:./inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 260:./inc/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 261:./inc/core_cm4.h **** #endif
 262:./inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 263:./inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 264:./inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 265:./inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 266:./inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 267:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 268:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 269:./inc/core_cm4.h **** } APSR_Type;
 270:./inc/core_cm4.h **** 
 271:./inc/core_cm4.h **** 
 272:./inc/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 273:./inc/core_cm4.h ****  */
 274:./inc/core_cm4.h **** typedef union
 275:./inc/core_cm4.h **** {
 276:./inc/core_cm4.h ****   struct
 277:./inc/core_cm4.h ****   {
 278:./inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 279:./inc/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 280:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 281:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 282:./inc/core_cm4.h **** } IPSR_Type;
 283:./inc/core_cm4.h **** 
 284:./inc/core_cm4.h **** 
 285:./inc/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 286:./inc/core_cm4.h ****  */
 287:./inc/core_cm4.h **** typedef union
 288:./inc/core_cm4.h **** {
 289:./inc/core_cm4.h ****   struct
 290:./inc/core_cm4.h ****   {
 291:./inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 292:./inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 293:./inc/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 294:./inc/core_cm4.h **** #else
 295:./inc/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 296:./inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 297:./inc/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 298:./inc/core_cm4.h **** #endif
 299:./inc/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 300:./inc/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 301:./inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 302:./inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 303:./inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 304:./inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 305:./inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 306:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 307:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 308:./inc/core_cm4.h **** } xPSR_Type;
 309:./inc/core_cm4.h **** 
 310:./inc/core_cm4.h **** 
 311:./inc/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 312:./inc/core_cm4.h ****  */
 313:./inc/core_cm4.h **** typedef union
 314:./inc/core_cm4.h **** {
 315:./inc/core_cm4.h ****   struct
 316:./inc/core_cm4.h ****   {
 317:./inc/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 318:./inc/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 319:./inc/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 320:./inc/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 321:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 322:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 323:./inc/core_cm4.h **** } CONTROL_Type;
 324:./inc/core_cm4.h **** 
 325:./inc/core_cm4.h **** /*@} end of group CMSIS_CORE */
 326:./inc/core_cm4.h **** 
 327:./inc/core_cm4.h **** 
 328:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
 329:./inc/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 330:./inc/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 331:./inc/core_cm4.h ****   @{
 332:./inc/core_cm4.h ****  */
 333:./inc/core_cm4.h **** 
 334:./inc/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 335:./inc/core_cm4.h ****  */
 336:./inc/core_cm4.h **** typedef struct
 337:./inc/core_cm4.h **** {
 338:./inc/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 339:./inc/core_cm4.h ****        uint32_t RESERVED0[24];
 340:./inc/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 341:./inc/core_cm4.h ****        uint32_t RSERVED1[24];
 342:./inc/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 343:./inc/core_cm4.h ****        uint32_t RESERVED2[24];
 344:./inc/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 345:./inc/core_cm4.h ****        uint32_t RESERVED3[24];
 346:./inc/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 347:./inc/core_cm4.h ****        uint32_t RESERVED4[56];
 348:./inc/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 349:./inc/core_cm4.h ****        uint32_t RESERVED5[644];
 350:./inc/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 351:./inc/core_cm4.h **** }  NVIC_Type;
 352:./inc/core_cm4.h **** 
 353:./inc/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 354:./inc/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 355:./inc/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 356:./inc/core_cm4.h **** 
 357:./inc/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 358:./inc/core_cm4.h **** 
 359:./inc/core_cm4.h **** 
 360:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 361:./inc/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 362:./inc/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 363:./inc/core_cm4.h ****   @{
 364:./inc/core_cm4.h ****  */
 365:./inc/core_cm4.h **** 
 366:./inc/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 367:./inc/core_cm4.h ****  */
 368:./inc/core_cm4.h **** typedef struct
 369:./inc/core_cm4.h **** {
 370:./inc/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 371:./inc/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 372:./inc/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 373:./inc/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 374:./inc/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 375:./inc/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 376:./inc/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 377:./inc/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 378:./inc/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 379:./inc/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 380:./inc/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 381:./inc/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 382:./inc/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 383:./inc/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 384:./inc/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 385:./inc/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 386:./inc/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 387:./inc/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 388:./inc/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 389:./inc/core_cm4.h ****        uint32_t RESERVED0[5];
 390:./inc/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 391:./inc/core_cm4.h **** } SCB_Type;
 392:./inc/core_cm4.h **** 
 393:./inc/core_cm4.h **** /* SCB CPUID Register Definitions */
 394:./inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 395:./inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 396:./inc/core_cm4.h **** 
 397:./inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 398:./inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 399:./inc/core_cm4.h **** 
 400:./inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 401:./inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 402:./inc/core_cm4.h **** 
 403:./inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 404:./inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 405:./inc/core_cm4.h **** 
 406:./inc/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 407:./inc/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 408:./inc/core_cm4.h **** 
 409:./inc/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 410:./inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 411:./inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 412:./inc/core_cm4.h **** 
 413:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 414:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 415:./inc/core_cm4.h **** 
 416:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 417:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 418:./inc/core_cm4.h **** 
 419:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 420:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 421:./inc/core_cm4.h **** 
 422:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 423:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 424:./inc/core_cm4.h **** 
 425:./inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 426:./inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 427:./inc/core_cm4.h **** 
 428:./inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 429:./inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 430:./inc/core_cm4.h **** 
 431:./inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 432:./inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 433:./inc/core_cm4.h **** 
 434:./inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 435:./inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 436:./inc/core_cm4.h **** 
 437:./inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 438:./inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 439:./inc/core_cm4.h **** 
 440:./inc/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 441:./inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 442:./inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 443:./inc/core_cm4.h **** 
 444:./inc/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 445:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 446:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 447:./inc/core_cm4.h **** 
 448:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 449:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 450:./inc/core_cm4.h **** 
 451:./inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 452:./inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 453:./inc/core_cm4.h **** 
 454:./inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 455:./inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 456:./inc/core_cm4.h **** 
 457:./inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 458:./inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 459:./inc/core_cm4.h **** 
 460:./inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 461:./inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 462:./inc/core_cm4.h **** 
 463:./inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 464:./inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 465:./inc/core_cm4.h **** 
 466:./inc/core_cm4.h **** /* SCB System Control Register Definitions */
 467:./inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 468:./inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 469:./inc/core_cm4.h **** 
 470:./inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 471:./inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 472:./inc/core_cm4.h **** 
 473:./inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 474:./inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 475:./inc/core_cm4.h **** 
 476:./inc/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 477:./inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 478:./inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 479:./inc/core_cm4.h **** 
 480:./inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 481:./inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 482:./inc/core_cm4.h **** 
 483:./inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 484:./inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 485:./inc/core_cm4.h **** 
 486:./inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 487:./inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 488:./inc/core_cm4.h **** 
 489:./inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 490:./inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 491:./inc/core_cm4.h **** 
 492:./inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 493:./inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 494:./inc/core_cm4.h **** 
 495:./inc/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 496:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 497:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 498:./inc/core_cm4.h **** 
 499:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 500:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 501:./inc/core_cm4.h **** 
 502:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 503:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 504:./inc/core_cm4.h **** 
 505:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 506:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 507:./inc/core_cm4.h **** 
 508:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 509:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 510:./inc/core_cm4.h **** 
 511:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 512:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 513:./inc/core_cm4.h **** 
 514:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 515:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 516:./inc/core_cm4.h **** 
 517:./inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 518:./inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 519:./inc/core_cm4.h **** 
 520:./inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 521:./inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 522:./inc/core_cm4.h **** 
 523:./inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 524:./inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 525:./inc/core_cm4.h **** 
 526:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 527:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 528:./inc/core_cm4.h **** 
 529:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 530:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 531:./inc/core_cm4.h **** 
 532:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 533:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 534:./inc/core_cm4.h **** 
 535:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 536:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 537:./inc/core_cm4.h **** 
 538:./inc/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 539:./inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 540:./inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 541:./inc/core_cm4.h **** 
 542:./inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 543:./inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 544:./inc/core_cm4.h **** 
 545:./inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 546:./inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 547:./inc/core_cm4.h **** 
 548:./inc/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 549:./inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 550:./inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 551:./inc/core_cm4.h **** 
 552:./inc/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 553:./inc/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 554:./inc/core_cm4.h **** 
 555:./inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 556:./inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 557:./inc/core_cm4.h **** 
 558:./inc/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 559:./inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 560:./inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 561:./inc/core_cm4.h **** 
 562:./inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 563:./inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 564:./inc/core_cm4.h **** 
 565:./inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 566:./inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 567:./inc/core_cm4.h **** 
 568:./inc/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 569:./inc/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 570:./inc/core_cm4.h **** 
 571:./inc/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 572:./inc/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 573:./inc/core_cm4.h **** 
 574:./inc/core_cm4.h **** /*@} end of group CMSIS_SCB */
 575:./inc/core_cm4.h **** 
 576:./inc/core_cm4.h **** 
 577:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 578:./inc/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 579:./inc/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 580:./inc/core_cm4.h ****   @{
 581:./inc/core_cm4.h ****  */
 582:./inc/core_cm4.h **** 
 583:./inc/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 584:./inc/core_cm4.h ****  */
 585:./inc/core_cm4.h **** typedef struct
 586:./inc/core_cm4.h **** {
 587:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
 588:./inc/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 589:./inc/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 590:./inc/core_cm4.h **** } SCnSCB_Type;
 591:./inc/core_cm4.h **** 
 592:./inc/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 593:./inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 594:./inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 595:./inc/core_cm4.h **** 
 596:./inc/core_cm4.h **** /* Auxiliary Control Register Definitions */
 597:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 598:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 599:./inc/core_cm4.h **** 
 600:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 601:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 602:./inc/core_cm4.h **** 
 603:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 604:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 605:./inc/core_cm4.h **** 
 606:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 607:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 608:./inc/core_cm4.h **** 
 609:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 610:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 611:./inc/core_cm4.h **** 
 612:./inc/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 613:./inc/core_cm4.h **** 
 614:./inc/core_cm4.h **** 
 615:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 616:./inc/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 617:./inc/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 618:./inc/core_cm4.h ****   @{
 619:./inc/core_cm4.h ****  */
 620:./inc/core_cm4.h **** 
 621:./inc/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 622:./inc/core_cm4.h ****  */
 623:./inc/core_cm4.h **** typedef struct
 624:./inc/core_cm4.h **** {
 625:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 626:./inc/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 627:./inc/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 628:./inc/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 629:./inc/core_cm4.h **** } SysTick_Type;
 630:./inc/core_cm4.h **** 
 631:./inc/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 632:./inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 633:./inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 634:./inc/core_cm4.h **** 
 635:./inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 636:./inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 637:./inc/core_cm4.h **** 
 638:./inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 639:./inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 640:./inc/core_cm4.h **** 
 641:./inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 642:./inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 643:./inc/core_cm4.h **** 
 644:./inc/core_cm4.h **** /* SysTick Reload Register Definitions */
 645:./inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 646:./inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 647:./inc/core_cm4.h **** 
 648:./inc/core_cm4.h **** /* SysTick Current Register Definitions */
 649:./inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 650:./inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 651:./inc/core_cm4.h **** 
 652:./inc/core_cm4.h **** /* SysTick Calibration Register Definitions */
 653:./inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 654:./inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 655:./inc/core_cm4.h **** 
 656:./inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 657:./inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 658:./inc/core_cm4.h **** 
 659:./inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 660:./inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 661:./inc/core_cm4.h **** 
 662:./inc/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 663:./inc/core_cm4.h **** 
 664:./inc/core_cm4.h **** 
 665:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 666:./inc/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 667:./inc/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 668:./inc/core_cm4.h ****   @{
 669:./inc/core_cm4.h ****  */
 670:./inc/core_cm4.h **** 
 671:./inc/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 672:./inc/core_cm4.h ****  */
 673:./inc/core_cm4.h **** typedef struct
 674:./inc/core_cm4.h **** {
 675:./inc/core_cm4.h ****   __O  union
 676:./inc/core_cm4.h ****   {
 677:./inc/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 678:./inc/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 679:./inc/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 680:./inc/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 681:./inc/core_cm4.h ****        uint32_t RESERVED0[864];
 682:./inc/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 683:./inc/core_cm4.h ****        uint32_t RESERVED1[15];
 684:./inc/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 685:./inc/core_cm4.h ****        uint32_t RESERVED2[15];
 686:./inc/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 687:./inc/core_cm4.h ****        uint32_t RESERVED3[29];
 688:./inc/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 689:./inc/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 690:./inc/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 691:./inc/core_cm4.h ****        uint32_t RESERVED4[43];
 692:./inc/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 693:./inc/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 694:./inc/core_cm4.h ****        uint32_t RESERVED5[6];
 695:./inc/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 696:./inc/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 697:./inc/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 698:./inc/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 699:./inc/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 700:./inc/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 701:./inc/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 702:./inc/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 703:./inc/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 704:./inc/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 705:./inc/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 706:./inc/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 707:./inc/core_cm4.h **** } ITM_Type;
 708:./inc/core_cm4.h **** 
 709:./inc/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 710:./inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 711:./inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 712:./inc/core_cm4.h **** 
 713:./inc/core_cm4.h **** /* ITM Trace Control Register Definitions */
 714:./inc/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 715:./inc/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 716:./inc/core_cm4.h **** 
 717:./inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 718:./inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 719:./inc/core_cm4.h **** 
 720:./inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 721:./inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 722:./inc/core_cm4.h **** 
 723:./inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 724:./inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 725:./inc/core_cm4.h **** 
 726:./inc/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 727:./inc/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 728:./inc/core_cm4.h **** 
 729:./inc/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 730:./inc/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 731:./inc/core_cm4.h **** 
 732:./inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 733:./inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 734:./inc/core_cm4.h **** 
 735:./inc/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 736:./inc/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 737:./inc/core_cm4.h **** 
 738:./inc/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 739:./inc/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 740:./inc/core_cm4.h **** 
 741:./inc/core_cm4.h **** /* ITM Integration Write Register Definitions */
 742:./inc/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 743:./inc/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 744:./inc/core_cm4.h **** 
 745:./inc/core_cm4.h **** /* ITM Integration Read Register Definitions */
 746:./inc/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 747:./inc/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 748:./inc/core_cm4.h **** 
 749:./inc/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 750:./inc/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 751:./inc/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 752:./inc/core_cm4.h **** 
 753:./inc/core_cm4.h **** /* ITM Lock Status Register Definitions */
 754:./inc/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 755:./inc/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 756:./inc/core_cm4.h **** 
 757:./inc/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 758:./inc/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 759:./inc/core_cm4.h **** 
 760:./inc/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 761:./inc/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 762:./inc/core_cm4.h **** 
 763:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 764:./inc/core_cm4.h **** 
 765:./inc/core_cm4.h **** 
 766:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 767:./inc/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 768:./inc/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 769:./inc/core_cm4.h ****   @{
 770:./inc/core_cm4.h ****  */
 771:./inc/core_cm4.h **** 
 772:./inc/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 773:./inc/core_cm4.h ****  */
 774:./inc/core_cm4.h **** typedef struct
 775:./inc/core_cm4.h **** {
 776:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 777:./inc/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 778:./inc/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 779:./inc/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 780:./inc/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 781:./inc/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 782:./inc/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 783:./inc/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 784:./inc/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 785:./inc/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 786:./inc/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 787:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
 788:./inc/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 789:./inc/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 790:./inc/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 791:./inc/core_cm4.h ****        uint32_t RESERVED1[1];
 792:./inc/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 793:./inc/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 794:./inc/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 795:./inc/core_cm4.h ****        uint32_t RESERVED2[1];
 796:./inc/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 797:./inc/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 798:./inc/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 799:./inc/core_cm4.h **** } DWT_Type;
 800:./inc/core_cm4.h **** 
 801:./inc/core_cm4.h **** /* DWT Control Register Definitions */
 802:./inc/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 803:./inc/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 804:./inc/core_cm4.h **** 
 805:./inc/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 806:./inc/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 807:./inc/core_cm4.h **** 
 808:./inc/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 809:./inc/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 810:./inc/core_cm4.h **** 
 811:./inc/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 812:./inc/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 813:./inc/core_cm4.h **** 
 814:./inc/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 815:./inc/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 816:./inc/core_cm4.h **** 
 817:./inc/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 818:./inc/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 819:./inc/core_cm4.h **** 
 820:./inc/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 821:./inc/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 822:./inc/core_cm4.h **** 
 823:./inc/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 824:./inc/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 825:./inc/core_cm4.h **** 
 826:./inc/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 827:./inc/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 828:./inc/core_cm4.h **** 
 829:./inc/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 830:./inc/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 831:./inc/core_cm4.h **** 
 832:./inc/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 833:./inc/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 834:./inc/core_cm4.h **** 
 835:./inc/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 836:./inc/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 837:./inc/core_cm4.h **** 
 838:./inc/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 839:./inc/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 840:./inc/core_cm4.h **** 
 841:./inc/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 842:./inc/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 843:./inc/core_cm4.h **** 
 844:./inc/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 845:./inc/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 846:./inc/core_cm4.h **** 
 847:./inc/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 848:./inc/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 849:./inc/core_cm4.h **** 
 850:./inc/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 851:./inc/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 852:./inc/core_cm4.h **** 
 853:./inc/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 854:./inc/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 855:./inc/core_cm4.h **** 
 856:./inc/core_cm4.h **** /* DWT CPI Count Register Definitions */
 857:./inc/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 858:./inc/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 859:./inc/core_cm4.h **** 
 860:./inc/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 861:./inc/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 862:./inc/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 863:./inc/core_cm4.h **** 
 864:./inc/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 865:./inc/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 866:./inc/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 867:./inc/core_cm4.h **** 
 868:./inc/core_cm4.h **** /* DWT LSU Count Register Definitions */
 869:./inc/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 870:./inc/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 871:./inc/core_cm4.h **** 
 872:./inc/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 873:./inc/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 874:./inc/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 875:./inc/core_cm4.h **** 
 876:./inc/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 877:./inc/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 878:./inc/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 879:./inc/core_cm4.h **** 
 880:./inc/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 881:./inc/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 882:./inc/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 883:./inc/core_cm4.h **** 
 884:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 885:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 886:./inc/core_cm4.h **** 
 887:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 888:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 889:./inc/core_cm4.h **** 
 890:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 891:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 892:./inc/core_cm4.h **** 
 893:./inc/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 894:./inc/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 895:./inc/core_cm4.h **** 
 896:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 897:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 898:./inc/core_cm4.h **** 
 899:./inc/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 900:./inc/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 901:./inc/core_cm4.h **** 
 902:./inc/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 903:./inc/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 904:./inc/core_cm4.h **** 
 905:./inc/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 906:./inc/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 907:./inc/core_cm4.h **** 
 908:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 909:./inc/core_cm4.h **** 
 910:./inc/core_cm4.h **** 
 911:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 912:./inc/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 913:./inc/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 914:./inc/core_cm4.h ****   @{
 915:./inc/core_cm4.h ****  */
 916:./inc/core_cm4.h **** 
 917:./inc/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 918:./inc/core_cm4.h ****  */
 919:./inc/core_cm4.h **** typedef struct
 920:./inc/core_cm4.h **** {
 921:./inc/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 922:./inc/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 923:./inc/core_cm4.h ****        uint32_t RESERVED0[2];
 924:./inc/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 925:./inc/core_cm4.h ****        uint32_t RESERVED1[55];
 926:./inc/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 927:./inc/core_cm4.h ****        uint32_t RESERVED2[131];
 928:./inc/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 929:./inc/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 930:./inc/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 931:./inc/core_cm4.h ****        uint32_t RESERVED3[759];
 932:./inc/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 933:./inc/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 934:./inc/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 935:./inc/core_cm4.h ****        uint32_t RESERVED4[1];
 936:./inc/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 937:./inc/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 938:./inc/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 939:./inc/core_cm4.h ****        uint32_t RESERVED5[39];
 940:./inc/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 941:./inc/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 942:./inc/core_cm4.h ****        uint32_t RESERVED7[8];
 943:./inc/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 944:./inc/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 945:./inc/core_cm4.h **** } TPI_Type;
 946:./inc/core_cm4.h **** 
 947:./inc/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 948:./inc/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 949:./inc/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 950:./inc/core_cm4.h **** 
 951:./inc/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
 952:./inc/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 953:./inc/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 954:./inc/core_cm4.h **** 
 955:./inc/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
 956:./inc/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 957:./inc/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 958:./inc/core_cm4.h **** 
 959:./inc/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 960:./inc/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 961:./inc/core_cm4.h **** 
 962:./inc/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 963:./inc/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 964:./inc/core_cm4.h **** 
 965:./inc/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 966:./inc/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 967:./inc/core_cm4.h **** 
 968:./inc/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
 969:./inc/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 970:./inc/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 971:./inc/core_cm4.h **** 
 972:./inc/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 973:./inc/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 974:./inc/core_cm4.h **** 
 975:./inc/core_cm4.h **** /* TPI TRIGGER Register Definitions */
 976:./inc/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 977:./inc/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 978:./inc/core_cm4.h **** 
 979:./inc/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 980:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 981:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 982:./inc/core_cm4.h **** 
 983:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 984:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 985:./inc/core_cm4.h **** 
 986:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 987:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 988:./inc/core_cm4.h **** 
 989:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 990:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 991:./inc/core_cm4.h **** 
 992:./inc/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 993:./inc/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 994:./inc/core_cm4.h **** 
 995:./inc/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 996:./inc/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 997:./inc/core_cm4.h **** 
 998:./inc/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 999:./inc/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
1000:./inc/core_cm4.h **** 
1001:./inc/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1002:./inc/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1003:./inc/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
1004:./inc/core_cm4.h **** 
1005:./inc/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1006:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1007:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1008:./inc/core_cm4.h **** 
1009:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1010:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1011:./inc/core_cm4.h **** 
1012:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1013:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1014:./inc/core_cm4.h **** 
1015:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1016:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1017:./inc/core_cm4.h **** 
1018:./inc/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1019:./inc/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1020:./inc/core_cm4.h **** 
1021:./inc/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1022:./inc/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1023:./inc/core_cm4.h **** 
1024:./inc/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1025:./inc/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
1026:./inc/core_cm4.h **** 
1027:./inc/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1028:./inc/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1029:./inc/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
1030:./inc/core_cm4.h **** 
1031:./inc/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1032:./inc/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1033:./inc/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1034:./inc/core_cm4.h **** 
1035:./inc/core_cm4.h **** /* TPI DEVID Register Definitions */
1036:./inc/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1037:./inc/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1038:./inc/core_cm4.h **** 
1039:./inc/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1040:./inc/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1041:./inc/core_cm4.h **** 
1042:./inc/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1043:./inc/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1044:./inc/core_cm4.h **** 
1045:./inc/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1046:./inc/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1047:./inc/core_cm4.h **** 
1048:./inc/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1049:./inc/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1050:./inc/core_cm4.h **** 
1051:./inc/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1052:./inc/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1053:./inc/core_cm4.h **** 
1054:./inc/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1055:./inc/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1056:./inc/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1057:./inc/core_cm4.h **** 
1058:./inc/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1059:./inc/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1060:./inc/core_cm4.h **** 
1061:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1062:./inc/core_cm4.h **** 
1063:./inc/core_cm4.h **** 
1064:./inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
1065:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1066:./inc/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1067:./inc/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1068:./inc/core_cm4.h ****   @{
1069:./inc/core_cm4.h ****  */
1070:./inc/core_cm4.h **** 
1071:./inc/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1072:./inc/core_cm4.h ****  */
1073:./inc/core_cm4.h **** typedef struct
1074:./inc/core_cm4.h **** {
1075:./inc/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1076:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1077:./inc/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1078:./inc/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1079:./inc/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1080:./inc/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1081:./inc/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1082:./inc/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1083:./inc/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1084:./inc/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1085:./inc/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1086:./inc/core_cm4.h **** } MPU_Type;
1087:./inc/core_cm4.h **** 
1088:./inc/core_cm4.h **** /* MPU Type Register */
1089:./inc/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1090:./inc/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1091:./inc/core_cm4.h **** 
1092:./inc/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1093:./inc/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1094:./inc/core_cm4.h **** 
1095:./inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1096:./inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1097:./inc/core_cm4.h **** 
1098:./inc/core_cm4.h **** /* MPU Control Register */
1099:./inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1100:./inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1101:./inc/core_cm4.h **** 
1102:./inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1103:./inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1104:./inc/core_cm4.h **** 
1105:./inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1106:./inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1107:./inc/core_cm4.h **** 
1108:./inc/core_cm4.h **** /* MPU Region Number Register */
1109:./inc/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1110:./inc/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1111:./inc/core_cm4.h **** 
1112:./inc/core_cm4.h **** /* MPU Region Base Address Register */
1113:./inc/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1114:./inc/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1115:./inc/core_cm4.h **** 
1116:./inc/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1117:./inc/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1118:./inc/core_cm4.h **** 
1119:./inc/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1120:./inc/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1121:./inc/core_cm4.h **** 
1122:./inc/core_cm4.h **** /* MPU Region Attribute and Size Register */
1123:./inc/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1124:./inc/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1125:./inc/core_cm4.h **** 
1126:./inc/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1127:./inc/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1128:./inc/core_cm4.h **** 
1129:./inc/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1130:./inc/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1131:./inc/core_cm4.h **** 
1132:./inc/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1133:./inc/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1134:./inc/core_cm4.h **** 
1135:./inc/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1136:./inc/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1137:./inc/core_cm4.h **** 
1138:./inc/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1139:./inc/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1140:./inc/core_cm4.h **** 
1141:./inc/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1142:./inc/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1143:./inc/core_cm4.h **** 
1144:./inc/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1145:./inc/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1146:./inc/core_cm4.h **** 
1147:./inc/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1148:./inc/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1149:./inc/core_cm4.h **** 
1150:./inc/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1151:./inc/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1152:./inc/core_cm4.h **** 
1153:./inc/core_cm4.h **** /*@} end of group CMSIS_MPU */
1154:./inc/core_cm4.h **** #endif
1155:./inc/core_cm4.h **** 
1156:./inc/core_cm4.h **** 
1157:./inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
1158:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1159:./inc/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1160:./inc/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1161:./inc/core_cm4.h ****   @{
1162:./inc/core_cm4.h ****  */
1163:./inc/core_cm4.h **** 
1164:./inc/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1165:./inc/core_cm4.h ****  */
1166:./inc/core_cm4.h **** typedef struct
1167:./inc/core_cm4.h **** {
1168:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
1169:./inc/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1170:./inc/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1171:./inc/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1172:./inc/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1173:./inc/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1174:./inc/core_cm4.h **** } FPU_Type;
1175:./inc/core_cm4.h **** 
1176:./inc/core_cm4.h **** /* Floating-Point Context Control Register */
1177:./inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1178:./inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1179:./inc/core_cm4.h **** 
1180:./inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1181:./inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1182:./inc/core_cm4.h **** 
1183:./inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1184:./inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1185:./inc/core_cm4.h **** 
1186:./inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
1187:./inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1188:./inc/core_cm4.h **** 
1189:./inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1190:./inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1191:./inc/core_cm4.h **** 
1192:./inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1193:./inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1194:./inc/core_cm4.h **** 
1195:./inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1196:./inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1197:./inc/core_cm4.h **** 
1198:./inc/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1199:./inc/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1200:./inc/core_cm4.h **** 
1201:./inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1202:./inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
1203:./inc/core_cm4.h **** 
1204:./inc/core_cm4.h **** /* Floating-Point Context Address Register */
1205:./inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1206:./inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1207:./inc/core_cm4.h **** 
1208:./inc/core_cm4.h **** /* Floating-Point Default Status Control Register */
1209:./inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1210:./inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1211:./inc/core_cm4.h **** 
1212:./inc/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1213:./inc/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1214:./inc/core_cm4.h **** 
1215:./inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1216:./inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1217:./inc/core_cm4.h **** 
1218:./inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1219:./inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1220:./inc/core_cm4.h **** 
1221:./inc/core_cm4.h **** /* Media and FP Feature Register 0 */
1222:./inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1223:./inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1224:./inc/core_cm4.h **** 
1225:./inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1226:./inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1227:./inc/core_cm4.h **** 
1228:./inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1229:./inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1230:./inc/core_cm4.h **** 
1231:./inc/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1232:./inc/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1233:./inc/core_cm4.h **** 
1234:./inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1235:./inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1236:./inc/core_cm4.h **** 
1237:./inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1238:./inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1239:./inc/core_cm4.h **** 
1240:./inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1241:./inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1242:./inc/core_cm4.h **** 
1243:./inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
1244:./inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
1245:./inc/core_cm4.h **** 
1246:./inc/core_cm4.h **** /* Media and FP Feature Register 1 */
1247:./inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1248:./inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1249:./inc/core_cm4.h **** 
1250:./inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1251:./inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1252:./inc/core_cm4.h **** 
1253:./inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
1254:./inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1255:./inc/core_cm4.h **** 
1256:./inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1257:./inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
1258:./inc/core_cm4.h **** 
1259:./inc/core_cm4.h **** /*@} end of group CMSIS_FPU */
1260:./inc/core_cm4.h **** #endif
1261:./inc/core_cm4.h **** 
1262:./inc/core_cm4.h **** 
1263:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1264:./inc/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1265:./inc/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
1266:./inc/core_cm4.h ****   @{
1267:./inc/core_cm4.h ****  */
1268:./inc/core_cm4.h **** 
1269:./inc/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1270:./inc/core_cm4.h ****  */
1271:./inc/core_cm4.h **** typedef struct
1272:./inc/core_cm4.h **** {
1273:./inc/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1274:./inc/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1275:./inc/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1276:./inc/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1277:./inc/core_cm4.h **** } CoreDebug_Type;
1278:./inc/core_cm4.h **** 
1279:./inc/core_cm4.h **** /* Debug Halting Control and Status Register */
1280:./inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1281:./inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1282:./inc/core_cm4.h **** 
1283:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1284:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1285:./inc/core_cm4.h **** 
1286:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1287:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1288:./inc/core_cm4.h **** 
1289:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1290:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1291:./inc/core_cm4.h **** 
1292:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1293:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1294:./inc/core_cm4.h **** 
1295:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1296:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1297:./inc/core_cm4.h **** 
1298:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1299:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1300:./inc/core_cm4.h **** 
1301:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1302:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1303:./inc/core_cm4.h **** 
1304:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1305:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1306:./inc/core_cm4.h **** 
1307:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1308:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1309:./inc/core_cm4.h **** 
1310:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1311:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1312:./inc/core_cm4.h **** 
1313:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1314:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1315:./inc/core_cm4.h **** 
1316:./inc/core_cm4.h **** /* Debug Core Register Selector Register */
1317:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1318:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1319:./inc/core_cm4.h **** 
1320:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1321:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1322:./inc/core_cm4.h **** 
1323:./inc/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1324:./inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1325:./inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1326:./inc/core_cm4.h **** 
1327:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1328:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1329:./inc/core_cm4.h **** 
1330:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1331:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1332:./inc/core_cm4.h **** 
1333:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1334:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1335:./inc/core_cm4.h **** 
1336:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1337:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1338:./inc/core_cm4.h **** 
1339:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1340:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1341:./inc/core_cm4.h **** 
1342:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1343:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1344:./inc/core_cm4.h **** 
1345:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1346:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1347:./inc/core_cm4.h **** 
1348:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1349:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1350:./inc/core_cm4.h **** 
1351:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1352:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1353:./inc/core_cm4.h **** 
1354:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1355:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1356:./inc/core_cm4.h **** 
1357:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1358:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1359:./inc/core_cm4.h **** 
1360:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1361:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1362:./inc/core_cm4.h **** 
1363:./inc/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1364:./inc/core_cm4.h **** 
1365:./inc/core_cm4.h **** 
1366:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
1367:./inc/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
1368:./inc/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1369:./inc/core_cm4.h ****   @{
1370:./inc/core_cm4.h ****  */
1371:./inc/core_cm4.h **** 
1372:./inc/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1373:./inc/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1374:./inc/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1375:./inc/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1376:./inc/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1377:./inc/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1378:./inc/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1379:./inc/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1380:./inc/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1381:./inc/core_cm4.h **** 
1382:./inc/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1383:./inc/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1384:./inc/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1385:./inc/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1386:./inc/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1387:./inc/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1388:./inc/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1389:./inc/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1390:./inc/core_cm4.h **** 
1391:./inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
1392:./inc/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1393:./inc/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1394:./inc/core_cm4.h **** #endif
1395:./inc/core_cm4.h **** 
1396:./inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
1397:./inc/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1398:./inc/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1399:./inc/core_cm4.h **** #endif
1400:./inc/core_cm4.h **** 
1401:./inc/core_cm4.h **** /*@} */
1402:./inc/core_cm4.h **** 
1403:./inc/core_cm4.h **** 
1404:./inc/core_cm4.h **** 
1405:./inc/core_cm4.h **** /*******************************************************************************
1406:./inc/core_cm4.h ****  *                Hardware Abstraction Layer
1407:./inc/core_cm4.h ****   Core Function Interface contains:
1408:./inc/core_cm4.h ****   - Core NVIC Functions
1409:./inc/core_cm4.h ****   - Core SysTick Functions
1410:./inc/core_cm4.h ****   - Core Debug Functions
1411:./inc/core_cm4.h ****   - Core Register Access Functions
1412:./inc/core_cm4.h ****  ******************************************************************************/
1413:./inc/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1414:./inc/core_cm4.h **** */
1415:./inc/core_cm4.h **** 
1416:./inc/core_cm4.h **** 
1417:./inc/core_cm4.h **** 
1418:./inc/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1419:./inc/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1420:./inc/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1421:./inc/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1422:./inc/core_cm4.h ****     @{
1423:./inc/core_cm4.h ****  */
1424:./inc/core_cm4.h **** 
1425:./inc/core_cm4.h **** /** \brief  Set Priority Grouping
1426:./inc/core_cm4.h **** 
1427:./inc/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1428:./inc/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1429:./inc/core_cm4.h ****   Only values from 0..7 are used.
1430:./inc/core_cm4.h ****   In case of a conflict between priority grouping and available
1431:./inc/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1432:./inc/core_cm4.h **** 
1433:./inc/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1434:./inc/core_cm4.h ****  */
1435:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1436:./inc/core_cm4.h **** {
1437:./inc/core_cm4.h ****   uint32_t reg_value;
1438:./inc/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1439:./inc/core_cm4.h **** 
1440:./inc/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1441:./inc/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1442:./inc/core_cm4.h ****   reg_value  =  (reg_value                                 |
1443:./inc/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1444:./inc/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1445:./inc/core_cm4.h ****   SCB->AIRCR =  reg_value;
1446:./inc/core_cm4.h **** }
1447:./inc/core_cm4.h **** 
1448:./inc/core_cm4.h **** 
1449:./inc/core_cm4.h **** /** \brief  Get Priority Grouping
1450:./inc/core_cm4.h **** 
1451:./inc/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1452:./inc/core_cm4.h **** 
1453:./inc/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1454:./inc/core_cm4.h ****  */
1455:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1456:./inc/core_cm4.h **** {
1457:./inc/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1458:./inc/core_cm4.h **** }
1459:./inc/core_cm4.h **** 
1460:./inc/core_cm4.h **** 
1461:./inc/core_cm4.h **** /** \brief  Enable External Interrupt
1462:./inc/core_cm4.h **** 
1463:./inc/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1464:./inc/core_cm4.h **** 
1465:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1466:./inc/core_cm4.h ****  */
1467:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1468:./inc/core_cm4.h **** {
  25              		.loc 1 1468 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 0346     		mov	r3, r0
  41 0008 FB71     		strb	r3, [r7, #7]
1469:./inc/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1470:./inc/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
  42              		.loc 1 1470 0
  43 000a 4FF46143 		mov	r3, #57600
  44 000e CEF20003 		movt	r3, 57344
  45 0012 97F90720 		ldrsb	r2, [r7, #7]
  46 0016 4FEA5212 		lsr	r2, r2, #5
  47 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  48 001c 01F01F01 		and	r1, r1, #31
  49 0020 4FF00100 		mov	r0, #1
  50 0024 00FA01F1 		lsl	r1, r0, r1
  51 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1471:./inc/core_cm4.h **** }
  52              		.loc 1 1471 0
  53 002c 07F10C07 		add	r7, r7, #12
  54 0030 BD46     		mov	sp, r7
  55 0032 80BC     		pop	{r7}
  56 0034 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE97:
  60 0036 00BF     		.align	2
  61              		.thumb
  62              		.thumb_func
  64              	NVIC_DisableIRQ:
  65              	.LFB98:
1472:./inc/core_cm4.h **** 
1473:./inc/core_cm4.h **** 
1474:./inc/core_cm4.h **** /** \brief  Disable External Interrupt
1475:./inc/core_cm4.h **** 
1476:./inc/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1477:./inc/core_cm4.h **** 
1478:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1479:./inc/core_cm4.h ****  */
1480:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1481:./inc/core_cm4.h **** {
  66              		.loc 1 1481 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71 0038 80B4     		push	{r7}
  72              	.LCFI3:
  73              		.cfi_def_cfa_offset 4
  74              		.cfi_offset 7, -4
  75 003a 83B0     		sub	sp, sp, #12
  76              	.LCFI4:
  77              		.cfi_def_cfa_offset 16
  78 003c 00AF     		add	r7, sp, #0
  79              	.LCFI5:
  80              		.cfi_def_cfa_register 7
  81 003e 0346     		mov	r3, r0
  82 0040 FB71     		strb	r3, [r7, #7]
1482:./inc/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  83              		.loc 1 1482 0
  84 0042 4FF46143 		mov	r3, #57600
  85 0046 CEF20003 		movt	r3, 57344
  86 004a 97F90720 		ldrsb	r2, [r7, #7]
  87 004e 4FEA5212 		lsr	r2, r2, #5
  88 0052 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  89 0054 01F01F01 		and	r1, r1, #31
  90 0058 4FF00100 		mov	r0, #1
  91 005c 00FA01F1 		lsl	r1, r0, r1
  92 0060 02F12002 		add	r2, r2, #32
  93 0064 43F82210 		str	r1, [r3, r2, lsl #2]
1483:./inc/core_cm4.h **** }
  94              		.loc 1 1483 0
  95 0068 07F10C07 		add	r7, r7, #12
  96 006c BD46     		mov	sp, r7
  97 006e 80BC     		pop	{r7}
  98 0070 7047     		bx	lr
  99              		.cfi_endproc
 100              	.LFE98:
 102 0072 00BF     		.align	2
 103              		.thumb
 104              		.thumb_func
 106              	NVIC_SetPriority:
 107              	.LFB103:
1484:./inc/core_cm4.h **** 
1485:./inc/core_cm4.h **** 
1486:./inc/core_cm4.h **** /** \brief  Get Pending Interrupt
1487:./inc/core_cm4.h **** 
1488:./inc/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1489:./inc/core_cm4.h ****     for the specified interrupt.
1490:./inc/core_cm4.h **** 
1491:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1492:./inc/core_cm4.h **** 
1493:./inc/core_cm4.h ****     \return             0  Interrupt status is not pending.
1494:./inc/core_cm4.h ****     \return             1  Interrupt status is pending.
1495:./inc/core_cm4.h ****  */
1496:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1497:./inc/core_cm4.h **** {
1498:./inc/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1499:./inc/core_cm4.h **** }
1500:./inc/core_cm4.h **** 
1501:./inc/core_cm4.h **** 
1502:./inc/core_cm4.h **** /** \brief  Set Pending Interrupt
1503:./inc/core_cm4.h **** 
1504:./inc/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1505:./inc/core_cm4.h **** 
1506:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1507:./inc/core_cm4.h ****  */
1508:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1509:./inc/core_cm4.h **** {
1510:./inc/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1511:./inc/core_cm4.h **** }
1512:./inc/core_cm4.h **** 
1513:./inc/core_cm4.h **** 
1514:./inc/core_cm4.h **** /** \brief  Clear Pending Interrupt
1515:./inc/core_cm4.h **** 
1516:./inc/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1517:./inc/core_cm4.h **** 
1518:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1519:./inc/core_cm4.h ****  */
1520:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1521:./inc/core_cm4.h **** {
1522:./inc/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1523:./inc/core_cm4.h **** }
1524:./inc/core_cm4.h **** 
1525:./inc/core_cm4.h **** 
1526:./inc/core_cm4.h **** /** \brief  Get Active Interrupt
1527:./inc/core_cm4.h **** 
1528:./inc/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1529:./inc/core_cm4.h **** 
1530:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1531:./inc/core_cm4.h **** 
1532:./inc/core_cm4.h ****     \return             0  Interrupt status is not active.
1533:./inc/core_cm4.h ****     \return             1  Interrupt status is active.
1534:./inc/core_cm4.h ****  */
1535:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1536:./inc/core_cm4.h **** {
1537:./inc/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1538:./inc/core_cm4.h **** }
1539:./inc/core_cm4.h **** 
1540:./inc/core_cm4.h **** 
1541:./inc/core_cm4.h **** /** \brief  Set Interrupt Priority
1542:./inc/core_cm4.h **** 
1543:./inc/core_cm4.h ****     The function sets the priority of an interrupt.
1544:./inc/core_cm4.h **** 
1545:./inc/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1546:./inc/core_cm4.h **** 
1547:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1548:./inc/core_cm4.h ****     \param [in]  priority  Priority to set.
1549:./inc/core_cm4.h ****  */
1550:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1551:./inc/core_cm4.h **** {
 108              		.loc 1 1551 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 8
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0074 80B4     		push	{r7}
 114              	.LCFI6:
 115              		.cfi_def_cfa_offset 4
 116              		.cfi_offset 7, -4
 117 0076 83B0     		sub	sp, sp, #12
 118              	.LCFI7:
 119              		.cfi_def_cfa_offset 16
 120 0078 00AF     		add	r7, sp, #0
 121              	.LCFI8:
 122              		.cfi_def_cfa_register 7
 123 007a 0346     		mov	r3, r0
 124 007c 3960     		str	r1, [r7, #0]
 125 007e FB71     		strb	r3, [r7, #7]
1552:./inc/core_cm4.h ****   if(IRQn < 0) {
 126              		.loc 1 1552 0
 127 0080 97F90730 		ldrsb	r3, [r7, #7]
 128 0084 002B     		cmp	r3, #0
 129 0086 10DA     		bge	.L4
1553:./inc/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 130              		.loc 1 1553 0
 131 0088 4FF46D43 		mov	r3, #60672
 132 008c CEF20003 		movt	r3, 57344
 133 0090 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 134 0092 02F00F02 		and	r2, r2, #15
 135 0096 A2F10401 		sub	r1, r2, #4
 136 009a 3A68     		ldr	r2, [r7, #0]
 137 009c D2B2     		uxtb	r2, r2
 138 009e 4FEAC202 		lsl	r2, r2, #3
 139 00a2 D2B2     		uxtb	r2, r2
 140 00a4 5B18     		adds	r3, r3, r1
 141 00a6 1A76     		strb	r2, [r3, #24]
 142 00a8 0DE0     		b	.L3
 143              	.L4:
1554:./inc/core_cm4.h ****   else {
1555:./inc/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 144              		.loc 1 1555 0
 145 00aa 4FF46143 		mov	r3, #57600
 146 00ae CEF20003 		movt	r3, 57344
 147 00b2 97F90710 		ldrsb	r1, [r7, #7]
 148 00b6 3A68     		ldr	r2, [r7, #0]
 149 00b8 D2B2     		uxtb	r2, r2
 150 00ba 4FEAC202 		lsl	r2, r2, #3
 151 00be D2B2     		uxtb	r2, r2
 152 00c0 5B18     		adds	r3, r3, r1
 153 00c2 83F80023 		strb	r2, [r3, #768]
 154              	.L3:
1556:./inc/core_cm4.h **** }
 155              		.loc 1 1556 0
 156 00c6 07F10C07 		add	r7, r7, #12
 157 00ca BD46     		mov	sp, r7
 158 00cc 80BC     		pop	{r7}
 159 00ce 7047     		bx	lr
 160              		.cfi_endproc
 161              	.LFE103:
 163              		.align	2
 164              		.global	Init_Timer0
 165              		.thumb
 166              		.thumb_func
 168              	Init_Timer0:
 169              	.LFB112:
 170              		.file 2 "src/timer.c"
   1:src/timer.c   **** /*******************************************************************************
   2:src/timer.c   ****  *
   3:src/timer.c   ****  * Project  :	PCAN-GPS
   4:src/timer.c   ****  * Module   :
   5:src/timer.c   ****  * Filename :	timer.c
   6:src/timer.c   ****  * System   :
   7:src/timer.c   ****  * Compiler :
   8:src/timer.c   ****  * Switches :
   9:src/timer.c   ****  * Rights   : 	(c) PEAK-System Technik GmbH
  10:src/timer.c   ****  *            	www.peak-system.com
  11:src/timer.c   ****  *
  12:src/timer.c   ****  *******************************************************************************
  13:src/timer.c   ****  * Implementation description
  14:src/timer.c   ****  *
  15:src/timer.c   ****  *
  16:src/timer.c   ****  *
  17:src/timer.c   ****  *******************************************************************************
  18:src/timer.c   ****  * History: (newer entries first!)
  19:src/timer.c   ****  *------------------------------------------------------------------------------
  20:src/timer.c   ****  * Date / Name      Vers.   changes made
  21:src/timer.c   ****  *------------------------------------------------------------------------------ 
  22:src/timer.c   ****  * 2015 Nov  05/StM	0.0.2	fixed wrong prescaler value
  23:src/timer.c   ****  * 2014 June xx/StM	0.0.1	Initial Version
  24:src/timer.c   ****  ******************************************************************************/
  25:src/timer.c   **** /*******************************************************************************
  26:src/timer.c   ****  include files
  27:src/timer.c   ****  ******************************************************************************/
  28:src/timer.c   **** //
  29:src/timer.c   **** // System header files
  30:src/timer.c   **** //
  31:src/timer.c   **** 
  32:src/timer.c   **** //
  33:src/timer.c   **** // Library header files
  34:src/timer.c   **** //
  35:src/timer.c   **** #include <system_LPC407x_8x_177x_8x.h>
  36:src/timer.c   **** #include <lpc407x_8x_177x_8x.h>
  37:src/timer.c   **** //
  38:src/timer.c   **** // Source code header files
  39:src/timer.c   **** //
  40:src/timer.c   **** #include "typedefs.h"
  41:src/timer.c   **** #include "hardware.h"
  42:src/timer.c   **** #include "timer.h"
  43:src/timer.c   **** 
  44:src/timer.c   **** 
  45:src/timer.c   **** /*******************************************************************************
  46:src/timer.c   ****  global definitions
  47:src/timer.c   ****  ******************************************************************************/
  48:src/timer.c   **** 
  49:src/timer.c   **** 
  50:src/timer.c   **** /*******************************************************************************
  51:src/timer.c   ****  local definitions
  52:src/timer.c   ****  ******************************************************************************/
  53:src/timer.c   **** extern void Timer_1000usec(void);
  54:src/timer.c   **** 
  55:src/timer.c   **** 
  56:src/timer.c   **** /*******************************************************************************
  57:src/timer.c   ****  local function prototypes
  58:src/timer.c   ****  ******************************************************************************/
  59:src/timer.c   **** void  TIMER0_IRQHandler (void);
  60:src/timer.c   **** 
  61:src/timer.c   **** /*******************************************************************************
  62:src/timer.c   ****  global functions
  63:src/timer.c   ****  ******************************************************************************/
  64:src/timer.c   **** 
  65:src/timer.c   **** 
  66:src/timer.c   **** //------------------------------------------------------------------------------
  67:src/timer.c   **** //! void Init_Timer0 (void)
  68:src/timer.c   **** //------------------------------------------------------------------------------
  69:src/timer.c   **** //! @brief	initializes timer 0 as system timer
  70:src/timer.c   **** //------------------------------------------------------------------------------
  71:src/timer.c   **** void Init_Timer0 (void){
 171              		.loc 2 71 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 00d0 80B5     		push	{r7, lr}
 176              	.LCFI9:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 7, -8
 179              		.cfi_offset 14, -4
 180 00d2 00AF     		add	r7, sp, #0
 181              	.LCFI10:
 182              		.cfi_def_cfa_register 7
  72:src/timer.c   **** 	NVIC_DisableIRQ ( TIMER0_IRQn);
 183              		.loc 2 72 0
 184 00d4 4FF00100 		mov	r0, #1
 185 00d8 FFF7AEFF 		bl	NVIC_DisableIRQ
  73:src/timer.c   **** 	
  74:src/timer.c   **** 	LPC_SC->PCONP  |= 1 << 1; 	// Power on for Timer0
 186              		.loc 2 74 0
 187 00dc 4FF44043 		mov	r3, #49152
 188 00e0 C4F20F03 		movt	r3, 16399
 189 00e4 4FF44042 		mov	r2, #49152
 190 00e8 C4F20F02 		movt	r2, 16399
 191 00ec D2F8C420 		ldr	r2, [r2, #196]
 192 00f0 42F00202 		orr	r2, r2, #2
 193 00f4 C3F8C420 		str	r2, [r3, #196]
  75:src/timer.c   **** 
  76:src/timer.c   **** 	LPC_TIM0->TCR = 2;					// Timer0 stop
 194              		.loc 2 76 0
 195 00f8 4FF04023 		mov	r3, #1073758208
 196 00fc 4FF00202 		mov	r2, #2
 197 0100 5A60     		str	r2, [r3, #4]
  77:src/timer.c   **** 
  78:src/timer.c   **** 	// Set Prescaler
  79:src/timer.c   **** 	LPC_TIM0->PR = 119; 				// Divide PCLK=120MHz by 120
 198              		.loc 2 79 0
 199 0102 4FF04023 		mov	r3, #1073758208
 200 0106 4FF07702 		mov	r2, #119
 201 010a DA60     		str	r2, [r3, #12]
  80:src/timer.c   **** 	//from here Timer0 = 1MHz = 1usec
  81:src/timer.c   **** 	
  82:src/timer.c   **** 	LPC_TIM0->MCR = 1<<0;
 202              		.loc 2 82 0
 203 010c 4FF04023 		mov	r3, #1073758208
 204 0110 4FF00102 		mov	r2, #1
 205 0114 5A61     		str	r2, [r3, #20]
  83:src/timer.c   **** 
  84:src/timer.c   **** 	LPC_TIM0->MR0 = SYSTIME_NOW + 1000;
 206              		.loc 2 84 0
 207 0116 4FF04023 		mov	r3, #1073758208
 208 011a 4FF04022 		mov	r2, #1073758208
 209 011e 9268     		ldr	r2, [r2, #8]
 210 0120 02F57A72 		add	r2, r2, #1000
 211 0124 9A61     		str	r2, [r3, #24]
  85:src/timer.c   **** 	
  86:src/timer.c   **** 	
  87:src/timer.c   **** 	// start timer
  88:src/timer.c   **** 	LPC_TIM0->IR 	= 0xFFFFFFFF;	// Clear all interrupts
 212              		.loc 2 88 0
 213 0126 4FF04023 		mov	r3, #1073758208
 214 012a 4FF0FF32 		mov	r2, #-1
 215 012e 1A60     		str	r2, [r3, #0]
  89:src/timer.c   **** 	LPC_TIM0->TCR = 1;					// Timer0 start
 216              		.loc 2 89 0
 217 0130 4FF04023 		mov	r3, #1073758208
 218 0134 4FF00102 		mov	r2, #1
 219 0138 5A60     		str	r2, [r3, #4]
  90:src/timer.c   **** 	
  91:src/timer.c   **** 	NVIC_SetPriority ( TIMER0_IRQn, 0);
 220              		.loc 2 91 0
 221 013a 4FF00100 		mov	r0, #1
 222 013e 4FF00001 		mov	r1, #0
 223 0142 FFF797FF 		bl	NVIC_SetPriority
  92:src/timer.c   **** 	NVIC_EnableIRQ ( TIMER0_IRQn);
 224              		.loc 2 92 0
 225 0146 4FF00100 		mov	r0, #1
 226 014a FFF759FF 		bl	NVIC_EnableIRQ
  93:src/timer.c   **** }
 227              		.loc 2 93 0
 228 014e 80BD     		pop	{r7, pc}
 229              		.cfi_endproc
 230              	.LFE112:
 232              		.align	2
 233              		.global	TIMER0_IRQHandler
 234              		.thumb
 235              		.thumb_func
 237              	TIMER0_IRQHandler:
 238              	.LFB113:
  94:src/timer.c   **** 
  95:src/timer.c   **** 
  96:src/timer.c   **** //------------------------------------------------------------------------------
  97:src/timer.c   **** //! void  TIMER0_IRQHandler (void)
  98:src/timer.c   **** //------------------------------------------------------------------------------
  99:src/timer.c   **** //! @brief	ISR for timer 0
 100:src/timer.c   **** //------------------------------------------------------------------------------
 101:src/timer.c   **** void  TIMER0_IRQHandler (void)
 102:src/timer.c   **** {
 239              		.loc 2 102 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0150 80B5     		push	{r7, lr}
 244              	.LCFI11:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0152 00AF     		add	r7, sp, #0
 249              	.LCFI12:
 250              		.cfi_def_cfa_register 7
 103:src/timer.c   **** 	if ( LPC_TIM0->IR & 1) 	// Timer0 interrupt
 251              		.loc 2 103 0
 252 0154 4FF04023 		mov	r3, #1073758208
 253 0158 1B68     		ldr	r3, [r3, #0]
 254 015a 03F00103 		and	r3, r3, #1
 255 015e 002B     		cmp	r3, #0
 256 0160 0FD0     		beq	.L8
 104:src/timer.c   **** 	{
 105:src/timer.c   **** 		// update match value for next interrupt
 106:src/timer.c   **** 		LPC_TIM0->MR0 = SYSTIME_NOW + 1000;
 257              		.loc 2 106 0
 258 0162 4FF04023 		mov	r3, #1073758208
 259 0166 4FF04022 		mov	r2, #1073758208
 260 016a 9268     		ldr	r2, [r2, #8]
 261 016c 02F57A72 		add	r2, r2, #1000
 262 0170 9A61     		str	r2, [r3, #24]
 107:src/timer.c   **** 
 108:src/timer.c   **** 		LPC_TIM0->IR  = 0x00000001;	// ack this interrupts
 263              		.loc 2 108 0
 264 0172 4FF04023 		mov	r3, #1073758208
 265 0176 4FF00102 		mov	r2, #1
 266 017a 1A60     		str	r2, [r3, #0]
 109:src/timer.c   **** 
 110:src/timer.c   **** 		Timer_1000usec();			// process 1000usec task in main.c
 267              		.loc 2 110 0
 268 017c FFF7FEFF 		bl	Timer_1000usec
 269 0180 04E0     		b	.L7
 270              	.L8:
 111:src/timer.c   **** 	}
 112:src/timer.c   **** 	else
 113:src/timer.c   **** 	{
 114:src/timer.c   **** 		LPC_TIM0->IR  = 0x0000003E;		// ack all other interrupts
 271              		.loc 2 114 0
 272 0182 4FF04023 		mov	r3, #1073758208
 273 0186 4FF03E02 		mov	r2, #62
 274 018a 1A60     		str	r2, [r3, #0]
 275              	.L7:
 115:src/timer.c   **** 	}
 116:src/timer.c   **** }
 276              		.loc 2 116 0
 277 018c 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE113:
 281 018e 00BF     		.align	2
 282              		.global	Wait_Usec
 283              		.thumb
 284              		.thumb_func
 286              	Wait_Usec:
 287              	.LFB114:
 117:src/timer.c   **** 
 118:src/timer.c   **** 
 119:src/timer.c   **** //------------------------------------------------------------------------------
 120:src/timer.c   **** //! void	Wait_Usec (u32_t  Usec)
 121:src/timer.c   **** //------------------------------------------------------------------------------
 122:src/timer.c   **** //! @brief	waits n microseconds (blocking).
 123:src/timer.c   **** //------------------------------------------------------------------------------
 124:src/timer.c   **** void Wait_Usec (u32_t  Usec){
 288              		.loc 2 124 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 16
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293 0190 80B4     		push	{r7}
 294              	.LCFI13:
 295              		.cfi_def_cfa_offset 4
 296              		.cfi_offset 7, -4
 297 0192 85B0     		sub	sp, sp, #20
 298              	.LCFI14:
 299              		.cfi_def_cfa_offset 24
 300 0194 00AF     		add	r7, sp, #0
 301              	.LCFI15:
 302              		.cfi_def_cfa_register 7
 303 0196 7860     		str	r0, [r7, #4]
 125:src/timer.c   **** 	u32_t  TimeStart, TimeNow;
 126:src/timer.c   **** 
 127:src/timer.c   **** 	if (Usec) 
 304              		.loc 2 127 0
 305 0198 7B68     		ldr	r3, [r7, #4]
 306 019a 002B     		cmp	r3, #0
 307 019c 17D0     		beq	.L10
 128:src/timer.c   **** 	{
 129:src/timer.c   **** 		TimeStart = SYSTIME_NOW;	
 308              		.loc 2 129 0
 309 019e 4FF04023 		mov	r3, #1073758208
 310 01a2 9B68     		ldr	r3, [r3, #8]
 311 01a4 FB60     		str	r3, [r7, #12]
 312              	.L14:
 130:src/timer.c   **** 
 131:src/timer.c   **** 		do 
 132:src/timer.c   **** 		{
 133:src/timer.c   **** 			TimeNow = SYSTIME_NOW;
 313              		.loc 2 133 0 discriminator 1
 314 01a6 4FF04023 		mov	r3, #1073758208
 315 01aa 9B68     		ldr	r3, [r3, #8]
 316 01ac BB60     		str	r3, [r7, #8]
 134:src/timer.c   **** 		} 
 135:src/timer.c   **** 		while ((SYSTIME_DIFF (TimeStart, TimeNow)) < Usec);
 317              		.loc 2 135 0 discriminator 1
 318 01ae FA68     		ldr	r2, [r7, #12]
 319 01b0 BB68     		ldr	r3, [r7, #8]
 320 01b2 9A42     		cmp	r2, r3
 321 01b4 03D8     		bhi	.L12
 322 01b6 BA68     		ldr	r2, [r7, #8]
 323 01b8 FB68     		ldr	r3, [r7, #12]
 324 01ba D31A     		subs	r3, r2, r3
 325 01bc 04E0     		b	.L13
 326              	.L12:
 327              		.loc 2 135 0 is_stmt 0 discriminator 2
 328 01be FB68     		ldr	r3, [r7, #12]
 329 01c0 6FEA0302 		mvn	r2, r3
 330 01c4 BB68     		ldr	r3, [r7, #8]
 331 01c6 D318     		adds	r3, r2, r3
 332              	.L13:
 333              		.loc 2 135 0 discriminator 3
 334 01c8 7A68     		ldr	r2, [r7, #4]
 335 01ca 9342     		cmp	r3, r2
 336 01cc EBD3     		bcc	.L14
 337              	.L10:
 136:src/timer.c   **** 	}
 137:src/timer.c   **** }
 338              		.loc 2 137 0 is_stmt 1
 339 01ce 07F11407 		add	r7, r7, #20
 340 01d2 BD46     		mov	sp, r7
 341 01d4 80BC     		pop	{r7}
 342 01d6 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE114:
 346              	.Letext0:
 347              		.file 3 "c:/tools/pcan-router/yagarto-20121222/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 348              		.file 4 "./inc/lpc407x_8x_177x_8x.h"
 349              		.file 5 "./inc/typedefs.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:18     .text:00000000 $t
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:22     .text:00000000 NVIC_EnableIRQ
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:64     .text:00000038 NVIC_DisableIRQ
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:106    .text:00000074 NVIC_SetPriority
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:168    .text:000000d0 Init_Timer0
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:237    .text:00000150 TIMER0_IRQHandler
C:\Users\Ian\AppData\Local\Temp\ccbVEXra.s:286    .text:00000190 Wait_Usec
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Timer_1000usec
