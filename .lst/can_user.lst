   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"can_user.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	NVIC_EnableIRQ:
  23              	.LFB97:
  24              		.file 1 "./inc/core_cm4.h"
   1:./inc/core_cm4.h **** /**************************************************************************//**
   2:./inc/core_cm4.h ****  * @file     core_cm4.h
   3:./inc/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:./inc/core_cm4.h ****  * @version  V3.20
   5:./inc/core_cm4.h ****  * @date     25. February 2013
   6:./inc/core_cm4.h ****  *
   7:./inc/core_cm4.h ****  * @note
   8:./inc/core_cm4.h ****  *
   9:./inc/core_cm4.h ****  ******************************************************************************/
  10:./inc/core_cm4.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:./inc/core_cm4.h **** 
  12:./inc/core_cm4.h ****    All rights reserved.
  13:./inc/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:./inc/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:./inc/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:./inc/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:./inc/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./inc/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:./inc/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:./inc/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./inc/core_cm4.h ****      to endorse or promote products derived from this software without
  22:./inc/core_cm4.h ****      specific prior written permission.
  23:./inc/core_cm4.h ****    *
  24:./inc/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./inc/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./inc/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./inc/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./inc/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./inc/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./inc/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./inc/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./inc/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./inc/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./inc/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./inc/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:./inc/core_cm4.h **** 
  37:./inc/core_cm4.h **** 
  38:./inc/core_cm4.h **** #if defined ( __ICCARM__ )
  39:./inc/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:./inc/core_cm4.h **** #endif
  41:./inc/core_cm4.h **** 
  42:./inc/core_cm4.h **** #ifdef __cplusplus
  43:./inc/core_cm4.h ****  extern "C" {
  44:./inc/core_cm4.h **** #endif
  45:./inc/core_cm4.h **** 
  46:./inc/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  47:./inc/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  48:./inc/core_cm4.h **** 
  49:./inc/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:./inc/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:./inc/core_cm4.h **** 
  52:./inc/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:./inc/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:./inc/core_cm4.h **** 
  55:./inc/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:./inc/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:./inc/core_cm4.h **** 
  58:./inc/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:./inc/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:./inc/core_cm4.h ****  */
  61:./inc/core_cm4.h **** 
  62:./inc/core_cm4.h **** 
  63:./inc/core_cm4.h **** /*******************************************************************************
  64:./inc/core_cm4.h ****  *                 CMSIS definitions
  65:./inc/core_cm4.h ****  ******************************************************************************/
  66:./inc/core_cm4.h **** /** \ingroup Cortex_M4
  67:./inc/core_cm4.h ****   @{
  68:./inc/core_cm4.h ****  */
  69:./inc/core_cm4.h **** 
  70:./inc/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:./inc/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:./inc/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:./inc/core_cm4.h **** 
  76:./inc/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:./inc/core_cm4.h **** 
  78:./inc/core_cm4.h **** 
  79:./inc/core_cm4.h **** #if   defined ( __CC_ARM )
  80:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:./inc/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:./inc/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:./inc/core_cm4.h **** 
  84:./inc/core_cm4.h **** #elif defined ( __ICCARM__ )
  85:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:./inc/core_cm4.h **** 
  89:./inc/core_cm4.h **** #elif defined ( __TMS470__ )
  90:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  92:./inc/core_cm4.h **** 
  93:./inc/core_cm4.h **** #elif defined ( __GNUC__ )
  94:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:./inc/core_cm4.h **** 
  98:./inc/core_cm4.h **** #elif defined ( __TASKING__ )
  99:./inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:./inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:./inc/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:./inc/core_cm4.h **** 
 103:./inc/core_cm4.h **** #endif
 104:./inc/core_cm4.h **** 
 105:./inc/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not. For this, __FPU_PRESENT has to be checked p
 106:./inc/core_cm4.h **** */
 107:./inc/core_cm4.h **** #if defined ( __CC_ARM )
 108:./inc/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 109:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 110:./inc/core_cm4.h ****       #define __FPU_USED       1
 111:./inc/core_cm4.h ****     #else
 112:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 113:./inc/core_cm4.h ****       #define __FPU_USED       0
 114:./inc/core_cm4.h ****     #endif
 115:./inc/core_cm4.h ****   #else
 116:./inc/core_cm4.h ****     #define __FPU_USED         0
 117:./inc/core_cm4.h ****   #endif
 118:./inc/core_cm4.h **** 
 119:./inc/core_cm4.h **** #elif defined ( __ICCARM__ )
 120:./inc/core_cm4.h ****   #if defined __ARMVFP__
 121:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 122:./inc/core_cm4.h ****       #define __FPU_USED       1
 123:./inc/core_cm4.h ****     #else
 124:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 125:./inc/core_cm4.h ****       #define __FPU_USED       0
 126:./inc/core_cm4.h ****     #endif
 127:./inc/core_cm4.h ****   #else
 128:./inc/core_cm4.h ****     #define __FPU_USED         0
 129:./inc/core_cm4.h ****   #endif
 130:./inc/core_cm4.h **** 
 131:./inc/core_cm4.h **** #elif defined ( __TMS470__ )
 132:./inc/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 133:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 134:./inc/core_cm4.h ****       #define __FPU_USED       1
 135:./inc/core_cm4.h ****     #else
 136:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 137:./inc/core_cm4.h ****       #define __FPU_USED       0
 138:./inc/core_cm4.h ****     #endif
 139:./inc/core_cm4.h ****   #else
 140:./inc/core_cm4.h ****     #define __FPU_USED         0
 141:./inc/core_cm4.h ****   #endif
 142:./inc/core_cm4.h **** 
 143:./inc/core_cm4.h **** #elif defined ( __GNUC__ )
 144:./inc/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 145:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 146:./inc/core_cm4.h ****       #define __FPU_USED       1
 147:./inc/core_cm4.h ****     #else
 148:./inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 149:./inc/core_cm4.h ****       #define __FPU_USED       0
 150:./inc/core_cm4.h ****     #endif
 151:./inc/core_cm4.h ****   #else
 152:./inc/core_cm4.h ****     #define __FPU_USED         0
 153:./inc/core_cm4.h ****   #endif
 154:./inc/core_cm4.h **** 
 155:./inc/core_cm4.h **** #elif defined ( __TASKING__ )
 156:./inc/core_cm4.h ****   #if defined __FPU_VFP__
 157:./inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 158:./inc/core_cm4.h ****       #define __FPU_USED       1
 159:./inc/core_cm4.h ****     #else
 160:./inc/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 161:./inc/core_cm4.h ****       #define __FPU_USED       0
 162:./inc/core_cm4.h ****     #endif
 163:./inc/core_cm4.h ****   #else
 164:./inc/core_cm4.h ****     #define __FPU_USED         0
 165:./inc/core_cm4.h ****   #endif
 166:./inc/core_cm4.h **** #endif
 167:./inc/core_cm4.h **** 
 168:./inc/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 169:./inc/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 170:./inc/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 171:./inc/core_cm4.h **** #include <core_cm4_simd.h>               /* Compiler specific SIMD Intrinsics               */
 172:./inc/core_cm4.h **** 
 173:./inc/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 174:./inc/core_cm4.h **** 
 175:./inc/core_cm4.h **** #ifndef __CMSIS_GENERIC
 176:./inc/core_cm4.h **** 
 177:./inc/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 178:./inc/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 179:./inc/core_cm4.h **** 
 180:./inc/core_cm4.h **** /* check device defines and use defaults */
 181:./inc/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:./inc/core_cm4.h ****   #ifndef __CM4_REV
 183:./inc/core_cm4.h ****     #define __CM4_REV               0x0000
 184:./inc/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:./inc/core_cm4.h ****   #endif
 186:./inc/core_cm4.h **** 
 187:./inc/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:./inc/core_cm4.h ****     #define __FPU_PRESENT             0
 189:./inc/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:./inc/core_cm4.h ****   #endif
 191:./inc/core_cm4.h **** 
 192:./inc/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:./inc/core_cm4.h ****     #define __MPU_PRESENT             0
 194:./inc/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:./inc/core_cm4.h ****   #endif
 196:./inc/core_cm4.h **** 
 197:./inc/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:./inc/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 199:./inc/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:./inc/core_cm4.h ****   #endif
 201:./inc/core_cm4.h **** 
 202:./inc/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:./inc/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 204:./inc/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:./inc/core_cm4.h ****   #endif
 206:./inc/core_cm4.h **** #endif
 207:./inc/core_cm4.h **** 
 208:./inc/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:./inc/core_cm4.h **** /**
 210:./inc/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:./inc/core_cm4.h **** 
 212:./inc/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:./inc/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:./inc/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:./inc/core_cm4.h **** */
 216:./inc/core_cm4.h **** #ifdef __cplusplus
 217:./inc/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 218:./inc/core_cm4.h **** #else
 219:./inc/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 220:./inc/core_cm4.h **** #endif
 221:./inc/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 222:./inc/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 223:./inc/core_cm4.h **** 
 224:./inc/core_cm4.h **** /*@} end of group Cortex_M4 */
 225:./inc/core_cm4.h **** 
 226:./inc/core_cm4.h **** 
 227:./inc/core_cm4.h **** 
 228:./inc/core_cm4.h **** /*******************************************************************************
 229:./inc/core_cm4.h ****  *                 Register Abstraction
 230:./inc/core_cm4.h ****   Core Register contain:
 231:./inc/core_cm4.h ****   - Core Register
 232:./inc/core_cm4.h ****   - Core NVIC Register
 233:./inc/core_cm4.h ****   - Core SCB Register
 234:./inc/core_cm4.h ****   - Core SysTick Register
 235:./inc/core_cm4.h ****   - Core Debug Register
 236:./inc/core_cm4.h ****   - Core MPU Register
 237:./inc/core_cm4.h ****   - Core FPU Register
 238:./inc/core_cm4.h ****  ******************************************************************************/
 239:./inc/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 240:./inc/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 241:./inc/core_cm4.h **** */
 242:./inc/core_cm4.h **** 
 243:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
 244:./inc/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 245:./inc/core_cm4.h ****     \brief  Core Register type definitions.
 246:./inc/core_cm4.h ****   @{
 247:./inc/core_cm4.h ****  */
 248:./inc/core_cm4.h **** 
 249:./inc/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 250:./inc/core_cm4.h ****  */
 251:./inc/core_cm4.h **** typedef union
 252:./inc/core_cm4.h **** {
 253:./inc/core_cm4.h ****   struct
 254:./inc/core_cm4.h ****   {
 255:./inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 256:./inc/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 257:./inc/core_cm4.h **** #else
 258:./inc/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 259:./inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 260:./inc/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 261:./inc/core_cm4.h **** #endif
 262:./inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 263:./inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 264:./inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 265:./inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 266:./inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 267:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 268:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 269:./inc/core_cm4.h **** } APSR_Type;
 270:./inc/core_cm4.h **** 
 271:./inc/core_cm4.h **** 
 272:./inc/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 273:./inc/core_cm4.h ****  */
 274:./inc/core_cm4.h **** typedef union
 275:./inc/core_cm4.h **** {
 276:./inc/core_cm4.h ****   struct
 277:./inc/core_cm4.h ****   {
 278:./inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 279:./inc/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 280:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 281:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 282:./inc/core_cm4.h **** } IPSR_Type;
 283:./inc/core_cm4.h **** 
 284:./inc/core_cm4.h **** 
 285:./inc/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 286:./inc/core_cm4.h ****  */
 287:./inc/core_cm4.h **** typedef union
 288:./inc/core_cm4.h **** {
 289:./inc/core_cm4.h ****   struct
 290:./inc/core_cm4.h ****   {
 291:./inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 292:./inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 293:./inc/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 294:./inc/core_cm4.h **** #else
 295:./inc/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 296:./inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 297:./inc/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 298:./inc/core_cm4.h **** #endif
 299:./inc/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 300:./inc/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 301:./inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 302:./inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 303:./inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 304:./inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 305:./inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 306:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 307:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 308:./inc/core_cm4.h **** } xPSR_Type;
 309:./inc/core_cm4.h **** 
 310:./inc/core_cm4.h **** 
 311:./inc/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 312:./inc/core_cm4.h ****  */
 313:./inc/core_cm4.h **** typedef union
 314:./inc/core_cm4.h **** {
 315:./inc/core_cm4.h ****   struct
 316:./inc/core_cm4.h ****   {
 317:./inc/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 318:./inc/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 319:./inc/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 320:./inc/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 321:./inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 322:./inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 323:./inc/core_cm4.h **** } CONTROL_Type;
 324:./inc/core_cm4.h **** 
 325:./inc/core_cm4.h **** /*@} end of group CMSIS_CORE */
 326:./inc/core_cm4.h **** 
 327:./inc/core_cm4.h **** 
 328:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
 329:./inc/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 330:./inc/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 331:./inc/core_cm4.h ****   @{
 332:./inc/core_cm4.h ****  */
 333:./inc/core_cm4.h **** 
 334:./inc/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 335:./inc/core_cm4.h ****  */
 336:./inc/core_cm4.h **** typedef struct
 337:./inc/core_cm4.h **** {
 338:./inc/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 339:./inc/core_cm4.h ****        uint32_t RESERVED0[24];
 340:./inc/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 341:./inc/core_cm4.h ****        uint32_t RSERVED1[24];
 342:./inc/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 343:./inc/core_cm4.h ****        uint32_t RESERVED2[24];
 344:./inc/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 345:./inc/core_cm4.h ****        uint32_t RESERVED3[24];
 346:./inc/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 347:./inc/core_cm4.h ****        uint32_t RESERVED4[56];
 348:./inc/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 349:./inc/core_cm4.h ****        uint32_t RESERVED5[644];
 350:./inc/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 351:./inc/core_cm4.h **** }  NVIC_Type;
 352:./inc/core_cm4.h **** 
 353:./inc/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 354:./inc/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 355:./inc/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 356:./inc/core_cm4.h **** 
 357:./inc/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 358:./inc/core_cm4.h **** 
 359:./inc/core_cm4.h **** 
 360:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 361:./inc/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 362:./inc/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 363:./inc/core_cm4.h ****   @{
 364:./inc/core_cm4.h ****  */
 365:./inc/core_cm4.h **** 
 366:./inc/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 367:./inc/core_cm4.h ****  */
 368:./inc/core_cm4.h **** typedef struct
 369:./inc/core_cm4.h **** {
 370:./inc/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 371:./inc/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 372:./inc/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 373:./inc/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 374:./inc/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 375:./inc/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 376:./inc/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 377:./inc/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 378:./inc/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 379:./inc/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 380:./inc/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 381:./inc/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 382:./inc/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 383:./inc/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 384:./inc/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 385:./inc/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 386:./inc/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 387:./inc/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 388:./inc/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 389:./inc/core_cm4.h ****        uint32_t RESERVED0[5];
 390:./inc/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 391:./inc/core_cm4.h **** } SCB_Type;
 392:./inc/core_cm4.h **** 
 393:./inc/core_cm4.h **** /* SCB CPUID Register Definitions */
 394:./inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 395:./inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 396:./inc/core_cm4.h **** 
 397:./inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 398:./inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 399:./inc/core_cm4.h **** 
 400:./inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 401:./inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 402:./inc/core_cm4.h **** 
 403:./inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 404:./inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 405:./inc/core_cm4.h **** 
 406:./inc/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 407:./inc/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 408:./inc/core_cm4.h **** 
 409:./inc/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 410:./inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 411:./inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 412:./inc/core_cm4.h **** 
 413:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 414:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 415:./inc/core_cm4.h **** 
 416:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 417:./inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 418:./inc/core_cm4.h **** 
 419:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 420:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 421:./inc/core_cm4.h **** 
 422:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 423:./inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 424:./inc/core_cm4.h **** 
 425:./inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 426:./inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 427:./inc/core_cm4.h **** 
 428:./inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 429:./inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 430:./inc/core_cm4.h **** 
 431:./inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 432:./inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 433:./inc/core_cm4.h **** 
 434:./inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 435:./inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 436:./inc/core_cm4.h **** 
 437:./inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 438:./inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 439:./inc/core_cm4.h **** 
 440:./inc/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 441:./inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 442:./inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 443:./inc/core_cm4.h **** 
 444:./inc/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 445:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 446:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 447:./inc/core_cm4.h **** 
 448:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 449:./inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 450:./inc/core_cm4.h **** 
 451:./inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 452:./inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 453:./inc/core_cm4.h **** 
 454:./inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 455:./inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 456:./inc/core_cm4.h **** 
 457:./inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 458:./inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 459:./inc/core_cm4.h **** 
 460:./inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 461:./inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 462:./inc/core_cm4.h **** 
 463:./inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 464:./inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 465:./inc/core_cm4.h **** 
 466:./inc/core_cm4.h **** /* SCB System Control Register Definitions */
 467:./inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 468:./inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 469:./inc/core_cm4.h **** 
 470:./inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 471:./inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 472:./inc/core_cm4.h **** 
 473:./inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 474:./inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 475:./inc/core_cm4.h **** 
 476:./inc/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 477:./inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 478:./inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 479:./inc/core_cm4.h **** 
 480:./inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 481:./inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 482:./inc/core_cm4.h **** 
 483:./inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 484:./inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 485:./inc/core_cm4.h **** 
 486:./inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 487:./inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 488:./inc/core_cm4.h **** 
 489:./inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 490:./inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 491:./inc/core_cm4.h **** 
 492:./inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 493:./inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 494:./inc/core_cm4.h **** 
 495:./inc/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 496:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 497:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 498:./inc/core_cm4.h **** 
 499:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 500:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 501:./inc/core_cm4.h **** 
 502:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 503:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 504:./inc/core_cm4.h **** 
 505:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 506:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 507:./inc/core_cm4.h **** 
 508:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 509:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 510:./inc/core_cm4.h **** 
 511:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 512:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 513:./inc/core_cm4.h **** 
 514:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 515:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 516:./inc/core_cm4.h **** 
 517:./inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 518:./inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 519:./inc/core_cm4.h **** 
 520:./inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 521:./inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 522:./inc/core_cm4.h **** 
 523:./inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 524:./inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 525:./inc/core_cm4.h **** 
 526:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 527:./inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 528:./inc/core_cm4.h **** 
 529:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 530:./inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 531:./inc/core_cm4.h **** 
 532:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 533:./inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 534:./inc/core_cm4.h **** 
 535:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 536:./inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 537:./inc/core_cm4.h **** 
 538:./inc/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 539:./inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 540:./inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 541:./inc/core_cm4.h **** 
 542:./inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 543:./inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 544:./inc/core_cm4.h **** 
 545:./inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 546:./inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 547:./inc/core_cm4.h **** 
 548:./inc/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 549:./inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 550:./inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 551:./inc/core_cm4.h **** 
 552:./inc/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 553:./inc/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 554:./inc/core_cm4.h **** 
 555:./inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 556:./inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 557:./inc/core_cm4.h **** 
 558:./inc/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 559:./inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 560:./inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 561:./inc/core_cm4.h **** 
 562:./inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 563:./inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 564:./inc/core_cm4.h **** 
 565:./inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 566:./inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 567:./inc/core_cm4.h **** 
 568:./inc/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 569:./inc/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 570:./inc/core_cm4.h **** 
 571:./inc/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 572:./inc/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 573:./inc/core_cm4.h **** 
 574:./inc/core_cm4.h **** /*@} end of group CMSIS_SCB */
 575:./inc/core_cm4.h **** 
 576:./inc/core_cm4.h **** 
 577:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 578:./inc/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 579:./inc/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 580:./inc/core_cm4.h ****   @{
 581:./inc/core_cm4.h ****  */
 582:./inc/core_cm4.h **** 
 583:./inc/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 584:./inc/core_cm4.h ****  */
 585:./inc/core_cm4.h **** typedef struct
 586:./inc/core_cm4.h **** {
 587:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
 588:./inc/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 589:./inc/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 590:./inc/core_cm4.h **** } SCnSCB_Type;
 591:./inc/core_cm4.h **** 
 592:./inc/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 593:./inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 594:./inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 595:./inc/core_cm4.h **** 
 596:./inc/core_cm4.h **** /* Auxiliary Control Register Definitions */
 597:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 598:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 599:./inc/core_cm4.h **** 
 600:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 601:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 602:./inc/core_cm4.h **** 
 603:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 604:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 605:./inc/core_cm4.h **** 
 606:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 607:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 608:./inc/core_cm4.h **** 
 609:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 610:./inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 611:./inc/core_cm4.h **** 
 612:./inc/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 613:./inc/core_cm4.h **** 
 614:./inc/core_cm4.h **** 
 615:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 616:./inc/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 617:./inc/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 618:./inc/core_cm4.h ****   @{
 619:./inc/core_cm4.h ****  */
 620:./inc/core_cm4.h **** 
 621:./inc/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 622:./inc/core_cm4.h ****  */
 623:./inc/core_cm4.h **** typedef struct
 624:./inc/core_cm4.h **** {
 625:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 626:./inc/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 627:./inc/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 628:./inc/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 629:./inc/core_cm4.h **** } SysTick_Type;
 630:./inc/core_cm4.h **** 
 631:./inc/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 632:./inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 633:./inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 634:./inc/core_cm4.h **** 
 635:./inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 636:./inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 637:./inc/core_cm4.h **** 
 638:./inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 639:./inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 640:./inc/core_cm4.h **** 
 641:./inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 642:./inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 643:./inc/core_cm4.h **** 
 644:./inc/core_cm4.h **** /* SysTick Reload Register Definitions */
 645:./inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 646:./inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 647:./inc/core_cm4.h **** 
 648:./inc/core_cm4.h **** /* SysTick Current Register Definitions */
 649:./inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 650:./inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 651:./inc/core_cm4.h **** 
 652:./inc/core_cm4.h **** /* SysTick Calibration Register Definitions */
 653:./inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 654:./inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 655:./inc/core_cm4.h **** 
 656:./inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 657:./inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 658:./inc/core_cm4.h **** 
 659:./inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 660:./inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 661:./inc/core_cm4.h **** 
 662:./inc/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 663:./inc/core_cm4.h **** 
 664:./inc/core_cm4.h **** 
 665:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 666:./inc/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 667:./inc/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 668:./inc/core_cm4.h ****   @{
 669:./inc/core_cm4.h ****  */
 670:./inc/core_cm4.h **** 
 671:./inc/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 672:./inc/core_cm4.h ****  */
 673:./inc/core_cm4.h **** typedef struct
 674:./inc/core_cm4.h **** {
 675:./inc/core_cm4.h ****   __O  union
 676:./inc/core_cm4.h ****   {
 677:./inc/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 678:./inc/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 679:./inc/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 680:./inc/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 681:./inc/core_cm4.h ****        uint32_t RESERVED0[864];
 682:./inc/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 683:./inc/core_cm4.h ****        uint32_t RESERVED1[15];
 684:./inc/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 685:./inc/core_cm4.h ****        uint32_t RESERVED2[15];
 686:./inc/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 687:./inc/core_cm4.h ****        uint32_t RESERVED3[29];
 688:./inc/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 689:./inc/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 690:./inc/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 691:./inc/core_cm4.h ****        uint32_t RESERVED4[43];
 692:./inc/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 693:./inc/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 694:./inc/core_cm4.h ****        uint32_t RESERVED5[6];
 695:./inc/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 696:./inc/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 697:./inc/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 698:./inc/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 699:./inc/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 700:./inc/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 701:./inc/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 702:./inc/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 703:./inc/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 704:./inc/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 705:./inc/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 706:./inc/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 707:./inc/core_cm4.h **** } ITM_Type;
 708:./inc/core_cm4.h **** 
 709:./inc/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 710:./inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 711:./inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 712:./inc/core_cm4.h **** 
 713:./inc/core_cm4.h **** /* ITM Trace Control Register Definitions */
 714:./inc/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 715:./inc/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 716:./inc/core_cm4.h **** 
 717:./inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 718:./inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 719:./inc/core_cm4.h **** 
 720:./inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 721:./inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 722:./inc/core_cm4.h **** 
 723:./inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 724:./inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 725:./inc/core_cm4.h **** 
 726:./inc/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 727:./inc/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 728:./inc/core_cm4.h **** 
 729:./inc/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 730:./inc/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 731:./inc/core_cm4.h **** 
 732:./inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 733:./inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 734:./inc/core_cm4.h **** 
 735:./inc/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 736:./inc/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 737:./inc/core_cm4.h **** 
 738:./inc/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 739:./inc/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 740:./inc/core_cm4.h **** 
 741:./inc/core_cm4.h **** /* ITM Integration Write Register Definitions */
 742:./inc/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 743:./inc/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 744:./inc/core_cm4.h **** 
 745:./inc/core_cm4.h **** /* ITM Integration Read Register Definitions */
 746:./inc/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 747:./inc/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 748:./inc/core_cm4.h **** 
 749:./inc/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 750:./inc/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 751:./inc/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 752:./inc/core_cm4.h **** 
 753:./inc/core_cm4.h **** /* ITM Lock Status Register Definitions */
 754:./inc/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 755:./inc/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 756:./inc/core_cm4.h **** 
 757:./inc/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 758:./inc/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 759:./inc/core_cm4.h **** 
 760:./inc/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 761:./inc/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 762:./inc/core_cm4.h **** 
 763:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 764:./inc/core_cm4.h **** 
 765:./inc/core_cm4.h **** 
 766:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 767:./inc/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 768:./inc/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 769:./inc/core_cm4.h ****   @{
 770:./inc/core_cm4.h ****  */
 771:./inc/core_cm4.h **** 
 772:./inc/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 773:./inc/core_cm4.h ****  */
 774:./inc/core_cm4.h **** typedef struct
 775:./inc/core_cm4.h **** {
 776:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 777:./inc/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 778:./inc/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 779:./inc/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 780:./inc/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 781:./inc/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 782:./inc/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 783:./inc/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 784:./inc/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 785:./inc/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 786:./inc/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 787:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
 788:./inc/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 789:./inc/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 790:./inc/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 791:./inc/core_cm4.h ****        uint32_t RESERVED1[1];
 792:./inc/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 793:./inc/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 794:./inc/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 795:./inc/core_cm4.h ****        uint32_t RESERVED2[1];
 796:./inc/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 797:./inc/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 798:./inc/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 799:./inc/core_cm4.h **** } DWT_Type;
 800:./inc/core_cm4.h **** 
 801:./inc/core_cm4.h **** /* DWT Control Register Definitions */
 802:./inc/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 803:./inc/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 804:./inc/core_cm4.h **** 
 805:./inc/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 806:./inc/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 807:./inc/core_cm4.h **** 
 808:./inc/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 809:./inc/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 810:./inc/core_cm4.h **** 
 811:./inc/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 812:./inc/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 813:./inc/core_cm4.h **** 
 814:./inc/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 815:./inc/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 816:./inc/core_cm4.h **** 
 817:./inc/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 818:./inc/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 819:./inc/core_cm4.h **** 
 820:./inc/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 821:./inc/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 822:./inc/core_cm4.h **** 
 823:./inc/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 824:./inc/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 825:./inc/core_cm4.h **** 
 826:./inc/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 827:./inc/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 828:./inc/core_cm4.h **** 
 829:./inc/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 830:./inc/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 831:./inc/core_cm4.h **** 
 832:./inc/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 833:./inc/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 834:./inc/core_cm4.h **** 
 835:./inc/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 836:./inc/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 837:./inc/core_cm4.h **** 
 838:./inc/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 839:./inc/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 840:./inc/core_cm4.h **** 
 841:./inc/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 842:./inc/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 843:./inc/core_cm4.h **** 
 844:./inc/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 845:./inc/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 846:./inc/core_cm4.h **** 
 847:./inc/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 848:./inc/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 849:./inc/core_cm4.h **** 
 850:./inc/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 851:./inc/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 852:./inc/core_cm4.h **** 
 853:./inc/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 854:./inc/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 855:./inc/core_cm4.h **** 
 856:./inc/core_cm4.h **** /* DWT CPI Count Register Definitions */
 857:./inc/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 858:./inc/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 859:./inc/core_cm4.h **** 
 860:./inc/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 861:./inc/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 862:./inc/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 863:./inc/core_cm4.h **** 
 864:./inc/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 865:./inc/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 866:./inc/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 867:./inc/core_cm4.h **** 
 868:./inc/core_cm4.h **** /* DWT LSU Count Register Definitions */
 869:./inc/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 870:./inc/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 871:./inc/core_cm4.h **** 
 872:./inc/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 873:./inc/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 874:./inc/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 875:./inc/core_cm4.h **** 
 876:./inc/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 877:./inc/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 878:./inc/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 879:./inc/core_cm4.h **** 
 880:./inc/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 881:./inc/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 882:./inc/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 883:./inc/core_cm4.h **** 
 884:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 885:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 886:./inc/core_cm4.h **** 
 887:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 888:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 889:./inc/core_cm4.h **** 
 890:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 891:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 892:./inc/core_cm4.h **** 
 893:./inc/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 894:./inc/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 895:./inc/core_cm4.h **** 
 896:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 897:./inc/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 898:./inc/core_cm4.h **** 
 899:./inc/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 900:./inc/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 901:./inc/core_cm4.h **** 
 902:./inc/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 903:./inc/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 904:./inc/core_cm4.h **** 
 905:./inc/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 906:./inc/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 907:./inc/core_cm4.h **** 
 908:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 909:./inc/core_cm4.h **** 
 910:./inc/core_cm4.h **** 
 911:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 912:./inc/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 913:./inc/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 914:./inc/core_cm4.h ****   @{
 915:./inc/core_cm4.h ****  */
 916:./inc/core_cm4.h **** 
 917:./inc/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 918:./inc/core_cm4.h ****  */
 919:./inc/core_cm4.h **** typedef struct
 920:./inc/core_cm4.h **** {
 921:./inc/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 922:./inc/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 923:./inc/core_cm4.h ****        uint32_t RESERVED0[2];
 924:./inc/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 925:./inc/core_cm4.h ****        uint32_t RESERVED1[55];
 926:./inc/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 927:./inc/core_cm4.h ****        uint32_t RESERVED2[131];
 928:./inc/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 929:./inc/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 930:./inc/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 931:./inc/core_cm4.h ****        uint32_t RESERVED3[759];
 932:./inc/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 933:./inc/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 934:./inc/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 935:./inc/core_cm4.h ****        uint32_t RESERVED4[1];
 936:./inc/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 937:./inc/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 938:./inc/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 939:./inc/core_cm4.h ****        uint32_t RESERVED5[39];
 940:./inc/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 941:./inc/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 942:./inc/core_cm4.h ****        uint32_t RESERVED7[8];
 943:./inc/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 944:./inc/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 945:./inc/core_cm4.h **** } TPI_Type;
 946:./inc/core_cm4.h **** 
 947:./inc/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 948:./inc/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 949:./inc/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 950:./inc/core_cm4.h **** 
 951:./inc/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
 952:./inc/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 953:./inc/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 954:./inc/core_cm4.h **** 
 955:./inc/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
 956:./inc/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 957:./inc/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 958:./inc/core_cm4.h **** 
 959:./inc/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 960:./inc/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 961:./inc/core_cm4.h **** 
 962:./inc/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 963:./inc/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 964:./inc/core_cm4.h **** 
 965:./inc/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 966:./inc/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 967:./inc/core_cm4.h **** 
 968:./inc/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
 969:./inc/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 970:./inc/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 971:./inc/core_cm4.h **** 
 972:./inc/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 973:./inc/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 974:./inc/core_cm4.h **** 
 975:./inc/core_cm4.h **** /* TPI TRIGGER Register Definitions */
 976:./inc/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 977:./inc/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 978:./inc/core_cm4.h **** 
 979:./inc/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 980:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 981:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 982:./inc/core_cm4.h **** 
 983:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 984:./inc/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 985:./inc/core_cm4.h **** 
 986:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 987:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 988:./inc/core_cm4.h **** 
 989:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 990:./inc/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 991:./inc/core_cm4.h **** 
 992:./inc/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 993:./inc/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 994:./inc/core_cm4.h **** 
 995:./inc/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 996:./inc/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 997:./inc/core_cm4.h **** 
 998:./inc/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 999:./inc/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
1000:./inc/core_cm4.h **** 
1001:./inc/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1002:./inc/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1003:./inc/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
1004:./inc/core_cm4.h **** 
1005:./inc/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1006:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1007:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1008:./inc/core_cm4.h **** 
1009:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1010:./inc/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1011:./inc/core_cm4.h **** 
1012:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1013:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1014:./inc/core_cm4.h **** 
1015:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1016:./inc/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1017:./inc/core_cm4.h **** 
1018:./inc/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1019:./inc/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1020:./inc/core_cm4.h **** 
1021:./inc/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1022:./inc/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1023:./inc/core_cm4.h **** 
1024:./inc/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1025:./inc/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
1026:./inc/core_cm4.h **** 
1027:./inc/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1028:./inc/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1029:./inc/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
1030:./inc/core_cm4.h **** 
1031:./inc/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1032:./inc/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1033:./inc/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1034:./inc/core_cm4.h **** 
1035:./inc/core_cm4.h **** /* TPI DEVID Register Definitions */
1036:./inc/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1037:./inc/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1038:./inc/core_cm4.h **** 
1039:./inc/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1040:./inc/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1041:./inc/core_cm4.h **** 
1042:./inc/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1043:./inc/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1044:./inc/core_cm4.h **** 
1045:./inc/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1046:./inc/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1047:./inc/core_cm4.h **** 
1048:./inc/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1049:./inc/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1050:./inc/core_cm4.h **** 
1051:./inc/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1052:./inc/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1053:./inc/core_cm4.h **** 
1054:./inc/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1055:./inc/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1056:./inc/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1057:./inc/core_cm4.h **** 
1058:./inc/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1059:./inc/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1060:./inc/core_cm4.h **** 
1061:./inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1062:./inc/core_cm4.h **** 
1063:./inc/core_cm4.h **** 
1064:./inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
1065:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1066:./inc/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1067:./inc/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1068:./inc/core_cm4.h ****   @{
1069:./inc/core_cm4.h ****  */
1070:./inc/core_cm4.h **** 
1071:./inc/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1072:./inc/core_cm4.h ****  */
1073:./inc/core_cm4.h **** typedef struct
1074:./inc/core_cm4.h **** {
1075:./inc/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1076:./inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1077:./inc/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1078:./inc/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1079:./inc/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1080:./inc/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1081:./inc/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1082:./inc/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1083:./inc/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1084:./inc/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1085:./inc/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1086:./inc/core_cm4.h **** } MPU_Type;
1087:./inc/core_cm4.h **** 
1088:./inc/core_cm4.h **** /* MPU Type Register */
1089:./inc/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1090:./inc/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1091:./inc/core_cm4.h **** 
1092:./inc/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1093:./inc/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1094:./inc/core_cm4.h **** 
1095:./inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1096:./inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1097:./inc/core_cm4.h **** 
1098:./inc/core_cm4.h **** /* MPU Control Register */
1099:./inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1100:./inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1101:./inc/core_cm4.h **** 
1102:./inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1103:./inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1104:./inc/core_cm4.h **** 
1105:./inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1106:./inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1107:./inc/core_cm4.h **** 
1108:./inc/core_cm4.h **** /* MPU Region Number Register */
1109:./inc/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1110:./inc/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1111:./inc/core_cm4.h **** 
1112:./inc/core_cm4.h **** /* MPU Region Base Address Register */
1113:./inc/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1114:./inc/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1115:./inc/core_cm4.h **** 
1116:./inc/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1117:./inc/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1118:./inc/core_cm4.h **** 
1119:./inc/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1120:./inc/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1121:./inc/core_cm4.h **** 
1122:./inc/core_cm4.h **** /* MPU Region Attribute and Size Register */
1123:./inc/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1124:./inc/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1125:./inc/core_cm4.h **** 
1126:./inc/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1127:./inc/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1128:./inc/core_cm4.h **** 
1129:./inc/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1130:./inc/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1131:./inc/core_cm4.h **** 
1132:./inc/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1133:./inc/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1134:./inc/core_cm4.h **** 
1135:./inc/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1136:./inc/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1137:./inc/core_cm4.h **** 
1138:./inc/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1139:./inc/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1140:./inc/core_cm4.h **** 
1141:./inc/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1142:./inc/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1143:./inc/core_cm4.h **** 
1144:./inc/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1145:./inc/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1146:./inc/core_cm4.h **** 
1147:./inc/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1148:./inc/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1149:./inc/core_cm4.h **** 
1150:./inc/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1151:./inc/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1152:./inc/core_cm4.h **** 
1153:./inc/core_cm4.h **** /*@} end of group CMSIS_MPU */
1154:./inc/core_cm4.h **** #endif
1155:./inc/core_cm4.h **** 
1156:./inc/core_cm4.h **** 
1157:./inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
1158:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1159:./inc/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1160:./inc/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1161:./inc/core_cm4.h ****   @{
1162:./inc/core_cm4.h ****  */
1163:./inc/core_cm4.h **** 
1164:./inc/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1165:./inc/core_cm4.h ****  */
1166:./inc/core_cm4.h **** typedef struct
1167:./inc/core_cm4.h **** {
1168:./inc/core_cm4.h ****        uint32_t RESERVED0[1];
1169:./inc/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1170:./inc/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1171:./inc/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1172:./inc/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1173:./inc/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1174:./inc/core_cm4.h **** } FPU_Type;
1175:./inc/core_cm4.h **** 
1176:./inc/core_cm4.h **** /* Floating-Point Context Control Register */
1177:./inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1178:./inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1179:./inc/core_cm4.h **** 
1180:./inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1181:./inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1182:./inc/core_cm4.h **** 
1183:./inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1184:./inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1185:./inc/core_cm4.h **** 
1186:./inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
1187:./inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1188:./inc/core_cm4.h **** 
1189:./inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1190:./inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1191:./inc/core_cm4.h **** 
1192:./inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1193:./inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1194:./inc/core_cm4.h **** 
1195:./inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1196:./inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1197:./inc/core_cm4.h **** 
1198:./inc/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1199:./inc/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1200:./inc/core_cm4.h **** 
1201:./inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1202:./inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
1203:./inc/core_cm4.h **** 
1204:./inc/core_cm4.h **** /* Floating-Point Context Address Register */
1205:./inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1206:./inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1207:./inc/core_cm4.h **** 
1208:./inc/core_cm4.h **** /* Floating-Point Default Status Control Register */
1209:./inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1210:./inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1211:./inc/core_cm4.h **** 
1212:./inc/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1213:./inc/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1214:./inc/core_cm4.h **** 
1215:./inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1216:./inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1217:./inc/core_cm4.h **** 
1218:./inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1219:./inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1220:./inc/core_cm4.h **** 
1221:./inc/core_cm4.h **** /* Media and FP Feature Register 0 */
1222:./inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1223:./inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1224:./inc/core_cm4.h **** 
1225:./inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1226:./inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1227:./inc/core_cm4.h **** 
1228:./inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1229:./inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1230:./inc/core_cm4.h **** 
1231:./inc/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1232:./inc/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1233:./inc/core_cm4.h **** 
1234:./inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1235:./inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1236:./inc/core_cm4.h **** 
1237:./inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1238:./inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1239:./inc/core_cm4.h **** 
1240:./inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1241:./inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1242:./inc/core_cm4.h **** 
1243:./inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
1244:./inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
1245:./inc/core_cm4.h **** 
1246:./inc/core_cm4.h **** /* Media and FP Feature Register 1 */
1247:./inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1248:./inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1249:./inc/core_cm4.h **** 
1250:./inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1251:./inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1252:./inc/core_cm4.h **** 
1253:./inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
1254:./inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1255:./inc/core_cm4.h **** 
1256:./inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1257:./inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
1258:./inc/core_cm4.h **** 
1259:./inc/core_cm4.h **** /*@} end of group CMSIS_FPU */
1260:./inc/core_cm4.h **** #endif
1261:./inc/core_cm4.h **** 
1262:./inc/core_cm4.h **** 
1263:./inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
1264:./inc/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1265:./inc/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
1266:./inc/core_cm4.h ****   @{
1267:./inc/core_cm4.h ****  */
1268:./inc/core_cm4.h **** 
1269:./inc/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1270:./inc/core_cm4.h ****  */
1271:./inc/core_cm4.h **** typedef struct
1272:./inc/core_cm4.h **** {
1273:./inc/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1274:./inc/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1275:./inc/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1276:./inc/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1277:./inc/core_cm4.h **** } CoreDebug_Type;
1278:./inc/core_cm4.h **** 
1279:./inc/core_cm4.h **** /* Debug Halting Control and Status Register */
1280:./inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1281:./inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1282:./inc/core_cm4.h **** 
1283:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1284:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1285:./inc/core_cm4.h **** 
1286:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1287:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1288:./inc/core_cm4.h **** 
1289:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1290:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1291:./inc/core_cm4.h **** 
1292:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1293:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1294:./inc/core_cm4.h **** 
1295:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1296:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1297:./inc/core_cm4.h **** 
1298:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1299:./inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1300:./inc/core_cm4.h **** 
1301:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1302:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1303:./inc/core_cm4.h **** 
1304:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1305:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1306:./inc/core_cm4.h **** 
1307:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1308:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1309:./inc/core_cm4.h **** 
1310:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1311:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1312:./inc/core_cm4.h **** 
1313:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1314:./inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1315:./inc/core_cm4.h **** 
1316:./inc/core_cm4.h **** /* Debug Core Register Selector Register */
1317:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1318:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1319:./inc/core_cm4.h **** 
1320:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1321:./inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1322:./inc/core_cm4.h **** 
1323:./inc/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1324:./inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1325:./inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1326:./inc/core_cm4.h **** 
1327:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1328:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1329:./inc/core_cm4.h **** 
1330:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1331:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1332:./inc/core_cm4.h **** 
1333:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1334:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1335:./inc/core_cm4.h **** 
1336:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1337:./inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1338:./inc/core_cm4.h **** 
1339:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1340:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1341:./inc/core_cm4.h **** 
1342:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1343:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1344:./inc/core_cm4.h **** 
1345:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1346:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1347:./inc/core_cm4.h **** 
1348:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1349:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1350:./inc/core_cm4.h **** 
1351:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1352:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1353:./inc/core_cm4.h **** 
1354:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1355:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1356:./inc/core_cm4.h **** 
1357:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1358:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1359:./inc/core_cm4.h **** 
1360:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1361:./inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1362:./inc/core_cm4.h **** 
1363:./inc/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1364:./inc/core_cm4.h **** 
1365:./inc/core_cm4.h **** 
1366:./inc/core_cm4.h **** /** \ingroup    CMSIS_core_register
1367:./inc/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
1368:./inc/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1369:./inc/core_cm4.h ****   @{
1370:./inc/core_cm4.h ****  */
1371:./inc/core_cm4.h **** 
1372:./inc/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1373:./inc/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1374:./inc/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1375:./inc/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1376:./inc/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1377:./inc/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1378:./inc/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1379:./inc/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1380:./inc/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1381:./inc/core_cm4.h **** 
1382:./inc/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1383:./inc/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1384:./inc/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1385:./inc/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1386:./inc/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1387:./inc/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1388:./inc/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1389:./inc/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1390:./inc/core_cm4.h **** 
1391:./inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
1392:./inc/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1393:./inc/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1394:./inc/core_cm4.h **** #endif
1395:./inc/core_cm4.h **** 
1396:./inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
1397:./inc/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1398:./inc/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1399:./inc/core_cm4.h **** #endif
1400:./inc/core_cm4.h **** 
1401:./inc/core_cm4.h **** /*@} */
1402:./inc/core_cm4.h **** 
1403:./inc/core_cm4.h **** 
1404:./inc/core_cm4.h **** 
1405:./inc/core_cm4.h **** /*******************************************************************************
1406:./inc/core_cm4.h ****  *                Hardware Abstraction Layer
1407:./inc/core_cm4.h ****   Core Function Interface contains:
1408:./inc/core_cm4.h ****   - Core NVIC Functions
1409:./inc/core_cm4.h ****   - Core SysTick Functions
1410:./inc/core_cm4.h ****   - Core Debug Functions
1411:./inc/core_cm4.h ****   - Core Register Access Functions
1412:./inc/core_cm4.h ****  ******************************************************************************/
1413:./inc/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1414:./inc/core_cm4.h **** */
1415:./inc/core_cm4.h **** 
1416:./inc/core_cm4.h **** 
1417:./inc/core_cm4.h **** 
1418:./inc/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1419:./inc/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1420:./inc/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1421:./inc/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1422:./inc/core_cm4.h ****     @{
1423:./inc/core_cm4.h ****  */
1424:./inc/core_cm4.h **** 
1425:./inc/core_cm4.h **** /** \brief  Set Priority Grouping
1426:./inc/core_cm4.h **** 
1427:./inc/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1428:./inc/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1429:./inc/core_cm4.h ****   Only values from 0..7 are used.
1430:./inc/core_cm4.h ****   In case of a conflict between priority grouping and available
1431:./inc/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1432:./inc/core_cm4.h **** 
1433:./inc/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1434:./inc/core_cm4.h ****  */
1435:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1436:./inc/core_cm4.h **** {
1437:./inc/core_cm4.h ****   uint32_t reg_value;
1438:./inc/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1439:./inc/core_cm4.h **** 
1440:./inc/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1441:./inc/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1442:./inc/core_cm4.h ****   reg_value  =  (reg_value                                 |
1443:./inc/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1444:./inc/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1445:./inc/core_cm4.h ****   SCB->AIRCR =  reg_value;
1446:./inc/core_cm4.h **** }
1447:./inc/core_cm4.h **** 
1448:./inc/core_cm4.h **** 
1449:./inc/core_cm4.h **** /** \brief  Get Priority Grouping
1450:./inc/core_cm4.h **** 
1451:./inc/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1452:./inc/core_cm4.h **** 
1453:./inc/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1454:./inc/core_cm4.h ****  */
1455:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1456:./inc/core_cm4.h **** {
1457:./inc/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1458:./inc/core_cm4.h **** }
1459:./inc/core_cm4.h **** 
1460:./inc/core_cm4.h **** 
1461:./inc/core_cm4.h **** /** \brief  Enable External Interrupt
1462:./inc/core_cm4.h **** 
1463:./inc/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1464:./inc/core_cm4.h **** 
1465:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1466:./inc/core_cm4.h ****  */
1467:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1468:./inc/core_cm4.h **** {
  25              		.loc 1 1468 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 0346     		mov	r3, r0
  41 0008 FB71     		strb	r3, [r7, #7]
1469:./inc/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1470:./inc/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
  42              		.loc 1 1470 0
  43 000a 4FF46143 		mov	r3, #57600
  44 000e CEF20003 		movt	r3, 57344
  45 0012 97F90720 		ldrsb	r2, [r7, #7]
  46 0016 4FEA5212 		lsr	r2, r2, #5
  47 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  48 001c 01F01F01 		and	r1, r1, #31
  49 0020 4FF00100 		mov	r0, #1
  50 0024 00FA01F1 		lsl	r1, r0, r1
  51 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1471:./inc/core_cm4.h **** }
  52              		.loc 1 1471 0
  53 002c 07F10C07 		add	r7, r7, #12
  54 0030 BD46     		mov	sp, r7
  55 0032 80BC     		pop	{r7}
  56 0034 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE97:
  60 0036 00BF     		.align	2
  61              		.thumb
  62              		.thumb_func
  64              	NVIC_SetPriority:
  65              	.LFB103:
1472:./inc/core_cm4.h **** 
1473:./inc/core_cm4.h **** 
1474:./inc/core_cm4.h **** /** \brief  Disable External Interrupt
1475:./inc/core_cm4.h **** 
1476:./inc/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1477:./inc/core_cm4.h **** 
1478:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1479:./inc/core_cm4.h ****  */
1480:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1481:./inc/core_cm4.h **** {
1482:./inc/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1483:./inc/core_cm4.h **** }
1484:./inc/core_cm4.h **** 
1485:./inc/core_cm4.h **** 
1486:./inc/core_cm4.h **** /** \brief  Get Pending Interrupt
1487:./inc/core_cm4.h **** 
1488:./inc/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1489:./inc/core_cm4.h ****     for the specified interrupt.
1490:./inc/core_cm4.h **** 
1491:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1492:./inc/core_cm4.h **** 
1493:./inc/core_cm4.h ****     \return             0  Interrupt status is not pending.
1494:./inc/core_cm4.h ****     \return             1  Interrupt status is pending.
1495:./inc/core_cm4.h ****  */
1496:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1497:./inc/core_cm4.h **** {
1498:./inc/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1499:./inc/core_cm4.h **** }
1500:./inc/core_cm4.h **** 
1501:./inc/core_cm4.h **** 
1502:./inc/core_cm4.h **** /** \brief  Set Pending Interrupt
1503:./inc/core_cm4.h **** 
1504:./inc/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1505:./inc/core_cm4.h **** 
1506:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1507:./inc/core_cm4.h ****  */
1508:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1509:./inc/core_cm4.h **** {
1510:./inc/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1511:./inc/core_cm4.h **** }
1512:./inc/core_cm4.h **** 
1513:./inc/core_cm4.h **** 
1514:./inc/core_cm4.h **** /** \brief  Clear Pending Interrupt
1515:./inc/core_cm4.h **** 
1516:./inc/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1517:./inc/core_cm4.h **** 
1518:./inc/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1519:./inc/core_cm4.h ****  */
1520:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1521:./inc/core_cm4.h **** {
1522:./inc/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1523:./inc/core_cm4.h **** }
1524:./inc/core_cm4.h **** 
1525:./inc/core_cm4.h **** 
1526:./inc/core_cm4.h **** /** \brief  Get Active Interrupt
1527:./inc/core_cm4.h **** 
1528:./inc/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1529:./inc/core_cm4.h **** 
1530:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1531:./inc/core_cm4.h **** 
1532:./inc/core_cm4.h ****     \return             0  Interrupt status is not active.
1533:./inc/core_cm4.h ****     \return             1  Interrupt status is active.
1534:./inc/core_cm4.h ****  */
1535:./inc/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1536:./inc/core_cm4.h **** {
1537:./inc/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1538:./inc/core_cm4.h **** }
1539:./inc/core_cm4.h **** 
1540:./inc/core_cm4.h **** 
1541:./inc/core_cm4.h **** /** \brief  Set Interrupt Priority
1542:./inc/core_cm4.h **** 
1543:./inc/core_cm4.h ****     The function sets the priority of an interrupt.
1544:./inc/core_cm4.h **** 
1545:./inc/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1546:./inc/core_cm4.h **** 
1547:./inc/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1548:./inc/core_cm4.h ****     \param [in]  priority  Priority to set.
1549:./inc/core_cm4.h ****  */
1550:./inc/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1551:./inc/core_cm4.h **** {
  66              		.loc 1 1551 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71 0038 80B4     		push	{r7}
  72              	.LCFI3:
  73              		.cfi_def_cfa_offset 4
  74              		.cfi_offset 7, -4
  75 003a 83B0     		sub	sp, sp, #12
  76              	.LCFI4:
  77              		.cfi_def_cfa_offset 16
  78 003c 00AF     		add	r7, sp, #0
  79              	.LCFI5:
  80              		.cfi_def_cfa_register 7
  81 003e 0346     		mov	r3, r0
  82 0040 3960     		str	r1, [r7, #0]
  83 0042 FB71     		strb	r3, [r7, #7]
1552:./inc/core_cm4.h ****   if(IRQn < 0) {
  84              		.loc 1 1552 0
  85 0044 97F90730 		ldrsb	r3, [r7, #7]
  86 0048 002B     		cmp	r3, #0
  87 004a 10DA     		bge	.L3
1553:./inc/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  88              		.loc 1 1553 0
  89 004c 4FF46D43 		mov	r3, #60672
  90 0050 CEF20003 		movt	r3, 57344
  91 0054 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  92 0056 02F00F02 		and	r2, r2, #15
  93 005a A2F10401 		sub	r1, r2, #4
  94 005e 3A68     		ldr	r2, [r7, #0]
  95 0060 D2B2     		uxtb	r2, r2
  96 0062 4FEAC202 		lsl	r2, r2, #3
  97 0066 D2B2     		uxtb	r2, r2
  98 0068 5B18     		adds	r3, r3, r1
  99 006a 1A76     		strb	r2, [r3, #24]
 100 006c 0DE0     		b	.L2
 101              	.L3:
1554:./inc/core_cm4.h ****   else {
1555:./inc/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 102              		.loc 1 1555 0
 103 006e 4FF46143 		mov	r3, #57600
 104 0072 CEF20003 		movt	r3, 57344
 105 0076 97F90710 		ldrsb	r1, [r7, #7]
 106 007a 3A68     		ldr	r2, [r7, #0]
 107 007c D2B2     		uxtb	r2, r2
 108 007e 4FEAC202 		lsl	r2, r2, #3
 109 0082 D2B2     		uxtb	r2, r2
 110 0084 5B18     		adds	r3, r3, r1
 111 0086 83F80023 		strb	r2, [r3, #768]
 112              	.L2:
1556:./inc/core_cm4.h **** }
 113              		.loc 1 1556 0
 114 008a 07F10C07 		add	r7, r7, #12
 115 008e BD46     		mov	sp, r7
 116 0090 80BC     		pop	{r7}
 117 0092 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE103:
 121              		.comm	TxQueueCAN1,256,8
 122              		.comm	RxQueueCAN1,128,8
 123              		.align	2
 124              		.global	CAN_UserWrite
 125              		.thumb
 126              		.thumb_func
 128              	CAN_UserWrite:
 129              	.LFB112:
 130              		.file 2 "src/can_user.c"
   1:src/can_user.c **** 
   2:src/can_user.c **** //------------------------------------------------------------------------------
   3:src/can_user.c **** //
   4:src/can_user.c **** //	Module       : can_user.c
   5:src/can_user.c **** //
   6:src/can_user.c **** //  Project      : PCAN-GPS
   7:src/can_user.c **** //
   8:src/can_user.c **** //  Version/Date : 1.2 , 10/2014
   9:src/can_user.c **** //
  10:src/can_user.c **** //  Copyright (c): PEAK-SYSTEM TECHNIK GMBH, DARMSTADT
  11:src/can_user.c **** //
  12:src/can_user.c **** //------------------------------------------------------------------------------
  13:src/can_user.c **** /*******************************************************************************
  14:src/can_user.c ****  include files
  15:src/can_user.c ****  ******************************************************************************/
  16:src/can_user.c **** //
  17:src/can_user.c **** // System header files
  18:src/can_user.c **** //
  19:src/can_user.c **** #include "math.h"
  20:src/can_user.c **** 
  21:src/can_user.c **** //
  22:src/can_user.c **** // Library header files
  23:src/can_user.c **** //
  24:src/can_user.c **** #include <system_LPC407x_8x_177x_8x.h>
  25:src/can_user.c **** #include <lpc407x_8x_177x_8x.h>
  26:src/can_user.c **** 
  27:src/can_user.c **** //
  28:src/can_user.c **** // Source code header files
  29:src/can_user.c **** //
  30:src/can_user.c **** #include "typedefs.h"
  31:src/can_user.c **** #include "hardware.h"
  32:src/can_user.c **** #include "timer.h"
  33:src/can_user.c **** #include "ssp.h"
  34:src/can_user.c **** #include "MEMS_BMC050.h"
  35:src/can_user.c **** #include "MEMS_L3GD20.h"
  36:src/can_user.c **** #include "MAX-7W.h"
  37:src/can_user.c **** #include "can.h"
  38:src/can_user.c **** #include "can_user.h"
  39:src/can_user.c **** #include "eeprom.h"
  40:src/can_user.c **** #include "crc.h"
  41:src/can_user.c **** #include "crc_data.h"
  42:src/can_user.c **** #include "rtc.h"
  43:src/can_user.c **** 
  44:src/can_user.c **** 
  45:src/can_user.c **** /*******************************************************************************
  46:src/can_user.c ****  global definitions
  47:src/can_user.c ****  ******************************************************************************/
  48:src/can_user.c **** extern S_CONFIG_DATA_t cfg_data;
  49:src/can_user.c **** 
  50:src/can_user.c **** /*******************************************************************************
  51:src/can_user.c ****  local definitions
  52:src/can_user.c ****  ******************************************************************************/
  53:src/can_user.c **** 
  54:src/can_user.c **** #define SYM_BMC_ACCELERATION	0x500
  55:src/can_user.c **** #define SYM_BMC_MAGNETIC_FIELD	0x501
  56:src/can_user.c **** 
  57:src/can_user.c **** #define SYM_L3GD_ROTATION_01	0x510
  58:src/can_user.c **** #define SYM_L3GD_ROTATION_02	0x511
  59:src/can_user.c **** 
  60:src/can_user.c **** #define SYM_GPS_STATUS			0x520
  61:src/can_user.c **** #define SYM_GPS_COURSE_SPEED	0x521
  62:src/can_user.c **** #define SYM_GPS_POS_LONGITUDE	0x522
  63:src/can_user.c **** #define SYM_GPS_POS_LATITUDE	0x523
  64:src/can_user.c **** #define SYM_GPS_POS_ALTITUDE	0x524
  65:src/can_user.c **** #define SYM_GPS_DELUSIONS_01	0x525
  66:src/can_user.c **** #define SYM_GPS_DELUSIONS_02	0x526
  67:src/can_user.c **** #define SYM_GPS_DATE_TIME		0x527
  68:src/can_user.c **** 
  69:src/can_user.c **** #define SYM_IO					0x530
  70:src/can_user.c **** 
  71:src/can_user.c **** #define SYM_RTC_TIME			0x540
  72:src/can_user.c **** 
  73:src/can_user.c **** 
  74:src/can_user.c **** #define SYM_OUT_IO				0x550
  75:src/can_user.c **** #define SYM_OUT_POWEROFF		0x551
  76:src/can_user.c **** #define SYM_OUT_GYRO			0x552
  77:src/can_user.c **** #define SYM_OUT_ACC_SCALE		0x553
  78:src/can_user.c **** #define SYM_OUT_SAVE_CFG		0x554
  79:src/can_user.c **** #define SYM_OUT_RTC_SET_TIME		0x555
  80:src/can_user.c **** #define SYM_OUT_RTC_ADOPT_GPS_TIME	0x556
  81:src/can_user.c **** #define SYM_OUT_ACC_FAST_CALIBRATION	0x557
  82:src/can_user.c **** 
  83:src/can_user.c **** #define INCOMING_CAN_ID_MIN	0x550
  84:src/can_user.c **** #define INCOMING_CAN_ID_MAX	0x557
  85:src/can_user.c **** 
  86:src/can_user.c **** 
  87:src/can_user.c **** #define STORE_ACC_COMPENSATION_PERMANENT 1
  88:src/can_user.c **** 
  89:src/can_user.c **** /*******************************************************************************
  90:src/can_user.c ****  local function prototypes
  91:src/can_user.c ****  ******************************************************************************/
  92:src/can_user.c **** #ifndef EEPROM_CFG_ADDR
  93:src/can_user.c **** #define EEPROM_CFG_ADDR 0x00
  94:src/can_user.c **** #endif
  95:src/can_user.c **** 
  96:src/can_user.c **** 
  97:src/can_user.c **** // Queues for CAN interface
  98:src/can_user.c **** CANMsg_t TxQueueCAN1[CAN_TX_QUEUE_SIZE];
  99:src/can_user.c **** CANMsg_t RxQueueCAN1[CAN_RX_QUEUE_SIZE];
 100:src/can_user.c **** 
 101:src/can_user.c **** /*******************************************************************************
 102:src/can_user.c ****  global functions
 103:src/can_user.c ****  ******************************************************************************/
 104:src/can_user.c **** 
 105:src/can_user.c **** 
 106:src/can_user.c **** //------------------------------------------------------------------------------
 107:src/can_user.c **** //! CANStatus_t CAN_UserWrite(CANMsg_t *pBuff)
 108:src/can_user.c **** //------------------------------------------------------------------------------
 109:src/can_user.c **** //! @brief	Send a message on CAN bus
 110:src/can_user.c **** //------------------------------------------------------------------------------
 111:src/can_user.c **** CANStatus_t CAN_UserWrite(CANMsg_t *pBuff){
 131              		.loc 2 111 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 16
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135 0094 80B5     		push	{r7, lr}
 136              	.LCFI6:
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 7, -8
 139              		.cfi_offset 14, -4
 140 0096 84B0     		sub	sp, sp, #16
 141              	.LCFI7:
 142              		.cfi_def_cfa_offset 24
 143 0098 00AF     		add	r7, sp, #0
 144              	.LCFI8:
 145              		.cfi_def_cfa_register 7
 146 009a 7860     		str	r0, [r7, #4]
 112:src/can_user.c **** 	CANStatus_t ret;
 113:src/can_user.c **** 	CANMsg_t *pMsg;
 114:src/can_user.c **** 
 115:src/can_user.c **** 	ret = CAN_ERR_OK;
 147              		.loc 2 115 0
 148 009c 4FF00103 		mov	r3, #1
 149 00a0 FB60     		str	r3, [r7, #12]
 116:src/can_user.c **** 
 117:src/can_user.c **** 	pMsg = CAN_TxQueueGetNext(CAN_HW_BUS2);
 150              		.loc 2 117 0
 151 00a2 4FF00100 		mov	r0, #1
 152 00a6 FFF7FEFF 		bl	CAN_TxQueueGetNext
 153 00aa B860     		str	r0, [r7, #8]
 118:src/can_user.c **** 
 119:src/can_user.c **** 	if (pMsg != NULL) {
 154              		.loc 2 119 0
 155 00ac BB68     		ldr	r3, [r7, #8]
 156 00ae 002B     		cmp	r3, #0
 157 00b0 19D0     		beq	.L6
 120:src/can_user.c **** 		pMsg->Id = pBuff->Id;
 158              		.loc 2 120 0
 159 00b2 7B68     		ldr	r3, [r7, #4]
 160 00b4 5A68     		ldr	r2, [r3, #4]
 161 00b6 BB68     		ldr	r3, [r7, #8]
 162 00b8 5A60     		str	r2, [r3, #4]
 121:src/can_user.c **** 		pMsg->Len = pBuff->Len;
 163              		.loc 2 121 0
 164 00ba 7B68     		ldr	r3, [r7, #4]
 165 00bc DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 166 00be BB68     		ldr	r3, [r7, #8]
 167 00c0 DA70     		strb	r2, [r3, #3]
 122:src/can_user.c **** 		pMsg->Type = pBuff->Type;
 168              		.loc 2 122 0
 169 00c2 7B68     		ldr	r3, [r7, #4]
 170 00c4 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 171 00c6 BB68     		ldr	r3, [r7, #8]
 172 00c8 9A70     		strb	r2, [r3, #2]
 123:src/can_user.c **** 
 124:src/can_user.c **** 		pMsg->Data.Data32[0] = pBuff->Data.Data32[0];
 173              		.loc 2 124 0
 174 00ca 7B68     		ldr	r3, [r7, #4]
 175 00cc 9A68     		ldr	r2, [r3, #8]
 176 00ce BB68     		ldr	r3, [r7, #8]
 177 00d0 9A60     		str	r2, [r3, #8]
 125:src/can_user.c **** 		pMsg->Data.Data32[1] = pBuff->Data.Data32[1];
 178              		.loc 2 125 0
 179 00d2 7B68     		ldr	r3, [r7, #4]
 180 00d4 DA68     		ldr	r2, [r3, #12]
 181 00d6 BB68     		ldr	r3, [r7, #8]
 182 00d8 DA60     		str	r2, [r3, #12]
 126:src/can_user.c **** 
 127:src/can_user.c **** 		// Send Msg
 128:src/can_user.c **** 		ret = CAN_TxQueueWriteNext(CAN_HW_BUS2);
 183              		.loc 2 128 0
 184 00da 4FF00100 		mov	r0, #1
 185 00de FFF7FEFF 		bl	CAN_TxQueueWriteNext
 186 00e2 F860     		str	r0, [r7, #12]
 187 00e4 02E0     		b	.L7
 188              	.L6:
 129:src/can_user.c **** 	} else {
 130:src/can_user.c **** 		// Tx Queue FULL
 131:src/can_user.c **** 		ret = CAN_ERR_FAIL;
 189              		.loc 2 131 0
 190 00e6 4FF00003 		mov	r3, #0
 191 00ea FB60     		str	r3, [r7, #12]
 192              	.L7:
 132:src/can_user.c **** 	}
 133:src/can_user.c **** 
 134:src/can_user.c **** 	return ret;
 193              		.loc 2 134 0
 194 00ec FB68     		ldr	r3, [r7, #12]
 135:src/can_user.c **** }
 195              		.loc 2 135 0
 196 00ee 1846     		mov	r0, r3
 197 00f0 07F11007 		add	r7, r7, #16
 198 00f4 BD46     		mov	sp, r7
 199 00f6 80BD     		pop	{r7, pc}
 200              		.cfi_endproc
 201              	.LFE112:
 203              		.align	2
 204              		.global	CAN_UserRead
 205              		.thumb
 206              		.thumb_func
 208              	CAN_UserRead:
 209              	.LFB113:
 136:src/can_user.c **** 
 137:src/can_user.c **** //------------------------------------------------------------------------------
 138:src/can_user.c **** //! u32_t CAN_UserRead(CANMsg_t *pBuff)
 139:src/can_user.c **** //------------------------------------------------------------------------------
 140:src/can_user.c **** //! @brief	Read message from CAN bus
 141:src/can_user.c **** //------------------------------------------------------------------------------
 142:src/can_user.c **** //! @return	 	1 is a message was read
 143:src/can_user.c **** //! 	 		0 otherwise
 144:src/can_user.c **** //------------------------------------------------------------------------------
 145:src/can_user.c **** u32_t CAN_UserRead(CANMsg_t *pBuff) {
 210              		.loc 2 145 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 16
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 00f8 80B5     		push	{r7, lr}
 215              	.LCFI9:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 00fa 84B0     		sub	sp, sp, #16
 220              	.LCFI10:
 221              		.cfi_def_cfa_offset 24
 222 00fc 00AF     		add	r7, sp, #0
 223              	.LCFI11:
 224              		.cfi_def_cfa_register 7
 225 00fe 7860     		str	r0, [r7, #4]
 146:src/can_user.c **** 	u32_t ret;
 147:src/can_user.c **** 	CANMsg_t *pMsg;
 148:src/can_user.c **** 
 149:src/can_user.c **** 	ret = 0;
 226              		.loc 2 149 0
 227 0100 4FF00003 		mov	r3, #0
 228 0104 FB60     		str	r3, [r7, #12]
 150:src/can_user.c **** 
 151:src/can_user.c **** 	pMsg = CAN_RxQueueGetNext(CAN_HW_BUS2);
 229              		.loc 2 151 0
 230 0106 4FF00100 		mov	r0, #1
 231 010a FFF7FEFF 		bl	CAN_RxQueueGetNext
 232 010e B860     		str	r0, [r7, #8]
 152:src/can_user.c **** 
 153:src/can_user.c **** 	if (pMsg != NULL) {
 233              		.loc 2 153 0
 234 0110 BB68     		ldr	r3, [r7, #8]
 235 0112 002B     		cmp	r3, #0
 236 0114 1AD0     		beq	.L10
 154:src/can_user.c **** 		pBuff->Id = pMsg->Id;
 237              		.loc 2 154 0
 238 0116 BB68     		ldr	r3, [r7, #8]
 239 0118 5A68     		ldr	r2, [r3, #4]
 240 011a 7B68     		ldr	r3, [r7, #4]
 241 011c 5A60     		str	r2, [r3, #4]
 155:src/can_user.c **** 		pBuff->Len = pMsg->Len;
 242              		.loc 2 155 0
 243 011e BB68     		ldr	r3, [r7, #8]
 244 0120 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 245 0122 7B68     		ldr	r3, [r7, #4]
 246 0124 DA70     		strb	r2, [r3, #3]
 156:src/can_user.c **** 		pBuff->Type = pMsg->Type;
 247              		.loc 2 156 0
 248 0126 BB68     		ldr	r3, [r7, #8]
 249 0128 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 250 012a 7B68     		ldr	r3, [r7, #4]
 251 012c 9A70     		strb	r2, [r3, #2]
 157:src/can_user.c **** 
 158:src/can_user.c **** 		pBuff->Data.Data32[0] = pMsg->Data.Data32[0];
 252              		.loc 2 158 0
 253 012e BB68     		ldr	r3, [r7, #8]
 254 0130 9A68     		ldr	r2, [r3, #8]
 255 0132 7B68     		ldr	r3, [r7, #4]
 256 0134 9A60     		str	r2, [r3, #8]
 159:src/can_user.c **** 		pBuff->Data.Data32[1] = pMsg->Data.Data32[1];
 257              		.loc 2 159 0
 258 0136 BB68     		ldr	r3, [r7, #8]
 259 0138 DA68     		ldr	r2, [r3, #12]
 260 013a 7B68     		ldr	r3, [r7, #4]
 261 013c DA60     		str	r2, [r3, #12]
 160:src/can_user.c **** 
 161:src/can_user.c **** 		CAN_RxQueueReadNext(CAN_HW_BUS2);
 262              		.loc 2 161 0
 263 013e 4FF00100 		mov	r0, #1
 264 0142 FFF7FEFF 		bl	CAN_RxQueueReadNext
 162:src/can_user.c **** 		ret = 1;
 265              		.loc 2 162 0
 266 0146 4FF00103 		mov	r3, #1
 267 014a FB60     		str	r3, [r7, #12]
 268              	.L10:
 163:src/can_user.c **** 	}
 164:src/can_user.c **** 
 165:src/can_user.c **** 	return ret;
 269              		.loc 2 165 0
 270 014c FB68     		ldr	r3, [r7, #12]
 166:src/can_user.c **** }
 271              		.loc 2 166 0
 272 014e 1846     		mov	r0, r3
 273 0150 07F11007 		add	r7, r7, #16
 274 0154 BD46     		mov	sp, r7
 275 0156 80BD     		pop	{r7, pc}
 276              		.cfi_endproc
 277              	.LFE113:
 279              		.align	2
 280              		.global	CAN_UserInit
 281              		.thumb
 282              		.thumb_func
 284              	CAN_UserInit:
 285              	.LFB114:
 167:src/can_user.c **** 
 168:src/can_user.c **** //------------------------------------------------------------------------------
 169:src/can_user.c **** //! void CAN_UserInit(void)
 170:src/can_user.c **** //------------------------------------------------------------------------------
 171:src/can_user.c **** //! @brief	Initializes CAN bus
 172:src/can_user.c **** //------------------------------------------------------------------------------
 173:src/can_user.c **** void CAN_UserInit(void) {
 286              		.loc 2 173 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290 0158 80B5     		push	{r7, lr}
 291              	.LCFI12:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 015a 00AF     		add	r7, sp, #0
 296              	.LCFI13:
 297              		.cfi_def_cfa_register 7
 174:src/can_user.c **** 
 175:src/can_user.c **** 	CAN_SetBusMode(CAN_HW_BUS2, BUS_OFF);					// CAN Bus On
 298              		.loc 2 175 0
 299 015c 4FF00100 		mov	r0, #1
 300 0160 4FF00101 		mov	r1, #1
 301 0164 FFF7FEFF 		bl	CAN_SetBusMode
 176:src/can_user.c **** 
 177:src/can_user.c **** 	//! init CAN interface
 178:src/can_user.c **** 	CAN_ReferenceTxQueue(CAN_HW_BUS2, &TxQueueCAN1[0], CAN_TX_QUEUE_SIZE);	// Reference above Arrays a
 302              		.loc 2 178 0
 303 0168 4FF00100 		mov	r0, #1
 304 016c 40F20001 		movw	r1, #:lower16:TxQueueCAN1
 305 0170 C0F20001 		movt	r1, #:upper16:TxQueueCAN1
 306 0174 4FF01002 		mov	r2, #16
 307 0178 FFF7FEFF 		bl	CAN_ReferenceTxQueue
 179:src/can_user.c **** 	CAN_ReferenceRxQueue(CAN_HW_BUS2, &RxQueueCAN1[0], CAN_RX_QUEUE_SIZE);
 308              		.loc 2 179 0
 309 017c 4FF00100 		mov	r0, #1
 310 0180 40F20001 		movw	r1, #:lower16:RxQueueCAN1
 311 0184 C0F20001 		movt	r1, #:upper16:RxQueueCAN1
 312 0188 4FF00802 		mov	r2, #8
 313 018c FFF7FEFF 		bl	CAN_ReferenceRxQueue
 180:src/can_user.c **** 
 181:src/can_user.c **** 	CAN_SetTimestampHandler(CAN_HW_BUS2, NULL);
 314              		.loc 2 181 0
 315 0190 4FF00100 		mov	r0, #1
 316 0194 4FF00001 		mov	r1, #0
 317 0198 FFF7FEFF 		bl	CAN_SetTimestampHandler
 182:src/can_user.c **** 
 183:src/can_user.c **** 	CAN_SetErrorLimit(CAN_HW_BUS2, STD_TX_ERRORLIMIT);
 318              		.loc 2 183 0
 319 019c 4FF00100 		mov	r0, #1
 320 01a0 4FF06001 		mov	r1, #96
 321 01a4 FFF7FEFF 		bl	CAN_SetErrorLimit
 184:src/can_user.c **** 
 185:src/can_user.c **** 	CAN_SetTxErrorCallback(CAN_HW_BUS2, NULL);	// Set ErrorLimit & Callbacks
 322              		.loc 2 185 0
 323 01a8 4FF00100 		mov	r0, #1
 324 01ac 4FF00001 		mov	r1, #0
 325 01b0 FFF7FEFF 		bl	CAN_SetTxErrorCallback
 186:src/can_user.c **** 	CAN_SetRxCallback(CAN_HW_BUS2, NULL);
 326              		.loc 2 186 0
 327 01b4 4FF00100 		mov	r0, #1
 328 01b8 4FF00001 		mov	r1, #0
 329 01bc FFF7FEFF 		bl	CAN_SetRxCallback
 187:src/can_user.c **** 
 188:src/can_user.c **** 	CAN_SetChannelInfo(CAN_HW_BUS2, NULL);					// Textinfo is NULL
 330              		.loc 2 188 0
 331 01c0 4FF00100 		mov	r0, #1
 332 01c4 4FF00001 		mov	r1, #0
 333 01c8 FFF7FEFF 		bl	CAN_SetChannelInfo
 189:src/can_user.c **** 
 190:src/can_user.c **** 	// Setup Filters
 191:src/can_user.c **** 	CAN_InitFilters();										// Clear Filter LUT
 334              		.loc 2 191 0
 335 01cc FFF7FEFF 		bl	CAN_InitFilters
 192:src/can_user.c **** 	CAN_SetFilterMode(AF_ON_BYPASS_ON);			// No Filters ( Bypassed)
 336              		.loc 2 192 0
 337 01d0 4FF00200 		mov	r0, #2
 338 01d4 FFF7FEFF 		bl	CAN_SetFilterMode
 193:src/can_user.c **** 
 194:src/can_user.c **** 	//! init CAN 
 195:src/can_user.c **** 	CAN_InitChannel(CAN_HW_BUS2, CAN_BAUD_500K);
 339              		.loc 2 195 0
 340 01d8 4FF00100 		mov	r0, #1
 341 01dc 4FF00F01 		mov	r1, #15
 342 01e0 C0F22A01 		movt	r1, 42
 343 01e4 FFF7FEFF 		bl	CAN_InitChannel
 196:src/can_user.c **** 
 197:src/can_user.c **** 	//! bring tranceivers into normal mode
 198:src/can_user.c **** 	CAN_SetTransceiverMode(CAN_HW_BUS2, CAN_TRANSCEIVER_MODE_NORMAL);
 344              		.loc 2 198 0
 345 01e8 4FF00100 		mov	r0, #1
 346 01ec 4FF00001 		mov	r1, #0
 347 01f0 FFF7FEFF 		bl	CAN_SetTransceiverMode
 199:src/can_user.c **** 
 200:src/can_user.c **** 	NVIC_SetPriority(CAN_IRQn, 0);
 348              		.loc 2 200 0
 349 01f4 4FF01900 		mov	r0, #25
 350 01f8 4FF00001 		mov	r1, #0
 351 01fc FFF71CFF 		bl	NVIC_SetPriority
 201:src/can_user.c **** 	NVIC_EnableIRQ(CAN_IRQn);
 352              		.loc 2 201 0
 353 0200 4FF01900 		mov	r0, #25
 354 0204 FFF7FCFE 		bl	NVIC_EnableIRQ
 202:src/can_user.c **** 
 203:src/can_user.c **** 	//! Busses on
 204:src/can_user.c **** 	CAN_SetBusMode(CAN_HW_BUS2, BUS_ON);					// CAN Bus On
 355              		.loc 2 204 0
 356 0208 4FF00100 		mov	r0, #1
 357 020c 4FF00001 		mov	r1, #0
 358 0210 FFF7FEFF 		bl	CAN_SetBusMode
 205:src/can_user.c **** 
 206:src/can_user.c **** 	return;
 359              		.loc 2 206 0
 360 0214 00BF     		nop
 207:src/can_user.c **** }
 361              		.loc 2 207 0
 362 0216 80BD     		pop	{r7, pc}
 363              		.cfi_endproc
 364              	.LFE114:
 366              		.align	2
 367              		.global	CAN_UserSendBMCData
 368              		.thumb
 369              		.thumb_func
 371              	CAN_UserSendBMCData:
 372              	.LFB115:
 208:src/can_user.c **** 
 209:src/can_user.c **** 
 210:src/can_user.c **** //------------------------------------------------------------------------------
 211:src/can_user.c **** //! void CAN_UserSendBMCData(void)
 212:src/can_user.c **** //------------------------------------------------------------------------------
 213:src/can_user.c **** //! @brief	Sends last read data of the BMC050 sensor
 214:src/can_user.c **** //------------------------------------------------------------------------------
 215:src/can_user.c **** void CAN_UserSendBMCData(void){
 373              		.loc 2 215 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 24
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0218 80B5     		push	{r7, lr}
 378              	.LCFI14:
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382 021a 86B0     		sub	sp, sp, #24
 383              	.LCFI15:
 384              		.cfi_def_cfa_offset 32
 385 021c 00AF     		add	r7, sp, #0
 386              	.LCFI16:
 387              		.cfi_def_cfa_register 7
 216:src/can_user.c **** 	CANMsg_t TxMsg;
 217:src/can_user.c **** 	u8_t tmp8u=0;
 388              		.loc 2 217 0
 389 021e 4FF00003 		mov	r3, #0
 390 0222 FB71     		strb	r3, [r7, #7]
 218:src/can_user.c **** 
 219:src/can_user.c **** 	TxMsg.Id  = SYM_BMC_ACCELERATION;
 391              		.loc 2 219 0
 392 0224 4FF4A063 		mov	r3, #1280
 393 0228 FB60     		str	r3, [r7, #12]
 220:src/can_user.c **** 	TxMsg.Len = 8;
 394              		.loc 2 220 0
 395 022a 4FF00803 		mov	r3, #8
 396 022e FB72     		strb	r3, [r7, #11]
 221:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 397              		.loc 2 221 0
 398 0230 4FF00003 		mov	r3, #0
 399 0234 BB72     		strb	r3, [r7, #10]
 222:src/can_user.c **** 	TxMsg.Data.Data16[0] = BMC050_Readings.Acceleration_X;
 400              		.loc 2 222 0
 401 0236 40F20003 		movw	r3, #:lower16:BMC050_Readings
 402 023a C0F20003 		movt	r3, #:upper16:BMC050_Readings
 403 023e 5B88     		ldrh	r3, [r3, #2]
 404 0240 9BB2     		uxth	r3, r3
 405 0242 3B82     		strh	r3, [r7, #16]	@ movhi
 223:src/can_user.c **** 	TxMsg.Data.Data16[1] = BMC050_Readings.Acceleration_Y;
 406              		.loc 2 223 0
 407 0244 40F20003 		movw	r3, #:lower16:BMC050_Readings
 408 0248 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 409 024c 9B88     		ldrh	r3, [r3, #4]
 410 024e 9BB2     		uxth	r3, r3
 411 0250 7B82     		strh	r3, [r7, #18]	@ movhi
 224:src/can_user.c **** 	TxMsg.Data.Data16[2] = BMC050_Readings.Acceleration_Z;
 412              		.loc 2 224 0
 413 0252 40F20003 		movw	r3, #:lower16:BMC050_Readings
 414 0256 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 415 025a DB88     		ldrh	r3, [r3, #6]
 416 025c 9BB2     		uxth	r3, r3
 417 025e BB82     		strh	r3, [r7, #20]	@ movhi
 225:src/can_user.c **** 	TxMsg.Data.Data8[6] = BMC050_Readings.Temperature;
 418              		.loc 2 225 0
 419 0260 40F20003 		movw	r3, #:lower16:BMC050_Readings
 420 0264 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 421 0268 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 422 026a BB75     		strb	r3, [r7, #22]
 226:src/can_user.c **** 	MEMS_BMC050_GetVertialAxis(&tmp8u);
 423              		.loc 2 226 0
 424 026c 07F10703 		add	r3, r7, #7
 425 0270 1846     		mov	r0, r3
 426 0272 FFF7FEFF 		bl	MEMS_BMC050_GetVertialAxis
 227:src/can_user.c **** 	TxMsg.Data.Data8[7] = (tmp8u&0x3) | (BMC050_Readings.orientation&0x7)<<2;
 427              		.loc 2 227 0
 428 0276 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 429 0278 DBB2     		uxtb	r3, r3
 430 027a 03F00303 		and	r3, r3, #3
 431 027e DAB2     		uxtb	r2, r3
 432 0280 40F20003 		movw	r3, #:lower16:BMC050_Readings
 433 0284 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 434 0288 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 435 028a 03F00703 		and	r3, r3, #7
 436 028e 4FEA8303 		lsl	r3, r3, #2
 437 0292 DBB2     		uxtb	r3, r3
 438 0294 1343     		orrs	r3, r3, r2
 439 0296 DBB2     		uxtb	r3, r3
 440 0298 DBB2     		uxtb	r3, r3
 441 029a FB75     		strb	r3, [r7, #23]
 228:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 442              		.loc 2 228 0
 443 029c 07F10803 		add	r3, r7, #8
 444 02a0 1846     		mov	r0, r3
 445 02a2 FFF7FEFF 		bl	CAN_UserWrite
 229:src/can_user.c **** 
 230:src/can_user.c **** 	TxMsg.Id  = SYM_BMC_MAGNETIC_FIELD;
 446              		.loc 2 230 0
 447 02a6 40F20153 		movw	r3, #1281
 448 02aa FB60     		str	r3, [r7, #12]
 231:src/can_user.c **** 	TxMsg.Len = 6;
 449              		.loc 2 231 0
 450 02ac 4FF00603 		mov	r3, #6
 451 02b0 FB72     		strb	r3, [r7, #11]
 232:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 452              		.loc 2 232 0
 453 02b2 4FF00003 		mov	r3, #0
 454 02b6 BB72     		strb	r3, [r7, #10]
 233:src/can_user.c **** 	TxMsg.Data.Data16[0] = BMC050_Readings.MagField_X;
 455              		.loc 2 233 0
 456 02b8 40F20003 		movw	r3, #:lower16:BMC050_Readings
 457 02bc C0F20003 		movt	r3, #:upper16:BMC050_Readings
 458 02c0 5B89     		ldrh	r3, [r3, #10]
 459 02c2 9BB2     		uxth	r3, r3
 460 02c4 3B82     		strh	r3, [r7, #16]	@ movhi
 234:src/can_user.c **** 	TxMsg.Data.Data16[1] = BMC050_Readings.MagField_Y;
 461              		.loc 2 234 0
 462 02c6 40F20003 		movw	r3, #:lower16:BMC050_Readings
 463 02ca C0F20003 		movt	r3, #:upper16:BMC050_Readings
 464 02ce 9B89     		ldrh	r3, [r3, #12]
 465 02d0 9BB2     		uxth	r3, r3
 466 02d2 7B82     		strh	r3, [r7, #18]	@ movhi
 235:src/can_user.c **** 	TxMsg.Data.Data16[2] = BMC050_Readings.MagField_Z;
 467              		.loc 2 235 0
 468 02d4 40F20003 		movw	r3, #:lower16:BMC050_Readings
 469 02d8 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 470 02dc DB89     		ldrh	r3, [r3, #14]
 471 02de 9BB2     		uxth	r3, r3
 472 02e0 BB82     		strh	r3, [r7, #20]	@ movhi
 236:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 473              		.loc 2 236 0
 474 02e2 07F10803 		add	r3, r7, #8
 475 02e6 1846     		mov	r0, r3
 476 02e8 FFF7FEFF 		bl	CAN_UserWrite
 237:src/can_user.c **** 
 238:src/can_user.c **** 	// allow task for reading new values
 239:src/can_user.c **** 	BMC050_Readings.data_valid = FALSE;
 477              		.loc 2 239 0
 478 02ec 40F20003 		movw	r3, #:lower16:BMC050_Readings
 479 02f0 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 480 02f4 4FF00002 		mov	r2, #0
 481 02f8 5A74     		strb	r2, [r3, #17]
 240:src/can_user.c **** 
 241:src/can_user.c **** 	return;
 242:src/can_user.c **** }
 482              		.loc 2 242 0
 483 02fa 07F11807 		add	r7, r7, #24
 484 02fe BD46     		mov	sp, r7
 485 0300 80BD     		pop	{r7, pc}
 486              		.cfi_endproc
 487              	.LFE115:
 489 0302 00BF     		.align	2
 490              		.global	CAN_UserSendL3GDData
 491              		.thumb
 492              		.thumb_func
 494              	CAN_UserSendL3GDData:
 495              	.LFB116:
 243:src/can_user.c **** 
 244:src/can_user.c **** //------------------------------------------------------------------------------
 245:src/can_user.c **** //! void CAN_UserSendL3GDData(void)
 246:src/can_user.c **** //------------------------------------------------------------------------------
 247:src/can_user.c **** //! @brief	Sends last read data of the L3GD20 sensor
 248:src/can_user.c **** //------------------------------------------------------------------------------
 249:src/can_user.c **** void CAN_UserSendL3GDData(void){
 496              		.loc 2 249 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500 0304 80B5     		push	{r7, lr}
 501              	.LCFI17:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 0306 84B0     		sub	sp, sp, #16
 506              	.LCFI18:
 507              		.cfi_def_cfa_offset 24
 508 0308 00AF     		add	r7, sp, #0
 509              	.LCFI19:
 510              		.cfi_def_cfa_register 7
 250:src/can_user.c **** 	CANMsg_t TxMsg;
 251:src/can_user.c **** 
 252:src/can_user.c **** 	TxMsg.Id = SYM_L3GD_ROTATION_01;
 511              		.loc 2 252 0
 512 030a 4FF4A263 		mov	r3, #1296
 513 030e 7B60     		str	r3, [r7, #4]
 253:src/can_user.c **** 	TxMsg.Len = 8;
 514              		.loc 2 253 0
 515 0310 4FF00803 		mov	r3, #8
 516 0314 FB70     		strb	r3, [r7, #3]
 254:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 517              		.loc 2 254 0
 518 0316 4FF00003 		mov	r3, #0
 519 031a BB70     		strb	r3, [r7, #2]
 255:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = L3GD20_Readings.Gyro_X;
 520              		.loc 2 255 0
 521 031c 40F20003 		movw	r3, #:lower16:L3GD20_Readings
 522 0320 C0F20003 		movt	r3, #:upper16:L3GD20_Readings
 523 0324 5B68     		ldr	r3, [r3, #4]	@ float
 524 0326 BB60     		str	r3, [r7, #8]	@ float
 256:src/can_user.c **** 	TxMsg.Data.DataFlt[1] = L3GD20_Readings.Gyro_Y;
 525              		.loc 2 256 0
 526 0328 40F20003 		movw	r3, #:lower16:L3GD20_Readings
 527 032c C0F20003 		movt	r3, #:upper16:L3GD20_Readings
 528 0330 9B68     		ldr	r3, [r3, #8]	@ float
 529 0332 FB60     		str	r3, [r7, #12]	@ float
 257:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 530              		.loc 2 257 0
 531 0334 3B46     		mov	r3, r7
 532 0336 1846     		mov	r0, r3
 533 0338 FFF7FEFF 		bl	CAN_UserWrite
 258:src/can_user.c **** 
 259:src/can_user.c **** 	TxMsg.Id = SYM_L3GD_ROTATION_02;
 534              		.loc 2 259 0
 535 033c 40F21153 		movw	r3, #1297
 536 0340 7B60     		str	r3, [r7, #4]
 260:src/can_user.c **** 	TxMsg.Len = 4;
 537              		.loc 2 260 0
 538 0342 4FF00403 		mov	r3, #4
 539 0346 FB70     		strb	r3, [r7, #3]
 261:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 540              		.loc 2 261 0
 541 0348 4FF00003 		mov	r3, #0
 542 034c BB70     		strb	r3, [r7, #2]
 262:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = L3GD20_Readings.Gyro_Z;
 543              		.loc 2 262 0
 544 034e 40F20003 		movw	r3, #:lower16:L3GD20_Readings
 545 0352 C0F20003 		movt	r3, #:upper16:L3GD20_Readings
 546 0356 DB68     		ldr	r3, [r3, #12]	@ float
 547 0358 BB60     		str	r3, [r7, #8]	@ float
 263:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 548              		.loc 2 263 0
 549 035a 3B46     		mov	r3, r7
 550 035c 1846     		mov	r0, r3
 551 035e FFF7FEFF 		bl	CAN_UserWrite
 264:src/can_user.c **** 
 265:src/can_user.c **** 	return;
 266:src/can_user.c **** }
 552              		.loc 2 266 0
 553 0362 07F11007 		add	r7, r7, #16
 554 0366 BD46     		mov	sp, r7
 555 0368 80BD     		pop	{r7, pc}
 556              		.cfi_endproc
 557              	.LFE116:
 559              		.global	__aeabi_fdiv
 560              		.global	__aeabi_f2d
 561              		.global	__aeabi_d2f
 562              		.global	__aeabi_fmul
 563              		.global	__aeabi_d2uiz
 564 036a 00BF     		.align	2
 565              		.global	CAN_UserSendGPSData
 566              		.thumb
 567              		.thumb_func
 569              	CAN_UserSendGPSData:
 570              	.LFB117:
 267:src/can_user.c **** 
 268:src/can_user.c **** //------------------------------------------------------------------------------
 269:src/can_user.c **** //! void CAN_UserSendGPSData(void)
 270:src/can_user.c **** //------------------------------------------------------------------------------
 271:src/can_user.c **** //! @brief	Sends latest GPS data
 272:src/can_user.c **** //------------------------------------------------------------------------------
 273:src/can_user.c **** void CAN_UserSendGPSData(void){
 571              		.loc 2 273 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 32
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575 036c 90B5     		push	{r4, r7, lr}
 576              	.LCFI20:
 577              		.cfi_def_cfa_offset 12
 578              		.cfi_offset 4, -12
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 036e 89B0     		sub	sp, sp, #36
 582              	.LCFI21:
 583              		.cfi_def_cfa_offset 48
 584 0370 00AF     		add	r7, sp, #0
 585              	.LCFI22:
 586              		.cfi_def_cfa_register 7
 274:src/can_user.c **** 	CANMsg_t TxMsg;
 275:src/can_user.c **** 	double frc_tmp, int_tmp;
 276:src/can_user.c **** 
 277:src/can_user.c **** 	TxMsg.Id = SYM_GPS_STATUS;
 587              		.loc 2 277 0
 588 0372 4FF4A463 		mov	r3, #1312
 589 0376 FB60     		str	r3, [r7, #12]
 278:src/can_user.c **** 	TxMsg.Len = 3;
 590              		.loc 2 278 0
 591 0378 4FF00303 		mov	r3, #3
 592 037c FB72     		strb	r3, [r7, #11]
 279:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 593              		.loc 2 279 0
 594 037e 4FF00003 		mov	r3, #0
 595 0382 BB72     		strb	r3, [r7, #10]
 280:src/can_user.c **** 	TxMsg.Data.Data8[0] = MAX7W_Readings.Gps_AntennaStatus; // (0=INIT, 1=DONTKNOW, 2=OK, 3=SHORT, 4=O
 596              		.loc 2 280 0
 597 0384 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 598 0388 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 599 038c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 600 038e 3B74     		strb	r3, [r7, #16]
 281:src/can_user.c **** 	TxMsg.Data.Data8[1] = MAX7W_Readings.Nav_NumSatellites;
 601              		.loc 2 281 0
 602 0390 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 603 0394 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 604 0398 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 605 039a 7B74     		strb	r3, [r7, #17]
 282:src/can_user.c **** 	TxMsg.Data.Data8[2] = MAX7W_Readings.Nav_Method;      	// None / 2D / 3D
 606              		.loc 2 282 0
 607 039c 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 608 03a0 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 609 03a4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 610 03a6 BB74     		strb	r3, [r7, #18]
 283:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 611              		.loc 2 283 0
 612 03a8 07F10803 		add	r3, r7, #8
 613 03ac 1846     		mov	r0, r3
 614 03ae FFF7FEFF 		bl	CAN_UserWrite
 284:src/can_user.c **** 
 285:src/can_user.c **** 	TxMsg.Id = SYM_GPS_COURSE_SPEED;
 615              		.loc 2 285 0
 616 03b2 40F22153 		movw	r3, #1313
 617 03b6 FB60     		str	r3, [r7, #12]
 286:src/can_user.c **** 	TxMsg.Len = 8;
 618              		.loc 2 286 0
 619 03b8 4FF00803 		mov	r3, #8
 620 03bc FB72     		strb	r3, [r7, #11]
 287:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 621              		.loc 2 287 0
 622 03be 4FF00003 		mov	r3, #0
 623 03c2 BB72     		strb	r3, [r7, #10]
 288:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = MAX7W_Readings.Nav_CourseOverGround;
 624              		.loc 2 288 0
 625 03c4 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 626 03c8 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 627 03cc 9B68     		ldr	r3, [r3, #8]	@ float
 628 03ce 3B61     		str	r3, [r7, #16]	@ float
 289:src/can_user.c **** 	TxMsg.Data.DataFlt[1] = MAX7W_Readings.Nav_SpeedOverGroundKmh;
 629              		.loc 2 289 0
 630 03d0 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 631 03d4 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 632 03d8 5B68     		ldr	r3, [r3, #4]	@ float
 633 03da 7B61     		str	r3, [r7, #20]	@ float
 290:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 634              		.loc 2 290 0
 635 03dc 07F10803 		add	r3, r7, #8
 636 03e0 1846     		mov	r0, r3
 637 03e2 FFF7FEFF 		bl	CAN_UserWrite
 291:src/can_user.c **** 
 292:src/can_user.c **** 	TxMsg.Id = SYM_GPS_POS_LONGITUDE;
 638              		.loc 2 292 0
 639 03e6 40F22253 		movw	r3, #1314
 640 03ea FB60     		str	r3, [r7, #12]
 293:src/can_user.c **** 	TxMsg.Len = 7;
 641              		.loc 2 293 0
 642 03ec 4FF00703 		mov	r3, #7
 643 03f0 FB72     		strb	r3, [r7, #11]
 294:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 644              		.loc 2 294 0
 645 03f2 4FF00003 		mov	r3, #0
 646 03f6 BB72     		strb	r3, [r7, #10]
 295:src/can_user.c **** 	frc_tmp = modf((MAX7W_Readings.Pos_Longitude/100), &int_tmp);
 647              		.loc 2 295 0
 648 03f8 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 649 03fc C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 650 0400 DB68     		ldr	r3, [r3, #12]	@ float
 651 0402 1846     		mov	r0, r3
 652 0404 7649     		ldr	r1, .L20	@ float
 653 0406 FFF7FEFF 		bl	__aeabi_fdiv
 654 040a 0346     		mov	r3, r0
 655 040c 1846     		mov	r0, r3
 656 040e FFF7FEFF 		bl	__aeabi_f2d
 657 0412 0246     		mov	r2, r0
 658 0414 0B46     		mov	r3, r1
 659 0416 3C46     		mov	r4, r7
 660 0418 1046     		mov	r0, r2
 661 041a 1946     		mov	r1, r3
 662 041c 2246     		mov	r2, r4
 663 041e FFF7FEFF 		bl	modf
 664 0422 C7E90601 		strd	r0, [r7, #24]
 296:src/can_user.c **** 	TxMsg.Data.DataFlt[0]= (float) frc_tmp*100;
 665              		.loc 2 296 0
 666 0426 D7E90601 		ldrd	r0, [r7, #24]
 667 042a FFF7FEFF 		bl	__aeabi_d2f
 668 042e 0346     		mov	r3, r0
 669 0430 1846     		mov	r0, r3
 670 0432 6B49     		ldr	r1, .L20	@ float
 671 0434 FFF7FEFF 		bl	__aeabi_fmul
 672 0438 0346     		mov	r3, r0
 673 043a 3B61     		str	r3, [r7, #16]	@ float
 297:src/can_user.c **** 	TxMsg.Data.Data16[2] = (u16_t)int_tmp;
 674              		.loc 2 297 0
 675 043c D7E90023 		ldrd	r2, [r7]
 676 0440 1046     		mov	r0, r2
 677 0442 1946     		mov	r1, r3
 678 0444 FFF7FEFF 		bl	__aeabi_d2uiz
 679 0448 0346     		mov	r3, r0
 680 044a 9BB2     		uxth	r3, r3
 681 044c BB82     		strh	r3, [r7, #20]	@ movhi
 298:src/can_user.c **** 	TxMsg.Data.Data8[6] = MAX7W_Readings.Pos_LongitudeIndEW;
 682              		.loc 2 298 0
 683 044e 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 684 0452 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 685 0456 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 686 0458 BB75     		strb	r3, [r7, #22]
 299:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 687              		.loc 2 299 0
 688 045a 07F10803 		add	r3, r7, #8
 689 045e 1846     		mov	r0, r3
 690 0460 FFF7FEFF 		bl	CAN_UserWrite
 300:src/can_user.c **** 
 301:src/can_user.c **** 	TxMsg.Id = SYM_GPS_POS_LATITUDE;
 691              		.loc 2 301 0
 692 0464 40F22353 		movw	r3, #1315
 693 0468 FB60     		str	r3, [r7, #12]
 302:src/can_user.c **** 	TxMsg.Len = 7;
 694              		.loc 2 302 0
 695 046a 4FF00703 		mov	r3, #7
 696 046e FB72     		strb	r3, [r7, #11]
 303:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 697              		.loc 2 303 0
 698 0470 4FF00003 		mov	r3, #0
 699 0474 BB72     		strb	r3, [r7, #10]
 304:src/can_user.c **** 	frc_tmp = modf((MAX7W_Readings.Pos_Latitude/100), &int_tmp);
 700              		.loc 2 304 0
 701 0476 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 702 047a C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 703 047e 5B69     		ldr	r3, [r3, #20]	@ float
 704 0480 1846     		mov	r0, r3
 705 0482 5749     		ldr	r1, .L20	@ float
 706 0484 FFF7FEFF 		bl	__aeabi_fdiv
 707 0488 0346     		mov	r3, r0
 708 048a 1846     		mov	r0, r3
 709 048c FFF7FEFF 		bl	__aeabi_f2d
 710 0490 0246     		mov	r2, r0
 711 0492 0B46     		mov	r3, r1
 712 0494 3C46     		mov	r4, r7
 713 0496 1046     		mov	r0, r2
 714 0498 1946     		mov	r1, r3
 715 049a 2246     		mov	r2, r4
 716 049c FFF7FEFF 		bl	modf
 717 04a0 C7E90601 		strd	r0, [r7, #24]
 305:src/can_user.c **** 	TxMsg.Data.DataFlt[0]= (float) frc_tmp*100;
 718              		.loc 2 305 0
 719 04a4 D7E90601 		ldrd	r0, [r7, #24]
 720 04a8 FFF7FEFF 		bl	__aeabi_d2f
 721 04ac 0346     		mov	r3, r0
 722 04ae 1846     		mov	r0, r3
 723 04b0 4B49     		ldr	r1, .L20	@ float
 724 04b2 FFF7FEFF 		bl	__aeabi_fmul
 725 04b6 0346     		mov	r3, r0
 726 04b8 3B61     		str	r3, [r7, #16]	@ float
 306:src/can_user.c **** 	TxMsg.Data.Data16[2] = (u16_t)int_tmp;
 727              		.loc 2 306 0
 728 04ba D7E90023 		ldrd	r2, [r7]
 729 04be 1046     		mov	r0, r2
 730 04c0 1946     		mov	r1, r3
 731 04c2 FFF7FEFF 		bl	__aeabi_d2uiz
 732 04c6 0346     		mov	r3, r0
 733 04c8 9BB2     		uxth	r3, r3
 734 04ca BB82     		strh	r3, [r7, #20]	@ movhi
 307:src/can_user.c **** 	TxMsg.Data.Data8[6] = MAX7W_Readings.Pos_LatitudeIndNS;
 735              		.loc 2 307 0
 736 04cc 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 737 04d0 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 738 04d4 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 739 04d6 BB75     		strb	r3, [r7, #22]
 308:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 740              		.loc 2 308 0
 741 04d8 07F10803 		add	r3, r7, #8
 742 04dc 1846     		mov	r0, r3
 743 04de FFF7FEFF 		bl	CAN_UserWrite
 309:src/can_user.c **** 
 310:src/can_user.c **** 	TxMsg.Id = SYM_GPS_POS_ALTITUDE;
 744              		.loc 2 310 0
 745 04e2 40F22453 		movw	r3, #1316
 746 04e6 FB60     		str	r3, [r7, #12]
 311:src/can_user.c **** 	TxMsg.Len = 4;
 747              		.loc 2 311 0
 748 04e8 4FF00403 		mov	r3, #4
 749 04ec FB72     		strb	r3, [r7, #11]
 312:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 750              		.loc 2 312 0
 751 04ee 4FF00003 		mov	r3, #0
 752 04f2 BB72     		strb	r3, [r7, #10]
 313:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = MAX7W_Readings.Pos_AltitudeOverSea;
 753              		.loc 2 313 0
 754 04f4 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 755 04f8 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 756 04fc DB69     		ldr	r3, [r3, #28]	@ float
 757 04fe 3B61     		str	r3, [r7, #16]	@ float
 314:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 758              		.loc 2 314 0
 759 0500 07F10803 		add	r3, r7, #8
 760 0504 1846     		mov	r0, r3
 761 0506 FFF7FEFF 		bl	CAN_UserWrite
 315:src/can_user.c **** 
 316:src/can_user.c **** 	TxMsg.Id = SYM_GPS_DELUSIONS_01;
 762              		.loc 2 316 0
 763 050a 40F22553 		movw	r3, #1317
 764 050e FB60     		str	r3, [r7, #12]
 317:src/can_user.c **** 	TxMsg.Len = 8;
 765              		.loc 2 317 0
 766 0510 4FF00803 		mov	r3, #8
 767 0514 FB72     		strb	r3, [r7, #11]
 318:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 768              		.loc 2 318 0
 769 0516 4FF00003 		mov	r3, #0
 770 051a BB72     		strb	r3, [r7, #10]
 319:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = MAX7W_Readings.PDOP;
 771              		.loc 2 319 0
 772 051c 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 773 0520 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 774 0524 1B6A     		ldr	r3, [r3, #32]	@ float
 775 0526 3B61     		str	r3, [r7, #16]	@ float
 320:src/can_user.c **** 	TxMsg.Data.DataFlt[1] = MAX7W_Readings.HDOP;
 776              		.loc 2 320 0
 777 0528 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 778 052c C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 779 0530 5B6A     		ldr	r3, [r3, #36]	@ float
 780 0532 7B61     		str	r3, [r7, #20]	@ float
 321:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 781              		.loc 2 321 0
 782 0534 07F10803 		add	r3, r7, #8
 783 0538 1846     		mov	r0, r3
 784 053a FFF7FEFF 		bl	CAN_UserWrite
 322:src/can_user.c **** 
 323:src/can_user.c **** 	TxMsg.Id = SYM_GPS_DELUSIONS_02;
 785              		.loc 2 323 0
 786 053e 40F22653 		movw	r3, #1318
 787 0542 FB60     		str	r3, [r7, #12]
 324:src/can_user.c **** 	TxMsg.Len = 4;
 788              		.loc 2 324 0
 789 0544 4FF00403 		mov	r3, #4
 790 0548 FB72     		strb	r3, [r7, #11]
 325:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 791              		.loc 2 325 0
 792 054a 4FF00003 		mov	r3, #0
 793 054e BB72     		strb	r3, [r7, #10]
 326:src/can_user.c **** 	TxMsg.Data.DataFlt[0] = MAX7W_Readings.VDOP;
 794              		.loc 2 326 0
 795 0550 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 796 0554 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 797 0558 9B6A     		ldr	r3, [r3, #40]	@ float
 798 055a 3B61     		str	r3, [r7, #16]	@ float
 327:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 799              		.loc 2 327 0
 800 055c 07F10803 		add	r3, r7, #8
 801 0560 1846     		mov	r0, r3
 802 0562 FFF7FEFF 		bl	CAN_UserWrite
 328:src/can_user.c **** 
 329:src/can_user.c **** 	TxMsg.Id = SYM_GPS_DATE_TIME;
 803              		.loc 2 329 0
 804 0566 40F22753 		movw	r3, #1319
 805 056a FB60     		str	r3, [r7, #12]
 330:src/can_user.c **** 	TxMsg.Len = 6;
 806              		.loc 2 330 0
 807 056c 4FF00603 		mov	r3, #6
 808 0570 FB72     		strb	r3, [r7, #11]
 331:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 809              		.loc 2 331 0
 810 0572 4FF00003 		mov	r3, #0
 811 0576 BB72     		strb	r3, [r7, #10]
 332:src/can_user.c **** 	TxMsg.Data.Data8[0] = MAX7W_Readings.Date_Year;
 812              		.loc 2 332 0
 813 0578 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 814 057c C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 815 0580 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 816 0584 3B74     		strb	r3, [r7, #16]
 333:src/can_user.c **** 	TxMsg.Data.Data8[1] = MAX7W_Readings.Date_Month;
 817              		.loc 2 333 0
 818 0586 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 819 058a C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 820 058e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 821 0592 7B74     		strb	r3, [r7, #17]
 334:src/can_user.c **** 	TxMsg.Data.Data8[2] = MAX7W_Readings.Date_DayOfMonth;
 822              		.loc 2 334 0
 823 0594 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 824 0598 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 825 059c 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 826 05a0 BB74     		strb	r3, [r7, #18]
 335:src/can_user.c **** 	TxMsg.Data.Data8[3] = MAX7W_Readings.Time_Hrs;
 827              		.loc 2 335 0
 828 05a2 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 829 05a6 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 830 05aa 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 831 05ae FB74     		strb	r3, [r7, #19]
 336:src/can_user.c **** 	TxMsg.Data.Data8[4] = MAX7W_Readings.Time_Min;
 832              		.loc 2 336 0
 833 05b0 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 834 05b4 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 835 05b8 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 836 05bc 3B75     		strb	r3, [r7, #20]
 337:src/can_user.c **** 	TxMsg.Data.Data8[5] = MAX7W_Readings.Time_Sec;
 837              		.loc 2 337 0
 838 05be 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 839 05c2 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 840 05c6 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 841 05ca 7B75     		strb	r3, [r7, #21]
 338:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 842              		.loc 2 338 0
 843 05cc 07F10803 		add	r3, r7, #8
 844 05d0 1846     		mov	r0, r3
 845 05d2 FFF7FEFF 		bl	CAN_UserWrite
 339:src/can_user.c **** 
 340:src/can_user.c **** 	return;
 341:src/can_user.c **** }
 846              		.loc 2 341 0
 847 05d6 07F12407 		add	r7, r7, #36
 848 05da BD46     		mov	sp, r7
 849 05dc 90BD     		pop	{r4, r7, pc}
 850              	.L21:
 851 05de 00BF     		.align	2
 852              	.L20:
 853 05e0 0000C842 		.word	1120403456
 854              		.cfi_endproc
 855              	.LFE117:
 857              		.align	2
 858              		.global	CAN_UserSendDioData
 859              		.thumb
 860              		.thumb_func
 862              	CAN_UserSendDioData:
 863              	.LFB118:
 342:src/can_user.c **** 
 343:src/can_user.c **** 
 344:src/can_user.c **** //------------------------------------------------------------------------------
 345:src/can_user.c **** //! void CAN_UserSendDioData(void)
 346:src/can_user.c **** //------------------------------------------------------------------------------
 347:src/can_user.c **** //! @brief	Sends current IO values
 348:src/can_user.c **** //------------------------------------------------------------------------------
 349:src/can_user.c **** void CAN_UserSendDioData(void){
 864              		.loc 2 349 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 24
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868 05e4 80B5     		push	{r7, lr}
 869              	.LCFI23:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 05e6 86B0     		sub	sp, sp, #24
 874              	.LCFI24:
 875              		.cfi_def_cfa_offset 32
 876 05e8 00AF     		add	r7, sp, #0
 877              	.LCFI25:
 878              		.cfi_def_cfa_register 7
 350:src/can_user.c **** 	CANMsg_t TxMsg;
 351:src/can_user.c **** 	u32_t tmp32=0;
 879              		.loc 2 351 0
 880 05ea 4FF00003 		mov	r3, #0
 881 05ee 7B60     		str	r3, [r7, #4]
 352:src/can_user.c **** 	u8_t tmp8=0;
 882              		.loc 2 352 0
 883 05f0 4FF00003 		mov	r3, #0
 884 05f4 FB70     		strb	r3, [r7, #3]
 353:src/can_user.c **** 
 354:src/can_user.c **** 	TxMsg.Id = SYM_IO;
 885              		.loc 2 354 0
 886 05f6 4FF4A663 		mov	r3, #1328
 887 05fa FB60     		str	r3, [r7, #12]
 355:src/can_user.c **** 	TxMsg.Len = 1;
 888              		.loc 2 355 0
 889 05fc 4FF00103 		mov	r3, #1
 890 0600 FB72     		strb	r3, [r7, #11]
 356:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 891              		.loc 2 356 0
 892 0602 4FF00003 		mov	r3, #0
 893 0606 BB72     		strb	r3, [r7, #10]
 357:src/can_user.c **** 	TxMsg.Data.Data8[0] = tmp8;
 894              		.loc 2 357 0
 895 0608 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 896 060a 3B74     		strb	r3, [r7, #16]
 358:src/can_user.c **** 
 359:src/can_user.c **** 	HW_GetDIN(&tmp32);
 897              		.loc 2 359 0
 898 060c 07F10403 		add	r3, r7, #4
 899 0610 1846     		mov	r0, r3
 900 0612 FFF7FEFF 		bl	HW_GetDIN
 360:src/can_user.c **** 	TxMsg.Data.Data8[0] = (u8_t) (tmp32&0x3);
 901              		.loc 2 360 0
 902 0616 7B68     		ldr	r3, [r7, #4]
 903 0618 DBB2     		uxtb	r3, r3
 904 061a 03F00303 		and	r3, r3, #3
 905 061e DBB2     		uxtb	r3, r3
 906 0620 3B74     		strb	r3, [r7, #16]
 361:src/can_user.c **** 
 362:src/can_user.c **** 	HW_GetDOUT(&tmp32);
 907              		.loc 2 362 0
 908 0622 07F10403 		add	r3, r7, #4
 909 0626 1846     		mov	r0, r3
 910 0628 FFF7FEFF 		bl	HW_GetDOUT
 363:src/can_user.c **** 	TxMsg.Data.Data8[0] |= (u8_t) (tmp32&0x1)<<2;
 911              		.loc 2 363 0
 912 062c 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 913 062e DAB2     		uxtb	r2, r3
 914 0630 7B68     		ldr	r3, [r7, #4]
 915 0632 DBB2     		uxtb	r3, r3
 916 0634 03F00103 		and	r3, r3, #1
 917 0638 4FEA8303 		lsl	r3, r3, #2
 918 063c DBB2     		uxtb	r3, r3
 919 063e 1343     		orrs	r3, r3, r2
 920 0640 DBB2     		uxtb	r3, r3
 921 0642 DBB2     		uxtb	r3, r3
 922 0644 3B74     		strb	r3, [r7, #16]
 364:src/can_user.c **** 
 365:src/can_user.c **** 	HW_SDCardPresent(&tmp8);
 923              		.loc 2 365 0
 924 0646 07F10303 		add	r3, r7, #3
 925 064a 1846     		mov	r0, r3
 926 064c FFF7FEFF 		bl	HW_SDCardPresent
 366:src/can_user.c **** 	TxMsg.Data.Data8[0] |= (tmp8&0x1)<<3;
 927              		.loc 2 366 0
 928 0650 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 929 0652 DAB2     		uxtb	r2, r3
 930 0654 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 931 0656 03F00103 		and	r3, r3, #1
 932 065a 4FEAC303 		lsl	r3, r3, #3
 933 065e DBB2     		uxtb	r3, r3
 934 0660 1343     		orrs	r3, r3, r2
 935 0662 DBB2     		uxtb	r3, r3
 936 0664 DBB2     		uxtb	r3, r3
 937 0666 3B74     		strb	r3, [r7, #16]
 367:src/can_user.c **** 
 368:src/can_user.c **** 	tmp8 = HW_GPS_GetPowerState();
 938              		.loc 2 368 0
 939 0668 FFF7FEFF 		bl	HW_GPS_GetPowerState
 940 066c 0346     		mov	r3, r0
 941 066e FB70     		strb	r3, [r7, #3]
 369:src/can_user.c **** 	TxMsg.Data.Data8[0] |= (tmp8&0x1)<<4;
 942              		.loc 2 369 0
 943 0670 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 944 0672 DAB2     		uxtb	r2, r3
 945 0674 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 946 0676 03F00103 		and	r3, r3, #1
 947 067a 4FEA0313 		lsl	r3, r3, #4
 948 067e DBB2     		uxtb	r3, r3
 949 0680 1343     		orrs	r3, r3, r2
 950 0682 DBB2     		uxtb	r3, r3
 951 0684 DBB2     		uxtb	r3, r3
 952 0686 3B74     		strb	r3, [r7, #16]
 370:src/can_user.c **** 
 371:src/can_user.c **** 	HW_GetModuleID(&tmp8);
 953              		.loc 2 371 0
 954 0688 07F10303 		add	r3, r7, #3
 955 068c 1846     		mov	r0, r3
 956 068e FFF7FEFF 		bl	HW_GetModuleID
 372:src/can_user.c **** 	TxMsg.Data.Data8[0] |= (tmp8&0x7)<<5;
 957              		.loc 2 372 0
 958 0692 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 959 0694 DAB2     		uxtb	r2, r3
 960 0696 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 961 0698 4FEA4313 		lsl	r3, r3, #5
 962 069c DBB2     		uxtb	r3, r3
 963 069e 1343     		orrs	r3, r3, r2
 964 06a0 DBB2     		uxtb	r3, r3
 965 06a2 DBB2     		uxtb	r3, r3
 966 06a4 3B74     		strb	r3, [r7, #16]
 373:src/can_user.c **** 
 374:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 967              		.loc 2 374 0
 968 06a6 07F10803 		add	r3, r7, #8
 969 06aa 1846     		mov	r0, r3
 970 06ac FFF7FEFF 		bl	CAN_UserWrite
 375:src/can_user.c **** 
 376:src/can_user.c **** 	return;
 377:src/can_user.c **** }
 971              		.loc 2 377 0
 972 06b0 07F11807 		add	r7, r7, #24
 973 06b4 BD46     		mov	sp, r7
 974 06b6 80BD     		pop	{r7, pc}
 975              		.cfi_endproc
 976              	.LFE118:
 978              		.align	2
 979              		.global	CAN_UserSendRTCTime
 980              		.thumb
 981              		.thumb_func
 983              	CAN_UserSendRTCTime:
 984              	.LFB119:
 378:src/can_user.c **** 
 379:src/can_user.c **** 
 380:src/can_user.c **** //------------------------------------------------------------------------------
 381:src/can_user.c **** //! void CAN_UserSendRTCTime(void)
 382:src/can_user.c **** //------------------------------------------------------------------------------
 383:src/can_user.c **** //! @brief	Sends current RTC time
 384:src/can_user.c **** //------------------------------------------------------------------------------
 385:src/can_user.c **** void CAN_UserSendRTCTime(void){
 985              		.loc 2 385 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 24
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989 06b8 80B5     		push	{r7, lr}
 990              	.LCFI26:
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 06ba 86B0     		sub	sp, sp, #24
 995              	.LCFI27:
 996              		.cfi_def_cfa_offset 32
 997 06bc 00AF     		add	r7, sp, #0
 998              	.LCFI28:
 999              		.cfi_def_cfa_register 7
 386:src/can_user.c **** 	RTC rtc;
 387:src/can_user.c **** 	CANMsg_t TxMsg;
 388:src/can_user.c **** 
 389:src/can_user.c ****  	rtc_gettime(&rtc);
 1000              		.loc 2 389 0
 1001 06be 07F11003 		add	r3, r7, #16
 1002 06c2 1846     		mov	r0, r3
 1003 06c4 FFF7FEFF 		bl	rtc_gettime
 390:src/can_user.c **** 
 391:src/can_user.c **** 	TxMsg.Id = SYM_RTC_TIME;
 1004              		.loc 2 391 0
 1005 06c8 4FF4A863 		mov	r3, #1344
 1006 06cc 7B60     		str	r3, [r7, #4]
 392:src/can_user.c **** 	TxMsg.Len = 8;
 1007              		.loc 2 392 0
 1008 06ce 4FF00803 		mov	r3, #8
 1009 06d2 FB70     		strb	r3, [r7, #3]
 393:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 1010              		.loc 2 393 0
 1011 06d4 4FF00003 		mov	r3, #0
 1012 06d8 BB70     		strb	r3, [r7, #2]
 394:src/can_user.c **** 	TxMsg.Data.Data8[0] = rtc.sec;
 1013              		.loc 2 394 0
 1014 06da FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1015 06dc 3B72     		strb	r3, [r7, #8]
 395:src/can_user.c **** 	TxMsg.Data.Data8[1] = rtc.min;
 1016              		.loc 2 395 0
 1017 06de BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 1018 06e0 7B72     		strb	r3, [r7, #9]
 396:src/can_user.c **** 	TxMsg.Data.Data8[2] = rtc.hour;
 1019              		.loc 2 396 0
 1020 06e2 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 1021 06e4 BB72     		strb	r3, [r7, #10]
 397:src/can_user.c **** 	TxMsg.Data.Data8[3] = rtc.wday;
 1022              		.loc 2 397 0
 1023 06e6 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 1024 06e8 FB72     		strb	r3, [r7, #11]
 398:src/can_user.c **** 	TxMsg.Data.Data8[4] = rtc.mday;
 1025              		.loc 2 398 0
 1026 06ea FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1027 06ec 3B73     		strb	r3, [r7, #12]
 399:src/can_user.c **** 	TxMsg.Data.Data8[5] = rtc.month;
 1028              		.loc 2 399 0
 1029 06ee BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 1030 06f0 7B73     		strb	r3, [r7, #13]
 400:src/can_user.c **** 	TxMsg.Data.Data16[3] = rtc.year;
 1031              		.loc 2 400 0
 1032 06f2 3B8A     		ldrh	r3, [r7, #16]
 1033 06f4 FB81     		strh	r3, [r7, #14]	@ movhi
 401:src/can_user.c **** 
 402:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1034              		.loc 2 402 0
 1035 06f6 3B46     		mov	r3, r7
 1036 06f8 1846     		mov	r0, r3
 1037 06fa FFF7FEFF 		bl	CAN_UserWrite
 403:src/can_user.c **** 
 404:src/can_user.c **** 	return;
 405:src/can_user.c **** }
 1038              		.loc 2 405 0
 1039 06fe 07F11807 		add	r7, r7, #24
 1040 0702 BD46     		mov	sp, r7
 1041 0704 80BD     		pop	{r7, pc}
 1042              		.cfi_endproc
 1043              	.LFE119:
 1045              		.section	.rodata
 1046              		.align	2
 1047              	.LC0:
 1048 0000 FFFFFFFF 		.word	-1
 1049 0004 02       		.byte	2
 1050 0005 01       		.byte	1
 1051 0006 01       		.byte	1
 1052 0007 00       		.byte	0
 1053 0008 01       		.byte	1
 1054 0009 000000   		.space	3
 1055              		.text
 1056 0706 00BF     		.align	2
 1057              		.global	CAN_UserProcessMsg
 1058              		.thumb
 1059              		.thumb_func
 1061              	CAN_UserProcessMsg:
 1062              	.LFB120:
 406:src/can_user.c **** 
 407:src/can_user.c **** 
 408:src/can_user.c **** 
 409:src/can_user.c **** //------------------------------------------------------------------------------
 410:src/can_user.c **** //! void CAN_UserProcessMsg(void)
 411:src/can_user.c **** //------------------------------------------------------------------------------
 412:src/can_user.c **** //! @brief	Processes incoming CAN messages
 413:src/can_user.c **** //------------------------------------------------------------------------------
 414:src/can_user.c **** void CAN_UserProcessMsg(void){
 1063              		.loc 2 414 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 48
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067 0708 90B5     		push	{r4, r7, lr}
 1068              	.LCFI29:
 1069              		.cfi_def_cfa_offset 12
 1070              		.cfi_offset 4, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 070a 8DB0     		sub	sp, sp, #52
 1074              	.LCFI30:
 1075              		.cfi_def_cfa_offset 64
 1076 070c 00AF     		add	r7, sp, #0
 1077              	.LCFI31:
 1078              		.cfi_def_cfa_register 7
 415:src/can_user.c **** 	RTC rtc;
 416:src/can_user.c **** 	CANMsg_t msg;
 417:src/can_user.c **** 	u8_t res=0;
 1079              		.loc 2 417 0
 1080 070e 4FF00003 		mov	r3, #0
 1081 0712 87F82F30 		strb	r3, [r7, #47]
 418:src/can_user.c **** 	static u8_t toggle_led=0;
 419:src/can_user.c **** 	CRCInit_t cfg= CRC32_CONFIG;
 1082              		.loc 2 419 0
 1083 0716 40F20003 		movw	r3, #:lower16:.LC0
 1084 071a C0F20003 		movt	r3, #:upper16:.LC0
 1085 071e 07F10404 		add	r4, r7, #4
 1086 0722 93E80700 		ldmia	r3, {r0, r1, r2}
 1087 0726 84E80700 		stmia	r4, {r0, r1, r2}
 420:src/can_user.c **** 	u32_t cnt=0;
 1088              		.loc 2 420 0
 1089 072a 4FF00003 		mov	r3, #0
 1090 072e BB62     		str	r3, [r7, #40]
 421:src/can_user.c **** 
 422:src/can_user.c **** 
 423:src/can_user.c **** 	res = CAN_UserRead(&msg);
 1091              		.loc 2 423 0
 1092 0730 07F11003 		add	r3, r7, #16
 1093 0734 1846     		mov	r0, r3
 1094 0736 FFF7FEFF 		bl	CAN_UserRead
 1095 073a 0346     		mov	r3, r0
 1096 073c 87F82F30 		strb	r3, [r7, #47]
 424:src/can_user.c **** 	if(!res)
 1097              		.loc 2 424 0
 1098 0740 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1099 0744 002B     		cmp	r3, #0
 1100 0746 00F07481 		beq	.L26
 425:src/can_user.c **** 		return;
 426:src/can_user.c **** 
 427:src/can_user.c **** 	if(toggle_led){
 1101              		.loc 2 427 0
 1102 074a 40F20003 		movw	r3, #:lower16:toggle_led.7204
 1103 074e C0F20003 		movt	r3, #:upper16:toggle_led.7204
 1104 0752 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1105 0754 002B     		cmp	r3, #0
 1106 0756 0DD0     		beq	.L28
 428:src/can_user.c **** 		HW_SetLED (HW_LED_STATUS_2, HW_LED_GREEN);
 1107              		.loc 2 428 0
 1108 0758 4FF00200 		mov	r0, #2
 1109 075c 4FF00201 		mov	r1, #2
 1110 0760 FFF7FEFF 		bl	HW_SetLED
 429:src/can_user.c **** 		toggle_led = 0;
 1111              		.loc 2 429 0
 1112 0764 40F20003 		movw	r3, #:lower16:toggle_led.7204
 1113 0768 C0F20003 		movt	r3, #:upper16:toggle_led.7204
 1114 076c 4FF00002 		mov	r2, #0
 1115 0770 1A70     		strb	r2, [r3, #0]
 1116 0772 0CE0     		b	.L29
 1117              	.L28:
 430:src/can_user.c **** 	}else{
 431:src/can_user.c **** 		HW_SetLED (HW_LED_STATUS_2, HW_LED_ORANGE);
 1118              		.loc 2 431 0
 1119 0774 4FF00200 		mov	r0, #2
 1120 0778 4FF00301 		mov	r1, #3
 1121 077c FFF7FEFF 		bl	HW_SetLED
 432:src/can_user.c **** 		toggle_led = 1;
 1122              		.loc 2 432 0
 1123 0780 40F20003 		movw	r3, #:lower16:toggle_led.7204
 1124 0784 C0F20003 		movt	r3, #:upper16:toggle_led.7204
 1125 0788 4FF00102 		mov	r2, #1
 1126 078c 1A70     		strb	r2, [r3, #0]
 1127              	.L29:
 433:src/can_user.c **** 	}
 434:src/can_user.c **** 
 435:src/can_user.c **** 	if(msg.Id<INCOMING_CAN_ID_MIN || msg.Id>INCOMING_CAN_ID_MAX)
 1128              		.loc 2 435 0
 1129 078e 7A69     		ldr	r2, [r7, #20]
 1130 0790 40F24F53 		movw	r3, #1359
 1131 0794 9A42     		cmp	r2, r3
 1132 0796 40F24C81 		bls	.L26
 1133              		.loc 2 435 0 is_stmt 0 discriminator 1
 1134 079a 7A69     		ldr	r2, [r7, #20]
 1135 079c 40F25753 		movw	r3, #1367
 1136 07a0 9A42     		cmp	r2, r3
 1137 07a2 00F24681 		bhi	.L26
 436:src/can_user.c **** 		return;
 437:src/can_user.c **** 
 438:src/can_user.c **** 	switch(msg.Id){
 1138              		.loc 2 438 0 is_stmt 1
 1139 07a6 7B69     		ldr	r3, [r7, #20]
 1140 07a8 A3F5AA63 		sub	r3, r3, #1360
 1141 07ac 072B     		cmp	r3, #7
 1142 07ae 00F22F81 		bhi	.L52
 1143 07b2 01A2     		adr	r2, .L39
 1144 07b4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1145              		.align	2
 1146              	.L39:
 1147 07b8 D9070000 		.word	.L31+1
 1148 07bc 01080000 		.word	.L32+1
 1149 07c0 13080000 		.word	.L33+1
 1150 07c4 23080000 		.word	.L34+1
 1151 07c8 33080000 		.word	.L35+1
 1152 07cc 09090000 		.word	.L36+1
 1153 07d0 3D090000 		.word	.L37+1
 1154 07d4 DF090000 		.word	.L38+1
 1155              	.L31:
 439:src/can_user.c **** 	case SYM_OUT_IO:
 440:src/can_user.c **** 		HW_SetDOUTn(HW_DOUT_1, (msg.Data.Data8[0] & 0x01));
 1156              		.loc 2 440 0
 1157 07d8 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1158 07da 03F00103 		and	r3, r3, #1
 1159 07de DBB2     		uxtb	r3, r3
 1160 07e0 4FF00000 		mov	r0, #0
 1161 07e4 1946     		mov	r1, r3
 1162 07e6 FFF7FEFF 		bl	HW_SetDOUTn
 441:src/can_user.c **** 
 442:src/can_user.c **** 		if (msg.Data.Data8[0] & 0x02)
 1163              		.loc 2 442 0
 1164 07ea 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1165 07ec 03F00203 		and	r3, r3, #2
 1166 07f0 002B     		cmp	r3, #0
 1167 07f2 02D0     		beq	.L40
 443:src/can_user.c **** 			HW_GPS_PowerOn();
 1168              		.loc 2 443 0
 1169 07f4 FFF7FEFF 		bl	HW_GPS_PowerOn
 444:src/can_user.c **** 		else
 445:src/can_user.c **** 			HW_GPS_PowerOff();
 446:src/can_user.c **** 		break;
 1170              		.loc 2 446 0
 1171 07f8 1BE1     		b	.L26
 1172              	.L40:
 445:src/can_user.c **** 			HW_GPS_PowerOff();
 1173              		.loc 2 445 0
 1174 07fa FFF7FEFF 		bl	HW_GPS_PowerOff
 1175              		.loc 2 446 0
 1176 07fe 18E1     		b	.L26
 1177              	.L32:
 447:src/can_user.c **** 
 448:src/can_user.c **** 	case SYM_OUT_POWEROFF:
 449:src/can_user.c **** 		if(msg.Data.Data8[0]&0x01)
 1178              		.loc 2 449 0
 1179 0800 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1180 0802 03F00103 		and	r3, r3, #1
 1181 0806 002B     		cmp	r3, #0
 1182 0808 00F00481 		beq	.L53
 450:src/can_user.c **** 			HW_SwitchOFF();
 1183              		.loc 2 450 0
 1184 080c FFF7FEFF 		bl	HW_SwitchOFF
 451:src/can_user.c **** 		break;
 1185              		.loc 2 451 0
 1186 0810 00E1     		b	.L53
 1187              	.L33:
 452:src/can_user.c **** 
 453:src/can_user.c **** 	case SYM_OUT_GYRO:
 454:src/can_user.c **** 		MEMS_L3GD20_SetRange(msg.Data.Data8[0]&0x03);
 1188              		.loc 2 454 0
 1189 0812 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1190 0814 03F00303 		and	r3, r3, #3
 1191 0818 DBB2     		uxtb	r3, r3
 1192 081a 1846     		mov	r0, r3
 1193 081c FFF7FEFF 		bl	MEMS_L3GD20_SetRange
 455:src/can_user.c **** 		break;
 1194              		.loc 2 455 0
 1195 0820 07E1     		b	.L26
 1196              	.L34:
 456:src/can_user.c **** 
 457:src/can_user.c **** 	case SYM_OUT_ACC_SCALE:
 458:src/can_user.c **** 		MEMS_BMC050_SetAccRange(msg.Data.Data8[0]&0x7);
 1197              		.loc 2 458 0
 1198 0822 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1199 0824 03F00703 		and	r3, r3, #7
 1200 0828 DBB2     		uxtb	r3, r3
 1201 082a 1846     		mov	r0, r3
 1202 082c FFF7FEFF 		bl	MEMS_BMC050_SetAccRange
 459:src/can_user.c **** 		break;
 1203              		.loc 2 459 0
 1204 0830 FFE0     		b	.L26
 1205              	.L35:
 460:src/can_user.c **** 
 461:src/can_user.c **** 	case SYM_OUT_SAVE_CFG:
 462:src/can_user.c **** 		// only write configuration if LSB in lowest byte is set
 463:src/can_user.c **** 		if(!(msg.Data.Data8[0]&0x1))
 1206              		.loc 2 463 0
 1207 0832 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1208 0834 03F00103 		and	r3, r3, #1
 1209 0838 002B     		cmp	r3, #0
 1210 083a 00F0ED80 		beq	.L54
 1211              	.L44:
 464:src/can_user.c **** 			break;
 465:src/can_user.c **** 
 466:src/can_user.c **** 		MEMS_BMC050_GetAccCalTargets(	&cfg_data.Acc.cmp_target_x,
 1212              		.loc 2 466 0
 1213 083e 40F20000 		movw	r0, #:lower16:cfg_data
 1214 0842 C0F20000 		movt	r0, #:upper16:cfg_data
 1215 0846 7D49     		ldr	r1, .L61
 1216 0848 7D4A     		ldr	r2, .L61+4
 1217 084a FFF7FEFF 		bl	MEMS_BMC050_GetAccCalTargets
 467:src/can_user.c **** 										&cfg_data.Acc.cmp_target_y,
 468:src/can_user.c **** 										&cfg_data.Acc.cmp_target_z);
 469:src/can_user.c **** 		MEMS_BMC050_GetAccRange(&cfg_data.Acc.range);
 1218              		.loc 2 469 0
 1219 084e 7D48     		ldr	r0, .L61+8
 1220 0850 FFF7FEFF 		bl	MEMS_BMC050_GetAccRange
 470:src/can_user.c **** #if STORE_ACC_COMPENSATION_PERMANENT
 471:src/can_user.c **** 		cfg_data.Acc.flags |= ACC_USE_EEPROM_RAW_COMPENSATION_VALUES;
 1221              		.loc 2 471 0
 1222 0854 40F20003 		movw	r3, #:lower16:cfg_data
 1223 0858 C0F20003 		movt	r3, #:upper16:cfg_data
 1224 085c 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1225 085e 43F00103 		orr	r3, r3, #1
 1226 0862 DAB2     		uxtb	r2, r3
 1227 0864 40F20003 		movw	r3, #:lower16:cfg_data
 1228 0868 C0F20003 		movt	r3, #:upper16:cfg_data
 1229 086c 9A72     		strb	r2, [r3, #10]
 472:src/can_user.c **** 		cfg_data.Acc.flags |= ACC_USE_EEPROM_FILT_COMPENSATION_VALUES;
 1230              		.loc 2 472 0
 1231 086e 40F20003 		movw	r3, #:lower16:cfg_data
 1232 0872 C0F20003 		movt	r3, #:upper16:cfg_data
 1233 0876 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1234 0878 43F00203 		orr	r3, r3, #2
 1235 087c DAB2     		uxtb	r2, r3
 1236 087e 40F20003 		movw	r3, #:lower16:cfg_data
 1237 0882 C0F20003 		movt	r3, #:upper16:cfg_data
 1238 0886 9A72     		strb	r2, [r3, #10]
 473:src/can_user.c **** 
 474:src/can_user.c **** 		MEMS_BMC050_GetAccCalFiltValues(&cfg_data.Acc.cmp_filt_x,
 1239              		.loc 2 474 0
 1240 0888 6F48     		ldr	r0, .L61+12
 1241 088a 7049     		ldr	r1, .L61+16
 1242 088c 704A     		ldr	r2, .L61+20
 1243 088e FFF7FEFF 		bl	MEMS_BMC050_GetAccCalFiltValues
 475:src/can_user.c **** 										&cfg_data.Acc.cmp_filt_y,
 476:src/can_user.c **** 										&cfg_data.Acc.cmp_filt_z);
 477:src/can_user.c **** 		MEMS_BMC050_GetAccCalRawValues(	&cfg_data.Acc.cmp_raw_x,
 1244              		.loc 2 477 0
 1245 0892 7048     		ldr	r0, .L61+24
 1246 0894 7049     		ldr	r1, .L61+28
 1247 0896 714A     		ldr	r2, .L61+32
 1248 0898 FFF7FEFF 		bl	MEMS_BMC050_GetAccCalRawValues
 478:src/can_user.c **** 										&cfg_data.Acc.cmp_raw_y,
 479:src/can_user.c **** 										&cfg_data.Acc.cmp_raw_z);
 480:src/can_user.c **** #else
 481:src/can_user.c **** 		cfg_data.Acc.flags = 0;
 482:src/can_user.c **** #endif
 483:src/can_user.c **** 
 484:src/can_user.c **** 		MEMS_L3GD20_GetRange(&cfg_data.Gyro.range);
 1249              		.loc 2 484 0
 1250 089c 7048     		ldr	r0, .L61+36
 1251 089e FFF7FEFF 		bl	MEMS_L3GD20_GetRange
 485:src/can_user.c **** 
 486:src/can_user.c **** 		res = CRC_Init(&cfg);
 1252              		.loc 2 486 0
 1253 08a2 07F10403 		add	r3, r7, #4
 1254 08a6 1846     		mov	r0, r3
 1255 08a8 FFF7FEFF 		bl	CRC_Init
 1256 08ac 0346     		mov	r3, r0
 1257 08ae 87F82F30 		strb	r3, [r7, #47]
 487:src/can_user.c **** 		if(res != CRC_ERR_OK)
 1258              		.loc 2 487 0
 1259 08b2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1260 08b6 002B     		cmp	r3, #0
 1261 08b8 40F0B080 		bne	.L55
 1262              	.L45:
 488:src/can_user.c **** 			break;
 489:src/can_user.c **** 
 490:src/can_user.c **** 		cnt = sizeof(cfg_data)-sizeofmember(S_CONFIG_DATA_t, crc32);
 1263              		.loc 2 490 0
 1264 08bc 4FF02003 		mov	r3, #32
 1265 08c0 BB62     		str	r3, [r7, #40]
 491:src/can_user.c **** 		res = CRC_CalcCRC((void*) &cfg_data, cnt, t_crc_8_bit, &cfg_data.crc32);
 1266              		.loc 2 491 0
 1267 08c2 40F20000 		movw	r0, #:lower16:cfg_data
 1268 08c6 C0F20000 		movt	r0, #:upper16:cfg_data
 1269 08ca B96A     		ldr	r1, [r7, #40]
 1270 08cc 4FF00002 		mov	r2, #0
 1271 08d0 644B     		ldr	r3, .L61+40
 1272 08d2 FFF7FEFF 		bl	CRC_CalcCRC
 1273 08d6 0346     		mov	r3, r0
 1274 08d8 87F82F30 		strb	r3, [r7, #47]
 492:src/can_user.c **** 		if(res != CRC_ERR_OK)
 1275              		.loc 2 492 0
 1276 08dc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1277 08e0 002B     		cmp	r3, #0
 1278 08e2 40F09D80 		bne	.L56
 1279              	.L46:
 493:src/can_user.c **** 					break;
 494:src/can_user.c **** 
 495:src/can_user.c **** 		if(EEPROM_Write(EEPROM_INT, EEPROM_CFG_ADDR, &cfg_data,
 1280              		.loc 2 495 0
 1281 08e6 4FF00000 		mov	r0, #0
 1282 08ea 4FF00001 		mov	r1, #0
 1283 08ee 40F20002 		movw	r2, #:lower16:cfg_data
 1284 08f2 C0F20002 		movt	r2, #:upper16:cfg_data
 1285 08f6 4FF02403 		mov	r3, #36
 1286 08fa FFF7FEFF 		bl	EEPROM_Write
 496:src/can_user.c **** 				sizeof(cfg_data))!= EEPROM_ERR_OK){
 497:src/can_user.c **** 			// write failed
 498:src/can_user.c **** 		}
 499:src/can_user.c **** 		if(EEPROM_FlushCache(EEPROM_INT)!= EEPROM_ERR_OK){
 1287              		.loc 2 499 0
 1288 08fe 4FF00000 		mov	r0, #0
 1289 0902 FFF7FEFF 		bl	EEPROM_FlushCache
 500:src/can_user.c **** 			// flush failed
 501:src/can_user.c **** 		}
 502:src/can_user.c **** 		break;
 1290              		.loc 2 502 0
 1291 0906 94E0     		b	.L26
 1292              	.L36:
 503:src/can_user.c **** 
 504:src/can_user.c **** 	case SYM_OUT_RTC_SET_TIME:
 505:src/can_user.c **** 		rtc.sec = msg.Data.Data8[0] ;
 1293              		.loc 2 505 0
 1294 0908 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1295 090a 87F82730 		strb	r3, [r7, #39]
 506:src/can_user.c **** 		rtc.min	= msg.Data.Data8[1] ;
 1296              		.loc 2 506 0
 1297 090e 7B7E     		ldrb	r3, [r7, #25]	@ zero_extendqisi2
 1298 0910 87F82630 		strb	r3, [r7, #38]
 507:src/can_user.c **** 		rtc.hour = msg.Data.Data8[2] ;
 1299              		.loc 2 507 0
 1300 0914 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 1301 0916 87F82530 		strb	r3, [r7, #37]
 508:src/can_user.c **** 		rtc.wday = msg.Data.Data8[3] ;
 1302              		.loc 2 508 0
 1303 091a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1304 091c 87F82430 		strb	r3, [r7, #36]
 509:src/can_user.c **** 		rtc.mday = msg.Data.Data8[4] ;
 1305              		.loc 2 509 0
 1306 0920 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 1307 0922 87F82330 		strb	r3, [r7, #35]
 510:src/can_user.c **** 		rtc.month = msg.Data.Data8[5] ;
 1308              		.loc 2 510 0
 1309 0926 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 1310 0928 87F82230 		strb	r3, [r7, #34]
 511:src/can_user.c **** 		rtc.year = msg.Data.Data16[3] ;
 1311              		.loc 2 511 0
 1312 092c FB8B     		ldrh	r3, [r7, #30]
 1313 092e 3B84     		strh	r3, [r7, #32]	@ movhi
 512:src/can_user.c **** 		rtc_settime(&rtc);
 1314              		.loc 2 512 0
 1315 0930 07F12003 		add	r3, r7, #32
 1316 0934 1846     		mov	r0, r3
 1317 0936 FFF7FEFF 		bl	rtc_settime
 513:src/can_user.c **** 		break;
 1318              		.loc 2 513 0
 1319 093a 7AE0     		b	.L26
 1320              	.L37:
 514:src/can_user.c **** 
 515:src/can_user.c **** 	case SYM_OUT_RTC_ADOPT_GPS_TIME:
 516:src/can_user.c **** 		if(!(msg.Data.Data8[0]&0x1))
 1321              		.loc 2 516 0
 1322 093c 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1323 093e 03F00103 		and	r3, r3, #1
 1324 0942 002B     		cmp	r3, #0
 1325 0944 6ED0     		beq	.L57
 1326              	.L47:
 517:src/can_user.c **** 			break;
 518:src/can_user.c **** 
 519:src/can_user.c **** 		// only copy values if they are valid
 520:src/can_user.c **** 		if((MAX7W_Readings.Validity & GPS_TIME_VALID)!=GPS_TIME_VALID)
 1327              		.loc 2 520 0
 1328 0946 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1329 094a C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1330 094e 5B6B     		ldr	r3, [r3, #52]
 1331 0950 03F00103 		and	r3, r3, #1
 1332 0954 002B     		cmp	r3, #0
 1333 0956 67D0     		beq	.L58
 1334              	.L48:
 521:src/can_user.c **** 			break;
 522:src/can_user.c **** 		if((MAX7W_Readings.Validity & GPS_DATE_VALID)!=GPS_DATE_VALID)
 1335              		.loc 2 522 0
 1336 0958 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1337 095c C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1338 0960 5B6B     		ldr	r3, [r3, #52]
 1339 0962 03F00203 		and	r3, r3, #2
 1340 0966 002B     		cmp	r3, #0
 1341 0968 60D0     		beq	.L59
 1342              	.L49:
 523:src/can_user.c **** 			break;
 524:src/can_user.c **** 
 525:src/can_user.c **** 		// get old values to keep day of week that was set before
 526:src/can_user.c **** 		rtc_gettime(&rtc);
 1343              		.loc 2 526 0
 1344 096a 07F12003 		add	r3, r7, #32
 1345 096e 1846     		mov	r0, r3
 1346 0970 FFF7FEFF 		bl	rtc_gettime
 527:src/can_user.c **** 
 528:src/can_user.c **** 		rtc.sec = MAX7W_Readings.Time_Sec;
 1347              		.loc 2 528 0
 1348 0974 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1349 0978 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1350 097c 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1351 0980 87F82730 		strb	r3, [r7, #39]
 529:src/can_user.c **** 		rtc.min	= MAX7W_Readings.Time_Min;
 1352              		.loc 2 529 0
 1353 0984 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1354 0988 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1355 098c 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1356 0990 87F82630 		strb	r3, [r7, #38]
 530:src/can_user.c **** 		rtc.hour = MAX7W_Readings.Time_Hrs;
 1357              		.loc 2 530 0
 1358 0994 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1359 0998 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1360 099c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1361 09a0 87F82530 		strb	r3, [r7, #37]
 531:src/can_user.c **** 		rtc.mday = MAX7W_Readings.Date_DayOfMonth;
 1362              		.loc 2 531 0
 1363 09a4 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1364 09a8 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1365 09ac 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1366 09b0 87F82330 		strb	r3, [r7, #35]
 532:src/can_user.c **** 		rtc.month = MAX7W_Readings.Date_Month;
 1367              		.loc 2 532 0
 1368 09b4 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1369 09b8 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1370 09bc 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1371 09c0 87F82230 		strb	r3, [r7, #34]
 533:src/can_user.c **** 		rtc.year = MAX7W_Readings.Date_Year;
 1372              		.loc 2 533 0
 1373 09c4 40F20003 		movw	r3, #:lower16:MAX7W_Readings
 1374 09c8 C0F20003 		movt	r3, #:upper16:MAX7W_Readings
 1375 09cc 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 1376 09d0 3B84     		strh	r3, [r7, #32]	@ movhi
 534:src/can_user.c **** 		rtc_settime(&rtc);
 1377              		.loc 2 534 0
 1378 09d2 07F12003 		add	r3, r7, #32
 1379 09d6 1846     		mov	r0, r3
 1380 09d8 FFF7FEFF 		bl	rtc_settime
 535:src/can_user.c **** 		break;
 1381              		.loc 2 535 0
 1382 09dc 29E0     		b	.L26
 1383              	.L38:
 536:src/can_user.c **** 
 537:src/can_user.c **** 	case SYM_OUT_ACC_FAST_CALIBRATION:
 538:src/can_user.c **** 		MEMS_BMC050_SetAccCalTargets(&msg.Data.Data8[0], &msg.Data.Data8[1], &msg.Data.Data8[2]);
 1384              		.loc 2 538 0
 1385 09de 07F11003 		add	r3, r7, #16
 1386 09e2 03F10801 		add	r1, r3, #8
 1387 09e6 07F11003 		add	r3, r7, #16
 1388 09ea 03F10902 		add	r2, r3, #9
 1389 09ee 07F11003 		add	r3, r7, #16
 1390 09f2 03F10A03 		add	r3, r3, #10
 1391 09f6 0846     		mov	r0, r1
 1392 09f8 1146     		mov	r1, r2
 1393 09fa 1A46     		mov	r2, r3
 1394 09fc FFF7FEFF 		bl	MEMS_BMC050_SetAccCalTargets
 539:src/can_user.c **** 		if(msg.Data.Data8[3]&0x1)
 1395              		.loc 2 539 0
 1396 0a00 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1397 0a02 03F00103 		and	r3, r3, #1
 1398 0a06 002B     		cmp	r3, #0
 1399 0a08 12D0     		beq	.L60
 540:src/can_user.c **** 			MEMS_BMC050_StartFastAccCompensation();
 1400              		.loc 2 540 0
 1401 0a0a FFF7FEFF 		bl	MEMS_BMC050_StartFastAccCompensation
 541:src/can_user.c **** 		break;
 1402              		.loc 2 541 0
 1403 0a0e 0FE0     		b	.L60
 1404              	.L52:
 542:src/can_user.c **** 
 543:src/can_user.c **** 	default:
 544:src/can_user.c **** 		break;
 1405              		.loc 2 544 0
 1406 0a10 00BF     		nop
 1407 0a12 0EE0     		b	.L26
 1408              	.L53:
 451:src/can_user.c **** 		break;
 1409              		.loc 2 451 0
 1410 0a14 00BF     		nop
 1411 0a16 0CE0     		b	.L26
 1412              	.L54:
 464:src/can_user.c **** 			break;
 1413              		.loc 2 464 0
 1414 0a18 00BF     		nop
 1415 0a1a 0AE0     		b	.L26
 1416              	.L55:
 488:src/can_user.c **** 			break;
 1417              		.loc 2 488 0
 1418 0a1c 00BF     		nop
 1419 0a1e 08E0     		b	.L26
 1420              	.L56:
 493:src/can_user.c **** 					break;
 1421              		.loc 2 493 0
 1422 0a20 00BF     		nop
 1423 0a22 06E0     		b	.L26
 1424              	.L57:
 517:src/can_user.c **** 			break;
 1425              		.loc 2 517 0
 1426 0a24 00BF     		nop
 1427 0a26 04E0     		b	.L26
 1428              	.L58:
 521:src/can_user.c **** 			break;
 1429              		.loc 2 521 0
 1430 0a28 00BF     		nop
 1431 0a2a 02E0     		b	.L26
 1432              	.L59:
 523:src/can_user.c **** 			break;
 1433              		.loc 2 523 0
 1434 0a2c 00BF     		nop
 1435 0a2e 00E0     		b	.L26
 1436              	.L60:
 541:src/can_user.c **** 		break;
 1437              		.loc 2 541 0
 1438 0a30 00BF     		nop
 1439              	.L26:
 545:src/can_user.c **** 	}
 546:src/can_user.c **** 
 547:src/can_user.c **** 	return;
 548:src/can_user.c **** }
 1440              		.loc 2 548 0
 1441 0a32 07F13407 		add	r7, r7, #52
 1442 0a36 BD46     		mov	sp, r7
 1443 0a38 90BD     		pop	{r4, r7, pc}
 1444              	.L62:
 1445 0a3a 00BF     		.align	2
 1446              	.L61:
 1447 0a3c 01000000 		.word	cfg_data+1
 1448 0a40 02000000 		.word	cfg_data+2
 1449 0a44 09000000 		.word	cfg_data+9
 1450 0a48 06000000 		.word	cfg_data+6
 1451 0a4c 07000000 		.word	cfg_data+7
 1452 0a50 08000000 		.word	cfg_data+8
 1453 0a54 03000000 		.word	cfg_data+3
 1454 0a58 04000000 		.word	cfg_data+4
 1455 0a5c 05000000 		.word	cfg_data+5
 1456 0a60 0B000000 		.word	cfg_data+11
 1457 0a64 20000000 		.word	cfg_data+32
 1458              		.cfi_endproc
 1459              	.LFE120:
 1461              		.align	2
 1462              		.global	CAN_UserResetPanelValues
 1463              		.thumb
 1464              		.thumb_func
 1466              	CAN_UserResetPanelValues:
 1467              	.LFB121:
 549:src/can_user.c **** 
 550:src/can_user.c **** 
 551:src/can_user.c **** //! Update the explorer panel with currently set config values
 552:src/can_user.c **** void CAN_UserResetPanelValues(void){
 1468              		.loc 2 552 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 32
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0a68 80B5     		push	{r7, lr}
 1473              	.LCFI32:
 1474              		.cfi_def_cfa_offset 8
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0a6a 88B0     		sub	sp, sp, #32
 1478              	.LCFI33:
 1479              		.cfi_def_cfa_offset 40
 1480 0a6c 00AF     		add	r7, sp, #0
 1481              	.LCFI34:
 1482              		.cfi_def_cfa_register 7
 553:src/can_user.c **** 	CANMsg_t TxMsg;
 554:src/can_user.c **** 	u32_t tmp_u32;
 555:src/can_user.c **** 	RTC rtc;
 556:src/can_user.c **** 	
 557:src/can_user.c **** 	HW_GetDOUT(&tmp_u32);
 1483              		.loc 2 557 0
 1484 0a6e 07F10C03 		add	r3, r7, #12
 1485 0a72 1846     		mov	r0, r3
 1486 0a74 FFF7FEFF 		bl	HW_GetDOUT
 558:src/can_user.c **** 
 559:src/can_user.c **** 	TxMsg.Id = SYM_OUT_IO;
 1487              		.loc 2 559 0
 1488 0a78 4FF4AA63 		mov	r3, #1360
 1489 0a7c 7B61     		str	r3, [r7, #20]
 560:src/can_user.c **** 	TxMsg.Len = 1;
 1490              		.loc 2 560 0
 1491 0a7e 4FF00103 		mov	r3, #1
 1492 0a82 FB74     		strb	r3, [r7, #19]
 561:src/can_user.c **** 	TxMsg.Type = CAN_MSG_STANDARD;
 1493              		.loc 2 561 0
 1494 0a84 4FF00003 		mov	r3, #0
 1495 0a88 BB74     		strb	r3, [r7, #18]
 562:src/can_user.c **** 	TxMsg.Data.Data8[0] =  (HW_GPS_GetPowerState()<<1) | ((u8_t)tmp_u32) ;
 1496              		.loc 2 562 0
 1497 0a8a FFF7FEFF 		bl	HW_GPS_GetPowerState
 1498 0a8e 0346     		mov	r3, r0
 1499 0a90 4FEA4303 		lsl	r3, r3, #1
 1500 0a94 DAB2     		uxtb	r2, r3
 1501 0a96 FB68     		ldr	r3, [r7, #12]
 1502 0a98 DBB2     		uxtb	r3, r3
 1503 0a9a 1343     		orrs	r3, r3, r2
 1504 0a9c DBB2     		uxtb	r3, r3
 1505 0a9e DBB2     		uxtb	r3, r3
 1506 0aa0 3B76     		strb	r3, [r7, #24]
 563:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1507              		.loc 2 563 0
 1508 0aa2 07F11003 		add	r3, r7, #16
 1509 0aa6 1846     		mov	r0, r3
 1510 0aa8 FFF7FEFF 		bl	CAN_UserWrite
 564:src/can_user.c **** 
 565:src/can_user.c **** 	TxMsg.Id = SYM_OUT_GYRO;
 1511              		.loc 2 565 0
 1512 0aac 40F25253 		movw	r3, #1362
 1513 0ab0 7B61     		str	r3, [r7, #20]
 566:src/can_user.c **** 	TxMsg.Len = 1;
 1514              		.loc 2 566 0
 1515 0ab2 4FF00103 		mov	r3, #1
 1516 0ab6 FB74     		strb	r3, [r7, #19]
 567:src/can_user.c **** 	MEMS_L3GD20_GetRange(&TxMsg.Data.Data8[0]);
 1517              		.loc 2 567 0
 1518 0ab8 07F11003 		add	r3, r7, #16
 1519 0abc 03F10803 		add	r3, r3, #8
 1520 0ac0 1846     		mov	r0, r3
 1521 0ac2 FFF7FEFF 		bl	MEMS_L3GD20_GetRange
 568:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1522              		.loc 2 568 0
 1523 0ac6 07F11003 		add	r3, r7, #16
 1524 0aca 1846     		mov	r0, r3
 1525 0acc FFF7FEFF 		bl	CAN_UserWrite
 569:src/can_user.c **** 	
 570:src/can_user.c **** 	TxMsg.Id = SYM_OUT_ACC_SCALE;
 1526              		.loc 2 570 0
 1527 0ad0 40F25353 		movw	r3, #1363
 1528 0ad4 7B61     		str	r3, [r7, #20]
 571:src/can_user.c **** 	TxMsg.Len = 1;
 1529              		.loc 2 571 0
 1530 0ad6 4FF00103 		mov	r3, #1
 1531 0ada FB74     		strb	r3, [r7, #19]
 572:src/can_user.c **** 	MEMS_BMC050_GetAccRange(&TxMsg.Data.Data8[0]);
 1532              		.loc 2 572 0
 1533 0adc 07F11003 		add	r3, r7, #16
 1534 0ae0 03F10803 		add	r3, r3, #8
 1535 0ae4 1846     		mov	r0, r3
 1536 0ae6 FFF7FEFF 		bl	MEMS_BMC050_GetAccRange
 573:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1537              		.loc 2 573 0
 1538 0aea 07F11003 		add	r3, r7, #16
 1539 0aee 1846     		mov	r0, r3
 1540 0af0 FFF7FEFF 		bl	CAN_UserWrite
 574:src/can_user.c **** 
 575:src/can_user.c **** 	TxMsg.Id = SYM_OUT_ACC_FAST_CALIBRATION;
 1541              		.loc 2 575 0
 1542 0af4 40F25753 		movw	r3, #1367
 1543 0af8 7B61     		str	r3, [r7, #20]
 576:src/can_user.c **** 	TxMsg.Len = 4;
 1544              		.loc 2 576 0
 1545 0afa 4FF00403 		mov	r3, #4
 1546 0afe FB74     		strb	r3, [r7, #19]
 577:src/can_user.c **** 	MEMS_BMC050_GetAccCalTargets(&TxMsg.Data.Data8[0],
 1547              		.loc 2 577 0
 1548 0b00 07F11003 		add	r3, r7, #16
 1549 0b04 03F10801 		add	r1, r3, #8
 1550 0b08 07F11003 		add	r3, r7, #16
 1551 0b0c 03F10902 		add	r2, r3, #9
 1552 0b10 07F11003 		add	r3, r7, #16
 1553 0b14 03F10A03 		add	r3, r3, #10
 1554 0b18 0846     		mov	r0, r1
 1555 0b1a 1146     		mov	r1, r2
 1556 0b1c 1A46     		mov	r2, r3
 1557 0b1e FFF7FEFF 		bl	MEMS_BMC050_GetAccCalTargets
 578:src/can_user.c **** 			&TxMsg.Data.Data8[1],
 579:src/can_user.c **** 			&TxMsg.Data.Data8[2]);
 580:src/can_user.c **** 	TxMsg.Data.Data8[3] = 0;
 1558              		.loc 2 580 0
 1559 0b22 4FF00003 		mov	r3, #0
 1560 0b26 FB76     		strb	r3, [r7, #27]
 581:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1561              		.loc 2 581 0
 1562 0b28 07F11003 		add	r3, r7, #16
 1563 0b2c 1846     		mov	r0, r3
 1564 0b2e FFF7FEFF 		bl	CAN_UserWrite
 582:src/can_user.c **** 
 583:src/can_user.c **** 	rtc_gettime(&rtc);
 1565              		.loc 2 583 0
 1566 0b32 07F10403 		add	r3, r7, #4
 1567 0b36 1846     		mov	r0, r3
 1568 0b38 FFF7FEFF 		bl	rtc_gettime
 584:src/can_user.c **** 	TxMsg.Id = SYM_OUT_RTC_SET_TIME;
 1569              		.loc 2 584 0
 1570 0b3c 40F25553 		movw	r3, #1365
 1571 0b40 7B61     		str	r3, [r7, #20]
 585:src/can_user.c **** 	TxMsg.Len = 8;
 1572              		.loc 2 585 0
 1573 0b42 4FF00803 		mov	r3, #8
 1574 0b46 FB74     		strb	r3, [r7, #19]
 586:src/can_user.c **** 	TxMsg.Data.Data8[0] = rtc.sec;
 1575              		.loc 2 586 0
 1576 0b48 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1577 0b4a 3B76     		strb	r3, [r7, #24]
 587:src/can_user.c **** 	TxMsg.Data.Data8[1] = rtc.min;
 1578              		.loc 2 587 0
 1579 0b4c BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1580 0b4e 7B76     		strb	r3, [r7, #25]
 588:src/can_user.c **** 	TxMsg.Data.Data8[2] = rtc.hour;
 1581              		.loc 2 588 0
 1582 0b50 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 1583 0b52 BB76     		strb	r3, [r7, #26]
 589:src/can_user.c **** 	TxMsg.Data.Data8[3] = rtc.wday;
 1584              		.loc 2 589 0
 1585 0b54 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 1586 0b56 FB76     		strb	r3, [r7, #27]
 590:src/can_user.c **** 	TxMsg.Data.Data8[4] = rtc.mday;
 1587              		.loc 2 590 0
 1588 0b58 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1589 0b5a 3B77     		strb	r3, [r7, #28]
 591:src/can_user.c **** 	TxMsg.Data.Data8[5] = rtc.month;
 1590              		.loc 2 591 0
 1591 0b5c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1592 0b5e 7B77     		strb	r3, [r7, #29]
 592:src/can_user.c **** 	TxMsg.Data.Data16[3] = rtc.year;
 1593              		.loc 2 592 0
 1594 0b60 BB88     		ldrh	r3, [r7, #4]
 1595 0b62 FB83     		strh	r3, [r7, #30]	@ movhi
 593:src/can_user.c **** 	CAN_UserWrite(&TxMsg);
 1596              		.loc 2 593 0
 1597 0b64 07F11003 		add	r3, r7, #16
 1598 0b68 1846     		mov	r0, r3
 1599 0b6a FFF7FEFF 		bl	CAN_UserWrite
 594:src/can_user.c **** 	
 595:src/can_user.c **** 	return;
 596:src/can_user.c **** }
 1600              		.loc 2 596 0
 1601 0b6e 07F12007 		add	r7, r7, #32
 1602 0b72 BD46     		mov	sp, r7
 1603 0b74 80BD     		pop	{r7, pc}
 1604              		.cfi_endproc
 1605              	.LFE121:
 1607              		.bss
 1608              	toggle_led.7204:
 1609 0000 00       		.space	1
 1610              		.text
 1611              	.Letext0:
 1612              		.file 3 "c:/tools/pcan-router/yagarto-20121222/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1613              		.file 4 "./inc/lpc407x_8x_177x_8x.h"
 1614              		.file 5 "./inc/typedefs.h"
 1615              		.file 6 "./inc/MEMS_BMC050.h"
 1616              		.file 7 "./inc/MEMS_L3GD20.h"
 1617              		.file 8 "./inc/MAX-7W.h"
 1618              		.file 9 "./inc/lib/can.h"
 1619              		.file 10 "./inc/lib/crc.h"
 1620              		.file 11 "./inc/ff/rtc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 can_user.c
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:18     .text:00000000 $t
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:22     .text:00000000 NVIC_EnableIRQ
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:64     .text:00000038 NVIC_SetPriority
                            *COM*:00000100 TxQueueCAN1
                            *COM*:00000080 RxQueueCAN1
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:128    .text:00000094 CAN_UserWrite
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:208    .text:000000f8 CAN_UserRead
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:284    .text:00000158 CAN_UserInit
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:371    .text:00000218 CAN_UserSendBMCData
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:494    .text:00000304 CAN_UserSendL3GDData
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:569    .text:0000036c CAN_UserSendGPSData
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:853    .text:000005e0 $d
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:857    .text:000005e4 $t
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:862    .text:000005e4 CAN_UserSendDioData
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:983    .text:000006b8 CAN_UserSendRTCTime
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1046   .rodata:00000000 $d
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1047   .rodata:00000000 .LC0
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1061   .text:00000708 CAN_UserProcessMsg
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1608   .bss:00000000 toggle_led.7204
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1147   .text:000007b8 $d
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1157   .text:000007d8 $t
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1447   .text:00000a3c $d
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1461   .text:00000a68 $t
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1466   .text:00000a68 CAN_UserResetPanelValues
C:\Users\Ian\AppData\Local\Temp\ccThMCFB.s:1609   .bss:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CAN_TxQueueGetNext
CAN_TxQueueWriteNext
CAN_RxQueueGetNext
CAN_RxQueueReadNext
CAN_SetBusMode
CAN_ReferenceTxQueue
CAN_ReferenceRxQueue
CAN_SetTimestampHandler
CAN_SetErrorLimit
CAN_SetTxErrorCallback
CAN_SetRxCallback
CAN_SetChannelInfo
CAN_InitFilters
CAN_SetFilterMode
CAN_InitChannel
CAN_SetTransceiverMode
BMC050_Readings
MEMS_BMC050_GetVertialAxis
L3GD20_Readings
__aeabi_fdiv
__aeabi_f2d
__aeabi_d2f
__aeabi_fmul
__aeabi_d2uiz
MAX7W_Readings
modf
HW_GetDIN
HW_GetDOUT
HW_SDCardPresent
HW_GPS_GetPowerState
HW_GetModuleID
rtc_gettime
HW_SetLED
HW_SetDOUTn
HW_GPS_PowerOn
HW_GPS_PowerOff
HW_SwitchOFF
MEMS_L3GD20_SetRange
MEMS_BMC050_SetAccRange
cfg_data
MEMS_BMC050_GetAccCalTargets
MEMS_BMC050_GetAccRange
MEMS_BMC050_GetAccCalFiltValues
MEMS_BMC050_GetAccCalRawValues
MEMS_L3GD20_GetRange
CRC_Init
CRC_CalcCRC
EEPROM_Write
EEPROM_FlushCache
rtc_settime
MEMS_BMC050_SetAccCalTargets
MEMS_BMC050_StartFastAccCompensation
