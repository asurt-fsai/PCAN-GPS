   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	Ident
  19              		.section	.ident,"a",%progbits
  20              		.align	2
  23              	Ident:
  24 0000 5043414E 		.ascii	"PCAN-GPS\000"
  24      2D475053 
  24      00
  25              		.global	C2F_Array
  26 0009 000000   		.section	.C2F_Info,"a",%progbits
  27              		.align	2
  30              	C2F_Array:
  31 0000 4352432D 		.ascii	"CRC-Arrays\000"
  31      41727261 
  31      797300
  32 000b 00000000 		.space	5
  32      00
  33 0010 2100     		.short	33
  34 0012 0500     		.short	5
  35 0014 0500     		.short	5
  36 0016 06000000 		.4byte	6
  37 001a 00000000 		.space	6
  37      0000
  38              		.comm	cfg_data,36,4
  39              		.global	Initialized
  40              		.bss
  43              	Initialized:
  44 0000 00       		.space	1
  45              		.global	persistant_config_used
  48              	persistant_config_used:
  49 0001 00       		.space	1
  50              		.text
  51              		.align	2
  52              		.global	Timer_1000usec
  53              		.thumb
  54              		.thumb_func
  56              	Timer_1000usec:
  57              	.LFB112:
  58              		.file 1 "src/main.c"
   1:src/main.c    **** /*******************************************************************************
   2:src/main.c    ****  *
   3:src/main.c    ****  * Project  :	PCAN-GPS - Timer Example
   4:src/main.c    ****  * Module   :
   5:src/main.c    ****  * Filename :	main.c
   6:src/main.c    ****  * System   :
   7:src/main.c    ****  * Compiler :
   8:src/main.c    ****  * Switches :
   9:src/main.c    ****  * Rights   : 	(c) PEAK-System Technik GmbH
  10:src/main.c    ****  *            	www.peak-system.com
  11:src/main.c    ****  *
  12:src/main.c    ****  *******************************************************************************
  13:src/main.c    ****  * Implementation description
  14:src/main.c    ****  *
  15:src/main.c    ****  *
  16:src/main.c    ****  *
  17:src/main.c    ****  *******************************************************************************
  18:src/main.c    ****  * History: (newer entries first!)
  19:src/main.c    ****  *------------------------------------------------------------------------------
  20:src/main.c    ****  * Date / Name      Vers.   changes made
  21:src/main.c    ****  *------------------------------------------------------------------------------
  22:src/main.c    ****  * 2014 October StM	1.0.2	Changed wrong mask when sending module ID
  23:src/main.c    ****  * 2014 October StM	1.0.1	Changed format for GPS position in CAN frame
  24:src/main.c    ****  * 2014 July StM	1.0.0	Initial Version
  25:src/main.c    ****  ******************************************************************************/
  26:src/main.c    **** 
  27:src/main.c    **** /*******************************************************************************
  28:src/main.c    ****  include files
  29:src/main.c    ****  ******************************************************************************/
  30:src/main.c    **** //
  31:src/main.c    **** // System header files
  32:src/main.c    **** //
  33:src/main.c    **** #include <system_LPC407x_8x_177x_8x.h>
  34:src/main.c    **** #include <lpc407x_8x_177x_8x.h>
  35:src/main.c    **** 
  36:src/main.c    **** //
  37:src/main.c    **** // Library header files
  38:src/main.c    **** //
  39:src/main.c    **** #include "typedefs.h"
  40:src/main.c    **** #include "hardware.h"
  41:src/main.c    **** #include "can.h"
  42:src/main.c    **** #include "ssp.h"
  43:src/main.c    **** #include "eeprom.h"
  44:src/main.c    **** #include "serial.h"
  45:src/main.c    **** #include "crc.h"
  46:src/main.c    **** 
  47:src/main.c    **** //
  48:src/main.c    **** // Source code header files
  49:src/main.c    **** //
  50:src/main.c    **** #include "timer.h"
  51:src/main.c    **** #include "MEMS_BMC050.h"
  52:src/main.c    **** #include "MEMS_L3GD20.h"
  53:src/main.c    **** #include "MAX-7W.h"
  54:src/main.c    **** #include "can_user.h"
  55:src/main.c    **** #include "crc_data.h"
  56:src/main.c    **** #include "rtc.h"
  57:src/main.c    **** 
  58:src/main.c    **** 
  59:src/main.c    **** /*******************************************************************************
  60:src/main.c    ****  global definitions
  61:src/main.c    ****  ******************************************************************************/
  62:src/main.c    **** //! identifier is needed by PCANFlash.exe -> do not delete
  63:src/main.c    **** const b8_t Ident[] __attribute__ ((section(".ident"), used)) = { "PCAN-GPS"};
  64:src/main.c    **** 
  65:src/main.c    **** //! info data for PCANFlash.exe
  66:src/main.c    **** const crc_array_t  C2F_Array __attribute__((section(".C2F_Info"), used)) = {
  67:src/main.c    **** 	.Str = CRC_IDENT_STRING,
  68:src/main.c    **** 	.Version = 0x21,
  69:src/main.c    **** 	.Day = 5,
  70:src/main.c    **** 	.Month = 5,
  71:src/main.c    **** 	.Year = 6,
  72:src/main.c    **** 
  73:src/main.c    **** 	// crc infos are patched during link time by flash.ld
  74:src/main.c    **** 	// crc value is patched by PCANFlash.exe
  75:src/main.c    **** };
  76:src/main.c    **** 
  77:src/main.c    **** #define EEPROM_CFG_ADDR 0x00
  78:src/main.c    **** S_CONFIG_DATA_t cfg_data;
  79:src/main.c    **** 
  80:src/main.c    **** 
  81:src/main.c    **** /*******************************************************************************
  82:src/main.c    ****  local definitions
  83:src/main.c    ****  ******************************************************************************/
  84:src/main.c    **** u8_t Initialized = 0;
  85:src/main.c    **** u8_t persistant_config_used=0;
  86:src/main.c    **** 
  87:src/main.c    **** 
  88:src/main.c    **** 
  89:src/main.c    **** /*******************************************************************************
  90:src/main.c    ****  local function prototypes
  91:src/main.c    ****  ******************************************************************************/
  92:src/main.c    **** static s32_t init_system(void);
  93:src/main.c    **** static s32_t get_default_config(void);
  94:src/main.c    **** static s32_t read_persistent_config(void);
  95:src/main.c    **** void Timer_1000usec(void);
  96:src/main.c    **** 
  97:src/main.c    **** 
  98:src/main.c    **** /*******************************************************************************
  99:src/main.c    ****  global functions
 100:src/main.c    ****  ******************************************************************************/
 101:src/main.c    **** 
 102:src/main.c    **** 
 103:src/main.c    **** 
 104:src/main.c    **** //------------------------------------------------------------------------------
 105:src/main.c    **** //! void Timer_1000usec(void)
 106:src/main.c    **** //------------------------------------------------------------------------------
 107:src/main.c    **** //! @brief	this function is called every 1[ms] by timer0 match-interrupt ISR
 108:src/main.c    **** //------------------------------------------------------------------------------
 109:src/main.c    **** void Timer_1000usec(void){
  59              		.loc 1 109 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 00AF     		add	r7, sp, #0
  69              	.LCFI1:
  70              		.cfi_def_cfa_register 7
 110:src/main.c    **** 	static u32_t  LedBlink_counter=0;
 111:src/main.c    **** 	static u8_t	toggle_led = 0;
 112:src/main.c    **** 
 113:src/main.c    **** 	if (!Initialized)
  71              		.loc 1 113 0
  72 0004 40F20003 		movw	r3, #:lower16:Initialized
  73 0008 C0F20003 		movt	r3, #:upper16:Initialized
  74 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  75 000e 002B     		cmp	r3, #0
  76 0010 3ED0     		beq	.L6
  77              	.L2:
 114:src/main.c    **** 		return;
 115:src/main.c    **** 
 116:src/main.c    **** 	if (LedBlink_counter < 1000){
  78              		.loc 1 116 0
  79 0012 40F20003 		movw	r3, #:lower16:LedBlink_counter.6673
  80 0016 C0F20003 		movt	r3, #:upper16:LedBlink_counter.6673
  81 001a 1A68     		ldr	r2, [r3, #0]
  82 001c 40F2E733 		movw	r3, #999
  83 0020 9A42     		cmp	r2, r3
  84 0022 0CD8     		bhi	.L4
 117:src/main.c    **** 		LedBlink_counter++;
  85              		.loc 1 117 0
  86 0024 40F20003 		movw	r3, #:lower16:LedBlink_counter.6673
  87 0028 C0F20003 		movt	r3, #:upper16:LedBlink_counter.6673
  88 002c 1B68     		ldr	r3, [r3, #0]
  89 002e 03F10102 		add	r2, r3, #1
  90 0032 40F20003 		movw	r3, #:lower16:LedBlink_counter.6673
  91 0036 C0F20003 		movt	r3, #:upper16:LedBlink_counter.6673
  92 003a 1A60     		str	r2, [r3, #0]
  93 003c 29E0     		b	.L1
  94              	.L4:
 118:src/main.c    **** 	}else{
 119:src/main.c    **** 		LedBlink_counter = 0;
  95              		.loc 1 119 0
  96 003e 40F20003 		movw	r3, #:lower16:LedBlink_counter.6673
  97 0042 C0F20003 		movt	r3, #:upper16:LedBlink_counter.6673
  98 0046 4FF00002 		mov	r2, #0
  99 004a 1A60     		str	r2, [r3, #0]
 120:src/main.c    **** 
 121:src/main.c    **** 		toggle_led ^= 1;		// invert flag and set new value
 100              		.loc 1 121 0
 101 004c 40F20003 		movw	r3, #:lower16:toggle_led.6674
 102 0050 C0F20003 		movt	r3, #:upper16:toggle_led.6674
 103 0054 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 104 0056 83F00103 		eor	r3, r3, #1
 105 005a DAB2     		uxtb	r2, r3
 106 005c 40F20003 		movw	r3, #:lower16:toggle_led.6674
 107 0060 C0F20003 		movt	r3, #:upper16:toggle_led.6674
 108 0064 1A70     		strb	r2, [r3, #0]
 122:src/main.c    **** 		if (toggle_led){
 109              		.loc 1 122 0
 110 0066 40F20003 		movw	r3, #:lower16:toggle_led.6674
 111 006a C0F20003 		movt	r3, #:upper16:toggle_led.6674
 112 006e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 113 0070 002B     		cmp	r3, #0
 114 0072 06D0     		beq	.L5
 123:src/main.c    **** 			HW_SetLED (HW_LED_STATUS_1, HW_LED_GREEN);
 115              		.loc 1 123 0
 116 0074 4FF00100 		mov	r0, #1
 117 0078 4FF00201 		mov	r1, #2
 118 007c FFF7FEFF 		bl	HW_SetLED
 119 0080 07E0     		b	.L1
 120              	.L5:
 124:src/main.c    **** 		} else {
 125:src/main.c    **** 			HW_SetLED(HW_LED_STATUS_1, HW_LED_OFF);
 121              		.loc 1 125 0
 122 0082 4FF00100 		mov	r0, #1
 123 0086 4FF00001 		mov	r1, #0
 124 008a FFF7FEFF 		bl	HW_SetLED
 125 008e 00E0     		b	.L1
 126              	.L6:
 114:src/main.c    **** 		return;
 127              		.loc 1 114 0
 128 0090 00BF     		nop
 129              	.L1:
 126:src/main.c    **** 		}
 127:src/main.c    **** 	}
 128:src/main.c    **** }
 130              		.loc 1 128 0
 131 0092 80BD     		pop	{r7, pc}
 132              		.cfi_endproc
 133              	.LFE112:
 135              		.align	2
 136              		.global	main
 137              		.thumb
 138              		.thumb_func
 140              	main:
 141              	.LFB113:
 129:src/main.c    **** 
 130:src/main.c    **** 
 131:src/main.c    **** //------------------------------------------------------------------------------
 132:src/main.c    **** //! int main(void)
 133:src/main.c    **** //------------------------------------------------------------------------------
 134:src/main.c    **** //! @brief	initialization and main loop
 135:src/main.c    **** //------------------------------------------------------------------------------
 136:src/main.c    **** int main(void)
 137:src/main.c    **** {
 142              		.loc 1 137 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0094 80B5     		push	{r7, lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0096 00AF     		add	r7, sp, #0
 152              	.LCFI3:
 153              		.cfi_def_cfa_register 7
 138:src/main.c    **** 
 139:src/main.c    **** 	Initialized = 0;
 154              		.loc 1 139 0
 155 0098 40F20003 		movw	r3, #:lower16:Initialized
 156 009c C0F20003 		movt	r3, #:upper16:Initialized
 157 00a0 4FF00002 		mov	r2, #0
 158 00a4 1A70     		strb	r2, [r3, #0]
 140:src/main.c    **** 
 141:src/main.c    **** 	init_system();
 159              		.loc 1 141 0
 160 00a6 00F045F9 		bl	init_system
 161 00aa 00E0     		b	.L23
 162              	.L24:
 142:src/main.c    **** 
 143:src/main.c    **** 	while(1) 	
 144:src/main.c    **** 	{
 145:src/main.c    **** 		static u32_t  		BMC050task_counter=0;
 146:src/main.c    **** 		static u32_t  		L3GD20task_counter=0;
 147:src/main.c    **** 		static u32_t  		MAX7Wtask_counter=0;
 148:src/main.c    **** 		static u32_t  		DIO_counter=0;
 149:src/main.c    **** 		static u32_t  		TIME_counter=0;
 150:src/main.c    **** 
 151:src/main.c    **** 		// read new compass/accelerometer/temperature data
 152:src/main.c    **** 		if (SYSTIME_DIFF(BMC050task_counter, SYSTIME_NOW) >= 25000)
 153:src/main.c    **** 		{
 154:src/main.c    **** 			// update time interval
 155:src/main.c    **** 			BMC050task_counter = SYSTIME_NOW;
 156:src/main.c    **** 			// as long as there is not a complete set of readings
 157:src/main.c    **** 			if (BMC050_Readings.data_valid == FALSE)
 158:src/main.c    **** 			{
 159:src/main.c    **** 				MEMS_BMC050_task();
 160:src/main.c    **** 			
 161:src/main.c    **** 				if (BMC050_Readings.data_valid == TRUE){
 162:src/main.c    **** 					CAN_UserSendBMCData();
 163:src/main.c    **** 				}
 164:src/main.c    **** 			}
 165:src/main.c    **** 		}
 166:src/main.c    **** 		//-------------------------
 167:src/main.c    **** 		
 168:src/main.c    **** 		// read new gyro/temperature data
 169:src/main.c    **** 		if (SYSTIME_DIFF (L3GD20task_counter, SYSTIME_NOW) >= 50000)
 170:src/main.c    **** 		{
 171:src/main.c    **** 			// update time interval
 172:src/main.c    **** 			L3GD20task_counter = SYSTIME_NOW;
 173:src/main.c    **** 			// as long as there is not a complete set of readings
 174:src/main.c    **** 			MEMS_L3GD20_task();
 175:src/main.c    **** 			
 176:src/main.c    **** 			if (L3GD20_Readings.data_valid == TRUE)
 177:src/main.c    **** 				CAN_UserSendL3GDData();
 178:src/main.c    **** 		}
 179:src/main.c    **** 		//-------------------------
 180:src/main.c    **** 
 181:src/main.c    **** 		// evaluate new gps data as fast as possible
 182:src/main.c    **** 		UBLOX_MAX7W_task();
 183:src/main.c    **** 		if (SYSTIME_DIFF (MAX7Wtask_counter, SYSTIME_NOW) >= 100000)
 184:src/main.c    **** 		{
 185:src/main.c    **** 			// update time interval
 186:src/main.c    **** 			MAX7Wtask_counter = SYSTIME_NOW;
 187:src/main.c    **** 			CAN_UserSendGPSData();
 188:src/main.c    **** 		}
 189:src/main.c    **** 		//-------------------------
 190:src/main.c    **** 		if (SYSTIME_DIFF (DIO_counter, SYSTIME_NOW) >= 25000)
 191:src/main.c    **** 		{
 192:src/main.c    **** 			// update time interval
 193:src/main.c    **** 			DIO_counter = SYSTIME_NOW;
 194:src/main.c    **** 			CAN_UserSendDioData();
 195:src/main.c    **** 		}
 196:src/main.c    **** 		//-------------------------
 197:src/main.c    **** 
 198:src/main.c    **** 		if (SYSTIME_DIFF (TIME_counter, SYSTIME_NOW) >= 500000)
 199:src/main.c    **** 		{
 200:src/main.c    **** 			// update time interval
 201:src/main.c    **** 			TIME_counter = SYSTIME_NOW;
 202:src/main.c    **** 			CAN_UserSendRTCTime();
 203:src/main.c    **** 		}
 204:src/main.c    **** 		//-------------------------
 205:src/main.c    **** 
 206:src/main.c    **** //		CAN_UserProcessMsg();
 207:src/main.c    **** 	} // end while (1)
 163              		.loc 1 207 0
 164 00ac 00BF     		nop
 165              	.L23:
 166              	.LBB2:
 152:src/main.c    **** 		if (SYSTIME_DIFF(BMC050task_counter, SYSTIME_NOW) >= 25000)
 167              		.loc 1 152 0
 168 00ae 4FF04023 		mov	r3, #1073758208
 169 00b2 9A68     		ldr	r2, [r3, #8]
 170 00b4 40F20003 		movw	r3, #:lower16:BMC050task_counter.6678
 171 00b8 C0F20003 		movt	r3, #:upper16:BMC050task_counter.6678
 172 00bc 1B68     		ldr	r3, [r3, #0]
 173 00be 9A42     		cmp	r2, r3
 174 00c0 10D3     		bcc	.L8
 152:src/main.c    **** 		if (SYSTIME_DIFF(BMC050task_counter, SYSTIME_NOW) >= 25000)
 175              		.loc 1 152 0 is_stmt 0 discriminator 1
 176 00c2 4FF04023 		mov	r3, #1073758208
 177 00c6 9A68     		ldr	r2, [r3, #8]
 178 00c8 40F20003 		movw	r3, #:lower16:BMC050task_counter.6678
 179 00cc C0F20003 		movt	r3, #:upper16:BMC050task_counter.6678
 180 00d0 1B68     		ldr	r3, [r3, #0]
 181 00d2 D21A     		subs	r2, r2, r3
 182 00d4 46F2A713 		movw	r3, #24999
 183 00d8 9A42     		cmp	r2, r3
 184 00da 94BF     		ite	ls
 185 00dc 0023     		movls	r3, #0
 186 00de 0123     		movhi	r3, #1
 187 00e0 DBB2     		uxtb	r3, r3
 188 00e2 11E0     		b	.L9
 189              	.L8:
 152:src/main.c    **** 		if (SYSTIME_DIFF(BMC050task_counter, SYSTIME_NOW) >= 25000)
 190              		.loc 1 152 0 discriminator 2
 191 00e4 40F20003 		movw	r3, #:lower16:BMC050task_counter.6678
 192 00e8 C0F20003 		movt	r3, #:upper16:BMC050task_counter.6678
 193 00ec 1B68     		ldr	r3, [r3, #0]
 194 00ee 6FEA0302 		mvn	r2, r3
 195 00f2 4FF04023 		mov	r3, #1073758208
 196 00f6 9B68     		ldr	r3, [r3, #8]
 197 00f8 D218     		adds	r2, r2, r3
 198 00fa 46F2A713 		movw	r3, #24999
 199 00fe 9A42     		cmp	r2, r3
 200 0100 94BF     		ite	ls
 201 0102 0023     		movls	r3, #0
 202 0104 0123     		movhi	r3, #1
 203 0106 DBB2     		uxtb	r3, r3
 204              	.L9:
 152:src/main.c    **** 		if (SYSTIME_DIFF(BMC050task_counter, SYSTIME_NOW) >= 25000)
 205              		.loc 1 152 0 discriminator 3
 206 0108 002B     		cmp	r3, #0
 207 010a 19D0     		beq	.L10
 155:src/main.c    **** 			BMC050task_counter = SYSTIME_NOW;
 208              		.loc 1 155 0 is_stmt 1
 209 010c 4FF04023 		mov	r3, #1073758208
 210 0110 9A68     		ldr	r2, [r3, #8]
 211 0112 40F20003 		movw	r3, #:lower16:BMC050task_counter.6678
 212 0116 C0F20003 		movt	r3, #:upper16:BMC050task_counter.6678
 213 011a 1A60     		str	r2, [r3, #0]
 157:src/main.c    **** 			if (BMC050_Readings.data_valid == FALSE)
 214              		.loc 1 157 0
 215 011c 40F20003 		movw	r3, #:lower16:BMC050_Readings
 216 0120 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 217 0124 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 218 0126 002B     		cmp	r3, #0
 219 0128 0AD1     		bne	.L10
 159:src/main.c    **** 				MEMS_BMC050_task();
 220              		.loc 1 159 0
 221 012a FFF7FEFF 		bl	MEMS_BMC050_task
 161:src/main.c    **** 				if (BMC050_Readings.data_valid == TRUE){
 222              		.loc 1 161 0
 223 012e 40F20003 		movw	r3, #:lower16:BMC050_Readings
 224 0132 C0F20003 		movt	r3, #:upper16:BMC050_Readings
 225 0136 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 226 0138 012B     		cmp	r3, #1
 227 013a 01D1     		bne	.L10
 162:src/main.c    **** 					CAN_UserSendBMCData();
 228              		.loc 1 162 0
 229 013c FFF7FEFF 		bl	CAN_UserSendBMCData
 230              	.L10:
 169:src/main.c    **** 		if (SYSTIME_DIFF (L3GD20task_counter, SYSTIME_NOW) >= 50000)
 231              		.loc 1 169 0
 232 0140 4FF04023 		mov	r3, #1073758208
 233 0144 9A68     		ldr	r2, [r3, #8]
 234 0146 40F20003 		movw	r3, #:lower16:L3GD20task_counter.6679
 235 014a C0F20003 		movt	r3, #:upper16:L3GD20task_counter.6679
 236 014e 1B68     		ldr	r3, [r3, #0]
 237 0150 9A42     		cmp	r2, r3
 238 0152 10D3     		bcc	.L11
 169:src/main.c    **** 		if (SYSTIME_DIFF (L3GD20task_counter, SYSTIME_NOW) >= 50000)
 239              		.loc 1 169 0 is_stmt 0 discriminator 1
 240 0154 4FF04023 		mov	r3, #1073758208
 241 0158 9A68     		ldr	r2, [r3, #8]
 242 015a 40F20003 		movw	r3, #:lower16:L3GD20task_counter.6679
 243 015e C0F20003 		movt	r3, #:upper16:L3GD20task_counter.6679
 244 0162 1B68     		ldr	r3, [r3, #0]
 245 0164 D21A     		subs	r2, r2, r3
 246 0166 4CF24F33 		movw	r3, #49999
 247 016a 9A42     		cmp	r2, r3
 248 016c 94BF     		ite	ls
 249 016e 0023     		movls	r3, #0
 250 0170 0123     		movhi	r3, #1
 251 0172 DBB2     		uxtb	r3, r3
 252 0174 11E0     		b	.L12
 253              	.L11:
 169:src/main.c    **** 		if (SYSTIME_DIFF (L3GD20task_counter, SYSTIME_NOW) >= 50000)
 254              		.loc 1 169 0 discriminator 2
 255 0176 40F20003 		movw	r3, #:lower16:L3GD20task_counter.6679
 256 017a C0F20003 		movt	r3, #:upper16:L3GD20task_counter.6679
 257 017e 1B68     		ldr	r3, [r3, #0]
 258 0180 6FEA0302 		mvn	r2, r3
 259 0184 4FF04023 		mov	r3, #1073758208
 260 0188 9B68     		ldr	r3, [r3, #8]
 261 018a D218     		adds	r2, r2, r3
 262 018c 4CF24F33 		movw	r3, #49999
 263 0190 9A42     		cmp	r2, r3
 264 0192 94BF     		ite	ls
 265 0194 0023     		movls	r3, #0
 266 0196 0123     		movhi	r3, #1
 267 0198 DBB2     		uxtb	r3, r3
 268              	.L12:
 169:src/main.c    **** 		if (SYSTIME_DIFF (L3GD20task_counter, SYSTIME_NOW) >= 50000)
 269              		.loc 1 169 0 discriminator 3
 270 019a 002B     		cmp	r3, #0
 271 019c 12D0     		beq	.L13
 172:src/main.c    **** 			L3GD20task_counter = SYSTIME_NOW;
 272              		.loc 1 172 0 is_stmt 1
 273 019e 4FF04023 		mov	r3, #1073758208
 274 01a2 9A68     		ldr	r2, [r3, #8]
 275 01a4 40F20003 		movw	r3, #:lower16:L3GD20task_counter.6679
 276 01a8 C0F20003 		movt	r3, #:upper16:L3GD20task_counter.6679
 277 01ac 1A60     		str	r2, [r3, #0]
 174:src/main.c    **** 			MEMS_L3GD20_task();
 278              		.loc 1 174 0
 279 01ae FFF7FEFF 		bl	MEMS_L3GD20_task
 176:src/main.c    **** 			if (L3GD20_Readings.data_valid == TRUE)
 280              		.loc 1 176 0
 281 01b2 40F20003 		movw	r3, #:lower16:L3GD20_Readings
 282 01b6 C0F20003 		movt	r3, #:upper16:L3GD20_Readings
 283 01ba 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 284 01bc 012B     		cmp	r3, #1
 285 01be 01D1     		bne	.L13
 177:src/main.c    **** 				CAN_UserSendL3GDData();
 286              		.loc 1 177 0
 287 01c0 FFF7FEFF 		bl	CAN_UserSendL3GDData
 288              	.L13:
 182:src/main.c    **** 		UBLOX_MAX7W_task();
 289              		.loc 1 182 0
 290 01c4 FFF7FEFF 		bl	UBLOX_MAX7W_task
 183:src/main.c    **** 		if (SYSTIME_DIFF (MAX7Wtask_counter, SYSTIME_NOW) >= 100000)
 291              		.loc 1 183 0
 292 01c8 4FF04023 		mov	r3, #1073758208
 293 01cc 9A68     		ldr	r2, [r3, #8]
 294 01ce 40F20003 		movw	r3, #:lower16:MAX7Wtask_counter.6680
 295 01d2 C0F20003 		movt	r3, #:upper16:MAX7Wtask_counter.6680
 296 01d6 1B68     		ldr	r3, [r3, #0]
 297 01d8 9A42     		cmp	r2, r3
 298 01da 12D3     		bcc	.L14
 183:src/main.c    **** 		if (SYSTIME_DIFF (MAX7Wtask_counter, SYSTIME_NOW) >= 100000)
 299              		.loc 1 183 0 is_stmt 0 discriminator 1
 300 01dc 4FF04023 		mov	r3, #1073758208
 301 01e0 9A68     		ldr	r2, [r3, #8]
 302 01e2 40F20003 		movw	r3, #:lower16:MAX7Wtask_counter.6680
 303 01e6 C0F20003 		movt	r3, #:upper16:MAX7Wtask_counter.6680
 304 01ea 1B68     		ldr	r3, [r3, #0]
 305 01ec D21A     		subs	r2, r2, r3
 306 01ee 48F29F63 		movw	r3, #34463
 307 01f2 C0F20103 		movt	r3, 1
 308 01f6 9A42     		cmp	r2, r3
 309 01f8 94BF     		ite	ls
 310 01fa 0023     		movls	r3, #0
 311 01fc 0123     		movhi	r3, #1
 312 01fe DBB2     		uxtb	r3, r3
 313 0200 13E0     		b	.L15
 314              	.L14:
 183:src/main.c    **** 		if (SYSTIME_DIFF (MAX7Wtask_counter, SYSTIME_NOW) >= 100000)
 315              		.loc 1 183 0 discriminator 2
 316 0202 40F20003 		movw	r3, #:lower16:MAX7Wtask_counter.6680
 317 0206 C0F20003 		movt	r3, #:upper16:MAX7Wtask_counter.6680
 318 020a 1B68     		ldr	r3, [r3, #0]
 319 020c 6FEA0302 		mvn	r2, r3
 320 0210 4FF04023 		mov	r3, #1073758208
 321 0214 9B68     		ldr	r3, [r3, #8]
 322 0216 D218     		adds	r2, r2, r3
 323 0218 48F29F63 		movw	r3, #34463
 324 021c C0F20103 		movt	r3, 1
 325 0220 9A42     		cmp	r2, r3
 326 0222 94BF     		ite	ls
 327 0224 0023     		movls	r3, #0
 328 0226 0123     		movhi	r3, #1
 329 0228 DBB2     		uxtb	r3, r3
 330              	.L15:
 183:src/main.c    **** 		if (SYSTIME_DIFF (MAX7Wtask_counter, SYSTIME_NOW) >= 100000)
 331              		.loc 1 183 0 discriminator 3
 332 022a 002B     		cmp	r3, #0
 333 022c 09D0     		beq	.L16
 186:src/main.c    **** 			MAX7Wtask_counter = SYSTIME_NOW;
 334              		.loc 1 186 0 is_stmt 1
 335 022e 4FF04023 		mov	r3, #1073758208
 336 0232 9A68     		ldr	r2, [r3, #8]
 337 0234 40F20003 		movw	r3, #:lower16:MAX7Wtask_counter.6680
 338 0238 C0F20003 		movt	r3, #:upper16:MAX7Wtask_counter.6680
 339 023c 1A60     		str	r2, [r3, #0]
 187:src/main.c    **** 			CAN_UserSendGPSData();
 340              		.loc 1 187 0
 341 023e FFF7FEFF 		bl	CAN_UserSendGPSData
 342              	.L16:
 190:src/main.c    **** 		if (SYSTIME_DIFF (DIO_counter, SYSTIME_NOW) >= 25000)
 343              		.loc 1 190 0
 344 0242 4FF04023 		mov	r3, #1073758208
 345 0246 9A68     		ldr	r2, [r3, #8]
 346 0248 40F20003 		movw	r3, #:lower16:DIO_counter.6681
 347 024c C0F20003 		movt	r3, #:upper16:DIO_counter.6681
 348 0250 1B68     		ldr	r3, [r3, #0]
 349 0252 9A42     		cmp	r2, r3
 350 0254 10D3     		bcc	.L17
 190:src/main.c    **** 		if (SYSTIME_DIFF (DIO_counter, SYSTIME_NOW) >= 25000)
 351              		.loc 1 190 0 is_stmt 0 discriminator 1
 352 0256 4FF04023 		mov	r3, #1073758208
 353 025a 9A68     		ldr	r2, [r3, #8]
 354 025c 40F20003 		movw	r3, #:lower16:DIO_counter.6681
 355 0260 C0F20003 		movt	r3, #:upper16:DIO_counter.6681
 356 0264 1B68     		ldr	r3, [r3, #0]
 357 0266 D21A     		subs	r2, r2, r3
 358 0268 46F2A713 		movw	r3, #24999
 359 026c 9A42     		cmp	r2, r3
 360 026e 94BF     		ite	ls
 361 0270 0023     		movls	r3, #0
 362 0272 0123     		movhi	r3, #1
 363 0274 DBB2     		uxtb	r3, r3
 364 0276 11E0     		b	.L18
 365              	.L17:
 190:src/main.c    **** 		if (SYSTIME_DIFF (DIO_counter, SYSTIME_NOW) >= 25000)
 366              		.loc 1 190 0 discriminator 2
 367 0278 40F20003 		movw	r3, #:lower16:DIO_counter.6681
 368 027c C0F20003 		movt	r3, #:upper16:DIO_counter.6681
 369 0280 1B68     		ldr	r3, [r3, #0]
 370 0282 6FEA0302 		mvn	r2, r3
 371 0286 4FF04023 		mov	r3, #1073758208
 372 028a 9B68     		ldr	r3, [r3, #8]
 373 028c D218     		adds	r2, r2, r3
 374 028e 46F2A713 		movw	r3, #24999
 375 0292 9A42     		cmp	r2, r3
 376 0294 94BF     		ite	ls
 377 0296 0023     		movls	r3, #0
 378 0298 0123     		movhi	r3, #1
 379 029a DBB2     		uxtb	r3, r3
 380              	.L18:
 190:src/main.c    **** 		if (SYSTIME_DIFF (DIO_counter, SYSTIME_NOW) >= 25000)
 381              		.loc 1 190 0 discriminator 3
 382 029c 002B     		cmp	r3, #0
 383 029e 09D0     		beq	.L19
 193:src/main.c    **** 			DIO_counter = SYSTIME_NOW;
 384              		.loc 1 193 0 is_stmt 1
 385 02a0 4FF04023 		mov	r3, #1073758208
 386 02a4 9A68     		ldr	r2, [r3, #8]
 387 02a6 40F20003 		movw	r3, #:lower16:DIO_counter.6681
 388 02aa C0F20003 		movt	r3, #:upper16:DIO_counter.6681
 389 02ae 1A60     		str	r2, [r3, #0]
 194:src/main.c    **** 			CAN_UserSendDioData();
 390              		.loc 1 194 0
 391 02b0 FFF7FEFF 		bl	CAN_UserSendDioData
 392              	.L19:
 198:src/main.c    **** 		if (SYSTIME_DIFF (TIME_counter, SYSTIME_NOW) >= 500000)
 393              		.loc 1 198 0
 394 02b4 4FF04023 		mov	r3, #1073758208
 395 02b8 9A68     		ldr	r2, [r3, #8]
 396 02ba 40F20003 		movw	r3, #:lower16:TIME_counter.6682
 397 02be C0F20003 		movt	r3, #:upper16:TIME_counter.6682
 398 02c2 1B68     		ldr	r3, [r3, #0]
 399 02c4 9A42     		cmp	r2, r3
 400 02c6 12D3     		bcc	.L20
 198:src/main.c    **** 		if (SYSTIME_DIFF (TIME_counter, SYSTIME_NOW) >= 500000)
 401              		.loc 1 198 0 is_stmt 0 discriminator 1
 402 02c8 4FF04023 		mov	r3, #1073758208
 403 02cc 9A68     		ldr	r2, [r3, #8]
 404 02ce 40F20003 		movw	r3, #:lower16:TIME_counter.6682
 405 02d2 C0F20003 		movt	r3, #:upper16:TIME_counter.6682
 406 02d6 1B68     		ldr	r3, [r3, #0]
 407 02d8 D21A     		subs	r2, r2, r3
 408 02da 4AF21F13 		movw	r3, #41247
 409 02de C0F20703 		movt	r3, 7
 410 02e2 9A42     		cmp	r2, r3
 411 02e4 94BF     		ite	ls
 412 02e6 0023     		movls	r3, #0
 413 02e8 0123     		movhi	r3, #1
 414 02ea DBB2     		uxtb	r3, r3
 415 02ec 13E0     		b	.L21
 416              	.L20:
 198:src/main.c    **** 		if (SYSTIME_DIFF (TIME_counter, SYSTIME_NOW) >= 500000)
 417              		.loc 1 198 0 discriminator 2
 418 02ee 40F20003 		movw	r3, #:lower16:TIME_counter.6682
 419 02f2 C0F20003 		movt	r3, #:upper16:TIME_counter.6682
 420 02f6 1B68     		ldr	r3, [r3, #0]
 421 02f8 6FEA0302 		mvn	r2, r3
 422 02fc 4FF04023 		mov	r3, #1073758208
 423 0300 9B68     		ldr	r3, [r3, #8]
 424 0302 D218     		adds	r2, r2, r3
 425 0304 4AF21F13 		movw	r3, #41247
 426 0308 C0F20703 		movt	r3, 7
 427 030c 9A42     		cmp	r2, r3
 428 030e 94BF     		ite	ls
 429 0310 0023     		movls	r3, #0
 430 0312 0123     		movhi	r3, #1
 431 0314 DBB2     		uxtb	r3, r3
 432              	.L21:
 198:src/main.c    **** 		if (SYSTIME_DIFF (TIME_counter, SYSTIME_NOW) >= 500000)
 433              		.loc 1 198 0 discriminator 3
 434 0316 002B     		cmp	r3, #0
 435 0318 3FF4C8AE 		beq	.L24
 201:src/main.c    **** 			TIME_counter = SYSTIME_NOW;
 436              		.loc 1 201 0 is_stmt 1
 437 031c 4FF04023 		mov	r3, #1073758208
 438 0320 9A68     		ldr	r2, [r3, #8]
 439 0322 40F20003 		movw	r3, #:lower16:TIME_counter.6682
 440 0326 C0F20003 		movt	r3, #:upper16:TIME_counter.6682
 441 032a 1A60     		str	r2, [r3, #0]
 202:src/main.c    **** 			CAN_UserSendRTCTime();
 442              		.loc 1 202 0
 443 032c FFF7FEFF 		bl	CAN_UserSendRTCTime
 444              	.LBE2:
 445              		.loc 1 207 0
 446 0330 BCE6     		b	.L24
 447              		.cfi_endproc
 448              	.LFE113:
 450 0332 00BF     		.align	2
 451              		.thumb
 452              		.thumb_func
 454              	init_system:
 455              	.LFB114:
 208:src/main.c    **** }
 209:src/main.c    **** 
 210:src/main.c    **** 
 211:src/main.c    **** 
 212:src/main.c    **** 	
 213:src/main.c    **** //------------------------------------------------------------------------------
 214:src/main.c    **** //! s32_t init_system(void)
 215:src/main.c    **** //------------------------------------------------------------------------------
 216:src/main.c    **** //! @brief initializes system
 217:src/main.c    **** //------------------------------------------------------------------------------
 218:src/main.c    **** s32_t init_system(void){
 456              		.loc 1 218 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460 0334 80B5     		push	{r7, lr}
 461              	.LCFI4:
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
 465 0336 82B0     		sub	sp, sp, #8
 466              	.LCFI5:
 467              		.cfi_def_cfa_offset 16
 468 0338 00AF     		add	r7, sp, #0
 469              	.LCFI6:
 470              		.cfi_def_cfa_register 7
 219:src/main.c    **** 	s32_t res = 0;
 471              		.loc 1 219 0
 472 033a 4FF00003 		mov	r3, #0
 473 033e 7B60     		str	r3, [r7, #4]
 220:src/main.c    **** 
 221:src/main.c    **** 	// Initialize Basic Parts
 222:src/main.c    **** 	HW_Init();
 474              		.loc 1 222 0
 475 0340 FFF7FEFF 		bl	HW_Init
 223:src/main.c    **** 
 224:src/main.c    **** 	// Initialize Systemtimer
 225:src/main.c    **** 	Init_Timer0();
 476              		.loc 1 225 0
 477 0344 FFF7FEFF 		bl	Init_Timer0
 226:src/main.c    **** 
 227:src/main.c    **** 	rtc_initialize();
 478              		.loc 1 227 0
 479 0348 FFF7FEFF 		bl	rtc_initialize
 228:src/main.c    **** 
 229:src/main.c    **** 	// read configuration values from EEPROM if present
 230:src/main.c    **** 	res = read_persistent_config();
 480              		.loc 1 230 0
 481 034c 00F098F8 		bl	read_persistent_config
 482 0350 7860     		str	r0, [r7, #4]
 231:src/main.c    **** 	if(res!=RET_OK)
 483              		.loc 1 231 0
 484 0352 7B68     		ldr	r3, [r7, #4]
 485 0354 002B     		cmp	r3, #0
 486 0356 01D0     		beq	.L26
 232:src/main.c    **** 		get_default_config();
 487              		.loc 1 232 0
 488 0358 00F036F8 		bl	get_default_config
 489              	.L26:
 233:src/main.c    **** 
 234:src/main.c    **** 	// Initialize CAN Controller
 235:src/main.c    **** 	CAN_UserInit();
 490              		.loc 1 235 0
 491 035c FFF7FEFF 		bl	CAN_UserInit
 236:src/main.c    **** 
 237:src/main.c    **** 	// Init GPS and UART2
 238:src/main.c    **** 	UBLOX_MAX7W_init();
 492              		.loc 1 238 0
 493 0360 FFF7FEFF 		bl	UBLOX_MAX7W_init
 239:src/main.c    **** 
 240:src/main.c    **** 	// Initialize gyroscope
 241:src/main.c    **** 	MEMS_L3GD20_init();
 494              		.loc 1 241 0
 495 0364 FFF7FEFF 		bl	MEMS_L3GD20_init
 242:src/main.c    **** 
 243:src/main.c    **** 	// Initialize magnetometer and accelerometer
 244:src/main.c    **** 	MEMS_BMC050_init_Accelerometer();
 496              		.loc 1 244 0
 497 0368 FFF7FEFF 		bl	MEMS_BMC050_init_Accelerometer
 245:src/main.c    **** 	MEMS_BMC050_init_Magnetometer();
 498              		.loc 1 245 0
 499 036c FFF7FEFF 		bl	MEMS_BMC050_init_Magnetometer
 246:src/main.c    **** 
 247:src/main.c    **** 	// set values read from EEPROM *after* initialization of sensors with
 248:src/main.c    **** 	// default values
 249:src/main.c    **** 	MEMS_BMC050_SetAccCalTargets(	&cfg_data.Acc.cmp_target_x,
 500              		.loc 1 249 0
 501 0370 40F20000 		movw	r0, #:lower16:cfg_data
 502 0374 C0F20000 		movt	r0, #:upper16:cfg_data
 503 0378 1149     		ldr	r1, .L28
 504 037a 124A     		ldr	r2, .L28+4
 505 037c FFF7FEFF 		bl	MEMS_BMC050_SetAccCalTargets
 250:src/main.c    **** 									&cfg_data.Acc.cmp_target_y,
 251:src/main.c    **** 									&cfg_data.Acc.cmp_target_z);
 252:src/main.c    **** 	MEMS_BMC050_SetAccRange(cfg_data.Acc.range);
 506              		.loc 1 252 0
 507 0380 40F20003 		movw	r3, #:lower16:cfg_data
 508 0384 C0F20003 		movt	r3, #:upper16:cfg_data
 509 0388 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 510 038a 1846     		mov	r0, r3
 511 038c FFF7FEFF 		bl	MEMS_BMC050_SetAccRange
 253:src/main.c    **** 
 254:src/main.c    **** 	MEMS_L3GD20_SetRange(cfg_data.Gyro.range);
 512              		.loc 1 254 0
 513 0390 40F20003 		movw	r3, #:lower16:cfg_data
 514 0394 C0F20003 		movt	r3, #:upper16:cfg_data
 515 0398 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 516 039a 1846     		mov	r0, r3
 517 039c FFF7FEFF 		bl	MEMS_L3GD20_SetRange
 255:src/main.c    **** 
 256:src/main.c    **** 	// Transmit initial configuration values once
 257:src/main.c    **** 	CAN_UserResetPanelValues();
 518              		.loc 1 257 0
 519 03a0 FFF7FEFF 		bl	CAN_UserResetPanelValues
 258:src/main.c    **** 
 259:src/main.c    **** 	Initialized = 1;
 520              		.loc 1 259 0
 521 03a4 40F20003 		movw	r3, #:lower16:Initialized
 522 03a8 C0F20003 		movt	r3, #:upper16:Initialized
 523 03ac 4FF00102 		mov	r2, #1
 524 03b0 1A70     		strb	r2, [r3, #0]
 260:src/main.c    **** 	return RET_OK;
 525              		.loc 1 260 0
 526 03b2 4FF00003 		mov	r3, #0
 261:src/main.c    **** }
 527              		.loc 1 261 0
 528 03b6 1846     		mov	r0, r3
 529 03b8 07F10807 		add	r7, r7, #8
 530 03bc BD46     		mov	sp, r7
 531 03be 80BD     		pop	{r7, pc}
 532              	.L29:
 533              		.align	2
 534              	.L28:
 535 03c0 01000000 		.word	cfg_data+1
 536 03c4 02000000 		.word	cfg_data+2
 537              		.cfi_endproc
 538              	.LFE114:
 540              		.align	2
 541              		.thumb
 542              		.thumb_func
 544              	get_default_config:
 545              	.LFB115:
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    **** 
 265:src/main.c    **** //------------------------------------------------------------------------------
 266:src/main.c    **** //! static s32_t get_default_config(void)
 267:src/main.c    **** //------------------------------------------------------------------------------
 268:src/main.c    **** //! @brief	sets system configuration to default values
 269:src/main.c    **** //------------------------------------------------------------------------------
 270:src/main.c    **** static s32_t get_default_config(void){
 546              		.loc 1 270 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 551 03c8 80B4     		push	{r7}
 552              	.LCFI7:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 7, -4
 555 03ca 00AF     		add	r7, sp, #0
 556              	.LCFI8:
 557              		.cfi_def_cfa_register 7
 271:src/main.c    **** 
 272:src/main.c    **** 	cfg_data.Acc.cmp_target_x = 0;
 558              		.loc 1 272 0
 559 03cc 40F20003 		movw	r3, #:lower16:cfg_data
 560 03d0 C0F20003 		movt	r3, #:upper16:cfg_data
 561 03d4 4FF00002 		mov	r2, #0
 562 03d8 1A70     		strb	r2, [r3, #0]
 273:src/main.c    **** 	cfg_data.Acc.cmp_target_y = 0;
 563              		.loc 1 273 0
 564 03da 40F20003 		movw	r3, #:lower16:cfg_data
 565 03de C0F20003 		movt	r3, #:upper16:cfg_data
 566 03e2 4FF00002 		mov	r2, #0
 567 03e6 5A70     		strb	r2, [r3, #1]
 274:src/main.c    **** 	cfg_data.Acc.cmp_target_z = 0;	
 568              		.loc 1 274 0
 569 03e8 40F20003 		movw	r3, #:lower16:cfg_data
 570 03ec C0F20003 		movt	r3, #:upper16:cfg_data
 571 03f0 4FF00002 		mov	r2, #0
 572 03f4 9A70     		strb	r2, [r3, #2]
 275:src/main.c    **** 	cfg_data.Acc.cmp_filt_x = 0;
 573              		.loc 1 275 0
 574 03f6 40F20003 		movw	r3, #:lower16:cfg_data
 575 03fa C0F20003 		movt	r3, #:upper16:cfg_data
 576 03fe 4FF00002 		mov	r2, #0
 577 0402 9A71     		strb	r2, [r3, #6]
 276:src/main.c    **** 	cfg_data.Acc.cmp_filt_y = 0;
 578              		.loc 1 276 0
 579 0404 40F20003 		movw	r3, #:lower16:cfg_data
 580 0408 C0F20003 		movt	r3, #:upper16:cfg_data
 581 040c 4FF00002 		mov	r2, #0
 582 0410 DA71     		strb	r2, [r3, #7]
 277:src/main.c    **** 	cfg_data.Acc.cmp_filt_z = 0;
 583              		.loc 1 277 0
 584 0412 40F20003 		movw	r3, #:lower16:cfg_data
 585 0416 C0F20003 		movt	r3, #:upper16:cfg_data
 586 041a 4FF00002 		mov	r2, #0
 587 041e 1A72     		strb	r2, [r3, #8]
 278:src/main.c    **** 	cfg_data.Acc.cmp_raw_x = 0;
 588              		.loc 1 278 0
 589 0420 40F20003 		movw	r3, #:lower16:cfg_data
 590 0424 C0F20003 		movt	r3, #:upper16:cfg_data
 591 0428 4FF00002 		mov	r2, #0
 592 042c DA70     		strb	r2, [r3, #3]
 279:src/main.c    **** 	cfg_data.Acc.cmp_raw_y = 0;
 593              		.loc 1 279 0
 594 042e 40F20003 		movw	r3, #:lower16:cfg_data
 595 0432 C0F20003 		movt	r3, #:upper16:cfg_data
 596 0436 4FF00002 		mov	r2, #0
 597 043a 1A71     		strb	r2, [r3, #4]
 280:src/main.c    **** 	cfg_data.Acc.cmp_raw_z = 0;
 598              		.loc 1 280 0
 599 043c 40F20003 		movw	r3, #:lower16:cfg_data
 600 0440 C0F20003 		movt	r3, #:upper16:cfg_data
 601 0444 4FF00002 		mov	r2, #0
 602 0448 5A71     		strb	r2, [r3, #5]
 281:src/main.c    **** 	cfg_data.Acc.flags = 0;
 603              		.loc 1 281 0
 604 044a 40F20003 		movw	r3, #:lower16:cfg_data
 605 044e C0F20003 		movt	r3, #:upper16:cfg_data
 606 0452 4FF00002 		mov	r2, #0
 607 0456 9A72     		strb	r2, [r3, #10]
 282:src/main.c    **** 	
 283:src/main.c    **** 	cfg_data.Acc.range = 1;
 608              		.loc 1 283 0
 609 0458 40F20003 		movw	r3, #:lower16:cfg_data
 610 045c C0F20003 		movt	r3, #:upper16:cfg_data
 611 0460 4FF00102 		mov	r2, #1
 612 0464 5A72     		strb	r2, [r3, #9]
 284:src/main.c    **** 
 285:src/main.c    **** 	cfg_data.Gyro.range = 0;
 613              		.loc 1 285 0
 614 0466 40F20003 		movw	r3, #:lower16:cfg_data
 615 046a C0F20003 		movt	r3, #:upper16:cfg_data
 616 046e 4FF00002 		mov	r2, #0
 617 0472 DA72     		strb	r2, [r3, #11]
 286:src/main.c    **** 	
 287:src/main.c    **** 	return RET_OK;
 618              		.loc 1 287 0
 619 0474 4FF00003 		mov	r3, #0
 288:src/main.c    **** }
 620              		.loc 1 288 0
 621 0478 1846     		mov	r0, r3
 622 047a BD46     		mov	sp, r7
 623 047c 80BC     		pop	{r7}
 624 047e 7047     		bx	lr
 625              		.cfi_endproc
 626              	.LFE115:
 628              		.section	.rodata
 629              		.align	2
 630              	.LC0:
 631 0000 FFFFFFFF 		.word	-1
 632 0004 02       		.byte	2
 633 0005 01       		.byte	1
 634 0006 01       		.byte	1
 635 0007 00       		.byte	0
 636 0008 01       		.byte	1
 637 0009 000000   		.space	3
 638              		.text
 639              		.align	2
 640              		.thumb
 641              		.thumb_func
 643              	read_persistent_config:
 644              	.LFB116:
 289:src/main.c    **** 
 290:src/main.c    **** 
 291:src/main.c    **** 
 292:src/main.c    **** //------------------------------------------------------------------------------
 293:src/main.c    **** //! static s32_t read_persistent_config(void)
 294:src/main.c    **** //------------------------------------------------------------------------------
 295:src/main.c    **** //! @brief reads configuration from EEPROM
 296:src/main.c    **** //------------------------------------------------------------------------------
 297:src/main.c    **** //! @return	RET_ERR if EEPROM read fails or if CRC checksum was not valid
 298:src/main.c    **** //!			RET_OK	elsewise
 299:src/main.c    **** //------------------------------------------------------------------------------
 300:src/main.c    **** static s32_t read_persistent_config(void){
 645              		.loc 1 300 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 24
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649 0480 90B5     		push	{r4, r7, lr}
 650              	.LCFI9:
 651              		.cfi_def_cfa_offset 12
 652              		.cfi_offset 4, -12
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0482 89B0     		sub	sp, sp, #36
 656              	.LCFI10:
 657              		.cfi_def_cfa_offset 48
 658 0484 02AF     		add	r7, sp, #8
 659              	.LCFI11:
 660              		.cfi_def_cfa 7, 40
 301:src/main.c    **** 	CRCInit_t cfg= CRC32_CONFIG;
 661              		.loc 1 301 0
 662 0486 40F20003 		movw	r3, #:lower16:.LC0
 663 048a C0F20003 		movt	r3, #:upper16:.LC0
 664 048e 07F10404 		add	r4, r7, #4
 665 0492 93E80700 		ldmia	r3, {r0, r1, r2}
 666 0496 84E80700 		stmia	r4, {r0, r1, r2}
 302:src/main.c    **** 	u32_t res=0;
 667              		.loc 1 302 0
 668 049a 4FF00003 		mov	r3, #0
 669 049e 7B61     		str	r3, [r7, #20]
 303:src/main.c    **** 	u32_t cnt=0;
 670              		.loc 1 303 0
 671 04a0 4FF00003 		mov	r3, #0
 672 04a4 3B61     		str	r3, [r7, #16]
 304:src/main.c    **** 	
 305:src/main.c    **** 	//! read static configuration data from eeprom
 306:src/main.c    **** 	if(EEPROM_Read(EEPROM_INT, EEPROM_CFG_ADDR,
 673              		.loc 1 306 0
 674 04a6 4FF00000 		mov	r0, #0
 675 04aa 4FF00001 		mov	r1, #0
 676 04ae 40F20002 		movw	r2, #:lower16:cfg_data
 677 04b2 C0F20002 		movt	r2, #:upper16:cfg_data
 678 04b6 4FF02403 		mov	r3, #36
 679 04ba FFF7FEFF 		bl	EEPROM_Read
 680 04be 0346     		mov	r3, r0
 681 04c0 002B     		cmp	r3, #0
 682 04c2 02D0     		beq	.L33
 307:src/main.c    **** 			(u8_t*)&cfg_data, sizeof(cfg_data))!=EEPROM_ERR_OK)
 308:src/main.c    **** 		return RET_ERR;
 683              		.loc 1 308 0
 684 04c4 4FF0FF33 		mov	r3, #-1
 685 04c8 23E0     		b	.L36
 686              	.L33:
 309:src/main.c    **** 
 310:src/main.c    **** 	cnt = sizeof(cfg_data)-sizeofmember(S_CONFIG_DATA_t, crc32);
 687              		.loc 1 310 0
 688 04ca 4FF02003 		mov	r3, #32
 689 04ce 3B61     		str	r3, [r7, #16]
 311:src/main.c    **** 	res = CRC_Valid(&cfg_data, cnt, t_crc_8_bit, &cfg, cfg_data.crc32);
 690              		.loc 1 311 0
 691 04d0 40F20003 		movw	r3, #:lower16:cfg_data
 692 04d4 C0F20003 		movt	r3, #:upper16:cfg_data
 693 04d8 1A6A     		ldr	r2, [r3, #32]
 694 04da 07F10403 		add	r3, r7, #4
 695 04de 0092     		str	r2, [sp, #0]
 696 04e0 40F20000 		movw	r0, #:lower16:cfg_data
 697 04e4 C0F20000 		movt	r0, #:upper16:cfg_data
 698 04e8 3969     		ldr	r1, [r7, #16]
 699 04ea 4FF00002 		mov	r2, #0
 700 04ee FFF7FEFF 		bl	CRC_Valid
 701 04f2 7861     		str	r0, [r7, #20]
 312:src/main.c    **** 	if(res!=1)
 702              		.loc 1 312 0
 703 04f4 7B69     		ldr	r3, [r7, #20]
 704 04f6 012B     		cmp	r3, #1
 705 04f8 02D0     		beq	.L35
 313:src/main.c    **** 		return RET_ERR;
 706              		.loc 1 313 0
 707 04fa 4FF0FF33 		mov	r3, #-1
 708 04fe 08E0     		b	.L36
 709              	.L35:
 314:src/main.c    **** 
 315:src/main.c    **** 	persistant_config_used = 1;
 710              		.loc 1 315 0
 711 0500 40F20003 		movw	r3, #:lower16:persistant_config_used
 712 0504 C0F20003 		movt	r3, #:upper16:persistant_config_used
 713 0508 4FF00102 		mov	r2, #1
 714 050c 1A70     		strb	r2, [r3, #0]
 316:src/main.c    **** 
 317:src/main.c    **** 	return RET_OK;
 715              		.loc 1 317 0
 716 050e 4FF00003 		mov	r3, #0
 717              	.L36:
 318:src/main.c    **** }
 718              		.loc 1 318 0
 719 0512 1846     		mov	r0, r3
 720 0514 07F11C07 		add	r7, r7, #28
 721 0518 BD46     		mov	sp, r7
 722 051a 90BD     		pop	{r4, r7, pc}
 723              		.cfi_endproc
 724              	.LFE116:
 726              		.bss
 727 0002 0000     		.align	2
 728              	BMC050task_counter.6678:
 729 0004 00000000 		.space	4
 730              		.align	2
 731              	L3GD20task_counter.6679:
 732 0008 00000000 		.space	4
 733              		.align	2
 734              	MAX7Wtask_counter.6680:
 735 000c 00000000 		.space	4
 736              		.align	2
 737              	DIO_counter.6681:
 738 0010 00000000 		.space	4
 739              		.align	2
 740              	TIME_counter.6682:
 741 0014 00000000 		.space	4
 742              		.align	2
 743              	LedBlink_counter.6673:
 744 0018 00000000 		.space	4
 745              	toggle_led.6674:
 746 001c 00       		.space	1
 747 001d 000000   		.text
 748              	.Letext0:
 749              		.file 2 "c:/tools/pcan-router/yagarto-20121222/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 750              		.file 3 "./inc/lpc407x_8x_177x_8x.h"
 751              		.file 4 "./inc/typedefs.h"
 752              		.file 5 "./inc/lib/crc.h"
 753              		.file 6 "./inc/MEMS_BMC050.h"
 754              		.file 7 "./inc/MEMS_L3GD20.h"
 755              		.file 8 "./inc/crc_data.h"
 756              		.file 9 "./inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:23     .ident:00000000 Ident
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:20     .ident:00000000 $d
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:30     .C2F_Info:00000000 C2F_Array
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:27     .C2F_Info:00000000 $d
                            *COM*:00000024 cfg_data
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:43     .bss:00000000 Initialized
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:44     .bss:00000000 $d
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:48     .bss:00000001 persistant_config_used
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:51     .text:00000000 $t
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:56     .text:00000000 Timer_1000usec
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:743    .bss:00000018 LedBlink_counter.6673
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:745    .bss:0000001c toggle_led.6674
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:140    .text:00000094 main
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:454    .text:00000334 init_system
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:728    .bss:00000004 BMC050task_counter.6678
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:731    .bss:00000008 L3GD20task_counter.6679
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:734    .bss:0000000c MAX7Wtask_counter.6680
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:737    .bss:00000010 DIO_counter.6681
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:740    .bss:00000014 TIME_counter.6682
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:643    .text:00000480 read_persistent_config
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:544    .text:000003c8 get_default_config
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:535    .text:000003c0 $d
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:540    .text:000003c8 $t
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:629    .rodata:00000000 $d
C:\Users\Ian\AppData\Local\Temp\ccTNoaFk.s:630    .rodata:00000000 .LC0
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HW_SetLED
BMC050_Readings
MEMS_BMC050_task
CAN_UserSendBMCData
MEMS_L3GD20_task
L3GD20_Readings
CAN_UserSendL3GDData
UBLOX_MAX7W_task
CAN_UserSendGPSData
CAN_UserSendDioData
CAN_UserSendRTCTime
HW_Init
Init_Timer0
rtc_initialize
CAN_UserInit
UBLOX_MAX7W_init
MEMS_L3GD20_init
MEMS_BMC050_init_Accelerometer
MEMS_BMC050_init_Magnetometer
MEMS_BMC050_SetAccCalTargets
MEMS_BMC050_SetAccRange
MEMS_L3GD20_SetRange
CAN_UserResetPanelValues
EEPROM_Read
CRC_Valid
